# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PvcAccessModes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'read_write_once': 'bool',
        'read_only_many': 'bool',
        'read_write_many': 'bool'
    }

    attribute_map = {
        'read_write_once': 'readWriteOnce',
        'read_only_many': 'readOnlyMany',
        'read_write_many': 'readWriteMany'
    }

    def __init__(self, read_write_once=True, read_only_many=False, read_write_many=False):  # noqa: E501
        """PvcAccessModes - a model defined in Swagger"""  # noqa: E501
        self._read_write_once = None
        self._read_only_many = None
        self._read_write_many = None
        self.discriminator = None
        if read_write_once is not None:
            self.read_write_once = read_write_once
        if read_only_many is not None:
            self.read_only_many = read_only_many
        if read_write_many is not None:
            self.read_write_many = read_write_many

    @property
    def read_write_once(self):
        """Gets the read_write_once of this PvcAccessModes.  # noqa: E501

        Requesting claim that can be mounted in read/write mode to exactly one host. This is the default access mode.  # noqa: E501

        :return: The read_write_once of this PvcAccessModes.  # noqa: E501
        :rtype: bool
        """
        return self._read_write_once

    @read_write_once.setter
    def read_write_once(self, read_write_once):
        """Sets the read_write_once of this PvcAccessModes.

        Requesting claim that can be mounted in read/write mode to exactly one host. This is the default access mode.  # noqa: E501

        :param read_write_once: The read_write_once of this PvcAccessModes.  # noqa: E501
        :type: bool
        """

        self._read_write_once = read_write_once

    @property
    def read_only_many(self):
        """Gets the read_only_many of this PvcAccessModes.  # noqa: E501

        Requesting claim that can be mounted in read-only mode to many hosts.  # noqa: E501

        :return: The read_only_many of this PvcAccessModes.  # noqa: E501
        :rtype: bool
        """
        return self._read_only_many

    @read_only_many.setter
    def read_only_many(self, read_only_many):
        """Sets the read_only_many of this PvcAccessModes.

        Requesting claim that can be mounted in read-only mode to many hosts.  # noqa: E501

        :param read_only_many: The read_only_many of this PvcAccessModes.  # noqa: E501
        :type: bool
        """

        self._read_only_many = read_only_many

    @property
    def read_write_many(self):
        """Gets the read_write_many of this PvcAccessModes.  # noqa: E501

        Requesting claim that can be mounted in read/write mode to many hosts.  # noqa: E501

        :return: The read_write_many of this PvcAccessModes.  # noqa: E501
        :rtype: bool
        """
        return self._read_write_many

    @read_write_many.setter
    def read_write_many(self, read_write_many):
        """Sets the read_write_many of this PvcAccessModes.

        Requesting claim that can be mounted in read/write mode to many hosts.  # noqa: E501

        :param read_write_many: The read_write_many of this PvcAccessModes.  # noqa: E501
        :type: bool
        """

        self._read_write_many = read_write_many

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PvcAccessModes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PvcAccessModes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
