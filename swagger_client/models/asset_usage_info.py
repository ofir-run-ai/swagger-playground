# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssetUsageInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'workspaces': 'list[WorkloadRefAndStatus]',
        'trainings': 'list[WorkloadRefAndStatus]',
        'distributed': 'list[WorkloadRefAndStatus]',
        'inferences': 'list[WorkloadRefAndStatus]',
        'templates': 'list[AssetRef]',
        'assets': 'AssetsUsageRef'
    }

    attribute_map = {
        'workspaces': 'workspaces',
        'trainings': 'trainings',
        'distributed': 'distributed',
        'inferences': 'inferences',
        'templates': 'templates',
        'assets': 'assets'
    }

    def __init__(self, workspaces=None, trainings=None, distributed=None, inferences=None, templates=None, assets=None):  # noqa: E501
        """AssetUsageInfo - a model defined in Swagger"""  # noqa: E501
        self._workspaces = None
        self._trainings = None
        self._distributed = None
        self._inferences = None
        self._templates = None
        self._assets = None
        self.discriminator = None
        if workspaces is not None:
            self.workspaces = workspaces
        if trainings is not None:
            self.trainings = trainings
        if distributed is not None:
            self.distributed = distributed
        if inferences is not None:
            self.inferences = inferences
        if templates is not None:
            self.templates = templates
        if assets is not None:
            self.assets = assets

    @property
    def workspaces(self):
        """Gets the workspaces of this AssetUsageInfo.  # noqa: E501

        workspaces that rely on this asset.  # noqa: E501

        :return: The workspaces of this AssetUsageInfo.  # noqa: E501
        :rtype: list[WorkloadRefAndStatus]
        """
        return self._workspaces

    @workspaces.setter
    def workspaces(self, workspaces):
        """Sets the workspaces of this AssetUsageInfo.

        workspaces that rely on this asset.  # noqa: E501

        :param workspaces: The workspaces of this AssetUsageInfo.  # noqa: E501
        :type: list[WorkloadRefAndStatus]
        """

        self._workspaces = workspaces

    @property
    def trainings(self):
        """Gets the trainings of this AssetUsageInfo.  # noqa: E501

        trainings that rely on this asset.  # noqa: E501

        :return: The trainings of this AssetUsageInfo.  # noqa: E501
        :rtype: list[WorkloadRefAndStatus]
        """
        return self._trainings

    @trainings.setter
    def trainings(self, trainings):
        """Sets the trainings of this AssetUsageInfo.

        trainings that rely on this asset.  # noqa: E501

        :param trainings: The trainings of this AssetUsageInfo.  # noqa: E501
        :type: list[WorkloadRefAndStatus]
        """

        self._trainings = trainings

    @property
    def distributed(self):
        """Gets the distributed of this AssetUsageInfo.  # noqa: E501

        distributed trainings that rely on this asset.  # noqa: E501

        :return: The distributed of this AssetUsageInfo.  # noqa: E501
        :rtype: list[WorkloadRefAndStatus]
        """
        return self._distributed

    @distributed.setter
    def distributed(self, distributed):
        """Sets the distributed of this AssetUsageInfo.

        distributed trainings that rely on this asset.  # noqa: E501

        :param distributed: The distributed of this AssetUsageInfo.  # noqa: E501
        :type: list[WorkloadRefAndStatus]
        """

        self._distributed = distributed

    @property
    def inferences(self):
        """Gets the inferences of this AssetUsageInfo.  # noqa: E501

        inferences that rely on this asset.  # noqa: E501

        :return: The inferences of this AssetUsageInfo.  # noqa: E501
        :rtype: list[WorkloadRefAndStatus]
        """
        return self._inferences

    @inferences.setter
    def inferences(self, inferences):
        """Sets the inferences of this AssetUsageInfo.

        inferences that rely on this asset.  # noqa: E501

        :param inferences: The inferences of this AssetUsageInfo.  # noqa: E501
        :type: list[WorkloadRefAndStatus]
        """

        self._inferences = inferences

    @property
    def templates(self):
        """Gets the templates of this AssetUsageInfo.  # noqa: E501

        templates that rely on this asset.  # noqa: E501

        :return: The templates of this AssetUsageInfo.  # noqa: E501
        :rtype: list[AssetRef]
        """
        return self._templates

    @templates.setter
    def templates(self, templates):
        """Sets the templates of this AssetUsageInfo.

        templates that rely on this asset.  # noqa: E501

        :param templates: The templates of this AssetUsageInfo.  # noqa: E501
        :type: list[AssetRef]
        """

        self._templates = templates

    @property
    def assets(self):
        """Gets the assets of this AssetUsageInfo.  # noqa: E501


        :return: The assets of this AssetUsageInfo.  # noqa: E501
        :rtype: AssetsUsageRef
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this AssetUsageInfo.


        :param assets: The assets of this AssetUsageInfo.  # noqa: E501
        :type: AssetsUsageRef
        """

        self._assets = assets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetUsageInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetUsageInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
