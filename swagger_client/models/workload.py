# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Workload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tenant_id': 'TenantId',
        'running_pods': 'int',
        'phase_updated_at': 'datetime',
        'k8s_phase_updated_at': 'datetime',
        'updated_at': 'datetime',
        'source': 'Source',
        'deleted_at': 'datetime',
        'type': 'str',
        'name': 'str',
        'id': 'str',
        'priority_class_name': 'str',
        'submitted_by': 'str',
        'cluster_id': 'ClusterId',
        'project_name': 'str',
        'project_id': 'str',
        'department_name': 'str',
        'department_id': 'str',
        'namespace': 'str',
        'created_at': 'datetime',
        'workload_requested_resources': 'WorkloadRequestResources',
        'pods_requested_resources': 'WorkloadRequestResources',
        'allocated_resources': 'WorkloadAllocatedResources',
        'actions_support': 'ActionsSupport',
        'phase': 'Phase',
        'conditions': 'Conditions',
        'phase_message': 'str',
        'k8s_phase': 'str',
        'requested_pods': 'RequestedPods',
        'requested_node_pools': 'list[str]',
        'current_node_pools': 'list[str]',
        'completed_at': 'datetime',
        'images': 'list[str]',
        'children_ids': 'list[WorkloadChildrenIds]',
        'urls': 'list[str]',
        'datasources': 'list[Datasource]',
        'environments': 'list[Environment]',
        'external_connections': 'list[Connection1]',
        'distributed_framework': 'str',
        'additional_fields': 'dict(str, object)',
        'preemptible': 'bool'
    }

    attribute_map = {
        'tenant_id': 'tenantId',
        'running_pods': 'runningPods',
        'phase_updated_at': 'phaseUpdatedAt',
        'k8s_phase_updated_at': 'k8sPhaseUpdatedAt',
        'updated_at': 'updatedAt',
        'source': 'source',
        'deleted_at': 'deletedAt',
        'type': 'type',
        'name': 'name',
        'id': 'id',
        'priority_class_name': 'priorityClassName',
        'submitted_by': 'submittedBy',
        'cluster_id': 'clusterId',
        'project_name': 'projectName',
        'project_id': 'projectId',
        'department_name': 'departmentName',
        'department_id': 'departmentId',
        'namespace': 'namespace',
        'created_at': 'createdAt',
        'workload_requested_resources': 'workloadRequestedResources',
        'pods_requested_resources': 'podsRequestedResources',
        'allocated_resources': 'allocatedResources',
        'actions_support': 'actionsSupport',
        'phase': 'phase',
        'conditions': 'conditions',
        'phase_message': 'phaseMessage',
        'k8s_phase': 'k8sPhase',
        'requested_pods': 'requestedPods',
        'requested_node_pools': 'requestedNodePools',
        'current_node_pools': 'currentNodePools',
        'completed_at': 'completedAt',
        'images': 'images',
        'children_ids': 'childrenIds',
        'urls': 'urls',
        'datasources': 'datasources',
        'environments': 'environments',
        'external_connections': 'externalConnections',
        'distributed_framework': 'distributedFramework',
        'additional_fields': 'additionalFields',
        'preemptible': 'preemptible'
    }

    def __init__(self, tenant_id=None, running_pods=None, phase_updated_at=None, k8s_phase_updated_at=None, updated_at=None, source=None, deleted_at=None, type=None, name=None, id=None, priority_class_name=None, submitted_by=None, cluster_id=None, project_name=None, project_id=None, department_name=None, department_id=None, namespace=None, created_at=None, workload_requested_resources=None, pods_requested_resources=None, allocated_resources=None, actions_support=None, phase=None, conditions=None, phase_message=None, k8s_phase=None, requested_pods=None, requested_node_pools=None, current_node_pools=None, completed_at=None, images=None, children_ids=None, urls=None, datasources=None, environments=None, external_connections=None, distributed_framework=None, additional_fields=None, preemptible=None):  # noqa: E501
        """Workload - a model defined in Swagger"""  # noqa: E501
        self._tenant_id = None
        self._running_pods = None
        self._phase_updated_at = None
        self._k8s_phase_updated_at = None
        self._updated_at = None
        self._source = None
        self._deleted_at = None
        self._type = None
        self._name = None
        self._id = None
        self._priority_class_name = None
        self._submitted_by = None
        self._cluster_id = None
        self._project_name = None
        self._project_id = None
        self._department_name = None
        self._department_id = None
        self._namespace = None
        self._created_at = None
        self._workload_requested_resources = None
        self._pods_requested_resources = None
        self._allocated_resources = None
        self._actions_support = None
        self._phase = None
        self._conditions = None
        self._phase_message = None
        self._k8s_phase = None
        self._requested_pods = None
        self._requested_node_pools = None
        self._current_node_pools = None
        self._completed_at = None
        self._images = None
        self._children_ids = None
        self._urls = None
        self._datasources = None
        self._environments = None
        self._external_connections = None
        self._distributed_framework = None
        self._additional_fields = None
        self._preemptible = None
        self.discriminator = None
        self.tenant_id = tenant_id
        self.running_pods = running_pods
        self.phase_updated_at = phase_updated_at
        self.k8s_phase_updated_at = k8s_phase_updated_at
        self.updated_at = updated_at
        self.source = source
        self.deleted_at = deleted_at
        self.type = type
        self.name = name
        self.id = id
        self.priority_class_name = priority_class_name
        if submitted_by is not None:
            self.submitted_by = submitted_by
        self.cluster_id = cluster_id
        self.project_name = project_name
        self.project_id = project_id
        self.department_name = department_name
        self.department_id = department_id
        self.namespace = namespace
        self.created_at = created_at
        if workload_requested_resources is not None:
            self.workload_requested_resources = workload_requested_resources
        if pods_requested_resources is not None:
            self.pods_requested_resources = pods_requested_resources
        if allocated_resources is not None:
            self.allocated_resources = allocated_resources
        if actions_support is not None:
            self.actions_support = actions_support
        self.phase = phase
        self.conditions = conditions
        if phase_message is not None:
            self.phase_message = phase_message
        self.k8s_phase = k8s_phase
        if requested_pods is not None:
            self.requested_pods = requested_pods
        if requested_node_pools is not None:
            self.requested_node_pools = requested_node_pools
        if current_node_pools is not None:
            self.current_node_pools = current_node_pools
        if completed_at is not None:
            self.completed_at = completed_at
        if images is not None:
            self.images = images
        if children_ids is not None:
            self.children_ids = children_ids
        if urls is not None:
            self.urls = urls
        if datasources is not None:
            self.datasources = datasources
        if environments is not None:
            self.environments = environments
        if external_connections is not None:
            self.external_connections = external_connections
        if distributed_framework is not None:
            self.distributed_framework = distributed_framework
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if preemptible is not None:
            self.preemptible = preemptible

    @property
    def tenant_id(self):
        """Gets the tenant_id of this Workload.  # noqa: E501


        :return: The tenant_id of this Workload.  # noqa: E501
        :rtype: TenantId
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this Workload.


        :param tenant_id: The tenant_id of this Workload.  # noqa: E501
        :type: TenantId
        """
        if tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    @property
    def running_pods(self):
        """Gets the running_pods of this Workload.  # noqa: E501


        :return: The running_pods of this Workload.  # noqa: E501
        :rtype: int
        """
        return self._running_pods

    @running_pods.setter
    def running_pods(self, running_pods):
        """Sets the running_pods of this Workload.


        :param running_pods: The running_pods of this Workload.  # noqa: E501
        :type: int
        """
        if running_pods is None:
            raise ValueError("Invalid value for `running_pods`, must not be `None`")  # noqa: E501

        self._running_pods = running_pods

    @property
    def phase_updated_at(self):
        """Gets the phase_updated_at of this Workload.  # noqa: E501


        :return: The phase_updated_at of this Workload.  # noqa: E501
        :rtype: datetime
        """
        return self._phase_updated_at

    @phase_updated_at.setter
    def phase_updated_at(self, phase_updated_at):
        """Sets the phase_updated_at of this Workload.


        :param phase_updated_at: The phase_updated_at of this Workload.  # noqa: E501
        :type: datetime
        """
        if phase_updated_at is None:
            raise ValueError("Invalid value for `phase_updated_at`, must not be `None`")  # noqa: E501

        self._phase_updated_at = phase_updated_at

    @property
    def k8s_phase_updated_at(self):
        """Gets the k8s_phase_updated_at of this Workload.  # noqa: E501


        :return: The k8s_phase_updated_at of this Workload.  # noqa: E501
        :rtype: datetime
        """
        return self._k8s_phase_updated_at

    @k8s_phase_updated_at.setter
    def k8s_phase_updated_at(self, k8s_phase_updated_at):
        """Sets the k8s_phase_updated_at of this Workload.


        :param k8s_phase_updated_at: The k8s_phase_updated_at of this Workload.  # noqa: E501
        :type: datetime
        """
        if k8s_phase_updated_at is None:
            raise ValueError("Invalid value for `k8s_phase_updated_at`, must not be `None`")  # noqa: E501

        self._k8s_phase_updated_at = k8s_phase_updated_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Workload.  # noqa: E501


        :return: The updated_at of this Workload.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Workload.


        :param updated_at: The updated_at of this Workload.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def source(self):
        """Gets the source of this Workload.  # noqa: E501


        :return: The source of this Workload.  # noqa: E501
        :rtype: Source
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Workload.


        :param source: The source of this Workload.  # noqa: E501
        :type: Source
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def deleted_at(self):
        """Gets the deleted_at of this Workload.  # noqa: E501


        :return: The deleted_at of this Workload.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this Workload.


        :param deleted_at: The deleted_at of this Workload.  # noqa: E501
        :type: datetime
        """
        if deleted_at is None:
            raise ValueError("Invalid value for `deleted_at`, must not be `None`")  # noqa: E501

        self._deleted_at = deleted_at

    @property
    def type(self):
        """Gets the type of this Workload.  # noqa: E501


        :return: The type of this Workload.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Workload.


        :param type: The type of this Workload.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def name(self):
        """Gets the name of this Workload.  # noqa: E501


        :return: The name of this Workload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Workload.


        :param name: The name of this Workload.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def id(self):
        """Gets the id of this Workload.  # noqa: E501


        :return: The id of this Workload.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Workload.


        :param id: The id of this Workload.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def priority_class_name(self):
        """Gets the priority_class_name of this Workload.  # noqa: E501


        :return: The priority_class_name of this Workload.  # noqa: E501
        :rtype: str
        """
        return self._priority_class_name

    @priority_class_name.setter
    def priority_class_name(self, priority_class_name):
        """Sets the priority_class_name of this Workload.


        :param priority_class_name: The priority_class_name of this Workload.  # noqa: E501
        :type: str
        """
        if priority_class_name is None:
            raise ValueError("Invalid value for `priority_class_name`, must not be `None`")  # noqa: E501

        self._priority_class_name = priority_class_name

    @property
    def submitted_by(self):
        """Gets the submitted_by of this Workload.  # noqa: E501


        :return: The submitted_by of this Workload.  # noqa: E501
        :rtype: str
        """
        return self._submitted_by

    @submitted_by.setter
    def submitted_by(self, submitted_by):
        """Sets the submitted_by of this Workload.


        :param submitted_by: The submitted_by of this Workload.  # noqa: E501
        :type: str
        """

        self._submitted_by = submitted_by

    @property
    def cluster_id(self):
        """Gets the cluster_id of this Workload.  # noqa: E501


        :return: The cluster_id of this Workload.  # noqa: E501
        :rtype: ClusterId
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this Workload.


        :param cluster_id: The cluster_id of this Workload.  # noqa: E501
        :type: ClusterId
        """
        if cluster_id is None:
            raise ValueError("Invalid value for `cluster_id`, must not be `None`")  # noqa: E501

        self._cluster_id = cluster_id

    @property
    def project_name(self):
        """Gets the project_name of this Workload.  # noqa: E501


        :return: The project_name of this Workload.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this Workload.


        :param project_name: The project_name of this Workload.  # noqa: E501
        :type: str
        """
        if project_name is None:
            raise ValueError("Invalid value for `project_name`, must not be `None`")  # noqa: E501

        self._project_name = project_name

    @property
    def project_id(self):
        """Gets the project_id of this Workload.  # noqa: E501


        :return: The project_id of this Workload.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Workload.


        :param project_id: The project_id of this Workload.  # noqa: E501
        :type: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def department_name(self):
        """Gets the department_name of this Workload.  # noqa: E501


        :return: The department_name of this Workload.  # noqa: E501
        :rtype: str
        """
        return self._department_name

    @department_name.setter
    def department_name(self, department_name):
        """Sets the department_name of this Workload.


        :param department_name: The department_name of this Workload.  # noqa: E501
        :type: str
        """
        if department_name is None:
            raise ValueError("Invalid value for `department_name`, must not be `None`")  # noqa: E501

        self._department_name = department_name

    @property
    def department_id(self):
        """Gets the department_id of this Workload.  # noqa: E501


        :return: The department_id of this Workload.  # noqa: E501
        :rtype: str
        """
        return self._department_id

    @department_id.setter
    def department_id(self, department_id):
        """Sets the department_id of this Workload.


        :param department_id: The department_id of this Workload.  # noqa: E501
        :type: str
        """
        if department_id is None:
            raise ValueError("Invalid value for `department_id`, must not be `None`")  # noqa: E501

        self._department_id = department_id

    @property
    def namespace(self):
        """Gets the namespace of this Workload.  # noqa: E501


        :return: The namespace of this Workload.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Workload.


        :param namespace: The namespace of this Workload.  # noqa: E501
        :type: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def created_at(self):
        """Gets the created_at of this Workload.  # noqa: E501


        :return: The created_at of this Workload.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Workload.


        :param created_at: The created_at of this Workload.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def workload_requested_resources(self):
        """Gets the workload_requested_resources of this Workload.  # noqa: E501


        :return: The workload_requested_resources of this Workload.  # noqa: E501
        :rtype: WorkloadRequestResources
        """
        return self._workload_requested_resources

    @workload_requested_resources.setter
    def workload_requested_resources(self, workload_requested_resources):
        """Sets the workload_requested_resources of this Workload.


        :param workload_requested_resources: The workload_requested_resources of this Workload.  # noqa: E501
        :type: WorkloadRequestResources
        """

        self._workload_requested_resources = workload_requested_resources

    @property
    def pods_requested_resources(self):
        """Gets the pods_requested_resources of this Workload.  # noqa: E501


        :return: The pods_requested_resources of this Workload.  # noqa: E501
        :rtype: WorkloadRequestResources
        """
        return self._pods_requested_resources

    @pods_requested_resources.setter
    def pods_requested_resources(self, pods_requested_resources):
        """Sets the pods_requested_resources of this Workload.


        :param pods_requested_resources: The pods_requested_resources of this Workload.  # noqa: E501
        :type: WorkloadRequestResources
        """

        self._pods_requested_resources = pods_requested_resources

    @property
    def allocated_resources(self):
        """Gets the allocated_resources of this Workload.  # noqa: E501


        :return: The allocated_resources of this Workload.  # noqa: E501
        :rtype: WorkloadAllocatedResources
        """
        return self._allocated_resources

    @allocated_resources.setter
    def allocated_resources(self, allocated_resources):
        """Sets the allocated_resources of this Workload.


        :param allocated_resources: The allocated_resources of this Workload.  # noqa: E501
        :type: WorkloadAllocatedResources
        """

        self._allocated_resources = allocated_resources

    @property
    def actions_support(self):
        """Gets the actions_support of this Workload.  # noqa: E501


        :return: The actions_support of this Workload.  # noqa: E501
        :rtype: ActionsSupport
        """
        return self._actions_support

    @actions_support.setter
    def actions_support(self, actions_support):
        """Sets the actions_support of this Workload.


        :param actions_support: The actions_support of this Workload.  # noqa: E501
        :type: ActionsSupport
        """

        self._actions_support = actions_support

    @property
    def phase(self):
        """Gets the phase of this Workload.  # noqa: E501


        :return: The phase of this Workload.  # noqa: E501
        :rtype: Phase
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this Workload.


        :param phase: The phase of this Workload.  # noqa: E501
        :type: Phase
        """
        if phase is None:
            raise ValueError("Invalid value for `phase`, must not be `None`")  # noqa: E501

        self._phase = phase

    @property
    def conditions(self):
        """Gets the conditions of this Workload.  # noqa: E501


        :return: The conditions of this Workload.  # noqa: E501
        :rtype: Conditions
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this Workload.


        :param conditions: The conditions of this Workload.  # noqa: E501
        :type: Conditions
        """
        if conditions is None:
            raise ValueError("Invalid value for `conditions`, must not be `None`")  # noqa: E501

        self._conditions = conditions

    @property
    def phase_message(self):
        """Gets the phase_message of this Workload.  # noqa: E501


        :return: The phase_message of this Workload.  # noqa: E501
        :rtype: str
        """
        return self._phase_message

    @phase_message.setter
    def phase_message(self, phase_message):
        """Sets the phase_message of this Workload.


        :param phase_message: The phase_message of this Workload.  # noqa: E501
        :type: str
        """

        self._phase_message = phase_message

    @property
    def k8s_phase(self):
        """Gets the k8s_phase of this Workload.  # noqa: E501


        :return: The k8s_phase of this Workload.  # noqa: E501
        :rtype: str
        """
        return self._k8s_phase

    @k8s_phase.setter
    def k8s_phase(self, k8s_phase):
        """Sets the k8s_phase of this Workload.


        :param k8s_phase: The k8s_phase of this Workload.  # noqa: E501
        :type: str
        """
        if k8s_phase is None:
            raise ValueError("Invalid value for `k8s_phase`, must not be `None`")  # noqa: E501

        self._k8s_phase = k8s_phase

    @property
    def requested_pods(self):
        """Gets the requested_pods of this Workload.  # noqa: E501


        :return: The requested_pods of this Workload.  # noqa: E501
        :rtype: RequestedPods
        """
        return self._requested_pods

    @requested_pods.setter
    def requested_pods(self, requested_pods):
        """Sets the requested_pods of this Workload.


        :param requested_pods: The requested_pods of this Workload.  # noqa: E501
        :type: RequestedPods
        """

        self._requested_pods = requested_pods

    @property
    def requested_node_pools(self):
        """Gets the requested_node_pools of this Workload.  # noqa: E501


        :return: The requested_node_pools of this Workload.  # noqa: E501
        :rtype: list[str]
        """
        return self._requested_node_pools

    @requested_node_pools.setter
    def requested_node_pools(self, requested_node_pools):
        """Sets the requested_node_pools of this Workload.


        :param requested_node_pools: The requested_node_pools of this Workload.  # noqa: E501
        :type: list[str]
        """

        self._requested_node_pools = requested_node_pools

    @property
    def current_node_pools(self):
        """Gets the current_node_pools of this Workload.  # noqa: E501


        :return: The current_node_pools of this Workload.  # noqa: E501
        :rtype: list[str]
        """
        return self._current_node_pools

    @current_node_pools.setter
    def current_node_pools(self, current_node_pools):
        """Sets the current_node_pools of this Workload.


        :param current_node_pools: The current_node_pools of this Workload.  # noqa: E501
        :type: list[str]
        """

        self._current_node_pools = current_node_pools

    @property
    def completed_at(self):
        """Gets the completed_at of this Workload.  # noqa: E501


        :return: The completed_at of this Workload.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this Workload.


        :param completed_at: The completed_at of this Workload.  # noqa: E501
        :type: datetime
        """

        self._completed_at = completed_at

    @property
    def images(self):
        """Gets the images of this Workload.  # noqa: E501


        :return: The images of this Workload.  # noqa: E501
        :rtype: list[str]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Workload.


        :param images: The images of this Workload.  # noqa: E501
        :type: list[str]
        """

        self._images = images

    @property
    def children_ids(self):
        """Gets the children_ids of this Workload.  # noqa: E501


        :return: The children_ids of this Workload.  # noqa: E501
        :rtype: list[WorkloadChildrenIds]
        """
        return self._children_ids

    @children_ids.setter
    def children_ids(self, children_ids):
        """Sets the children_ids of this Workload.


        :param children_ids: The children_ids of this Workload.  # noqa: E501
        :type: list[WorkloadChildrenIds]
        """

        self._children_ids = children_ids

    @property
    def urls(self):
        """Gets the urls of this Workload.  # noqa: E501


        :return: The urls of this Workload.  # noqa: E501
        :rtype: list[str]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this Workload.


        :param urls: The urls of this Workload.  # noqa: E501
        :type: list[str]
        """

        self._urls = urls

    @property
    def datasources(self):
        """Gets the datasources of this Workload.  # noqa: E501


        :return: The datasources of this Workload.  # noqa: E501
        :rtype: list[Datasource]
        """
        return self._datasources

    @datasources.setter
    def datasources(self, datasources):
        """Sets the datasources of this Workload.


        :param datasources: The datasources of this Workload.  # noqa: E501
        :type: list[Datasource]
        """

        self._datasources = datasources

    @property
    def environments(self):
        """Gets the environments of this Workload.  # noqa: E501


        :return: The environments of this Workload.  # noqa: E501
        :rtype: list[Environment]
        """
        return self._environments

    @environments.setter
    def environments(self, environments):
        """Sets the environments of this Workload.


        :param environments: The environments of this Workload.  # noqa: E501
        :type: list[Environment]
        """

        self._environments = environments

    @property
    def external_connections(self):
        """Gets the external_connections of this Workload.  # noqa: E501


        :return: The external_connections of this Workload.  # noqa: E501
        :rtype: list[Connection1]
        """
        return self._external_connections

    @external_connections.setter
    def external_connections(self, external_connections):
        """Sets the external_connections of this Workload.


        :param external_connections: The external_connections of this Workload.  # noqa: E501
        :type: list[Connection1]
        """

        self._external_connections = external_connections

    @property
    def distributed_framework(self):
        """Gets the distributed_framework of this Workload.  # noqa: E501


        :return: The distributed_framework of this Workload.  # noqa: E501
        :rtype: str
        """
        return self._distributed_framework

    @distributed_framework.setter
    def distributed_framework(self, distributed_framework):
        """Sets the distributed_framework of this Workload.


        :param distributed_framework: The distributed_framework of this Workload.  # noqa: E501
        :type: str
        """

        self._distributed_framework = distributed_framework

    @property
    def additional_fields(self):
        """Gets the additional_fields of this Workload.  # noqa: E501


        :return: The additional_fields of this Workload.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this Workload.


        :param additional_fields: The additional_fields of this Workload.  # noqa: E501
        :type: dict(str, object)
        """

        self._additional_fields = additional_fields

    @property
    def preemptible(self):
        """Gets the preemptible of this Workload.  # noqa: E501


        :return: The preemptible of this Workload.  # noqa: E501
        :rtype: bool
        """
        return self._preemptible

    @preemptible.setter
    def preemptible(self, preemptible):
        """Sets the preemptible of this Workload.


        :param preemptible: The preemptible of this Workload.  # noqa: E501
        :type: bool
        """

        self._preemptible = preemptible

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Workload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Workload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
