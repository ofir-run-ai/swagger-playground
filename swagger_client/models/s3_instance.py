# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.storage_instance_name import StorageInstanceName  # noqa: F401,E501

class S3Instance(StorageInstanceName):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bucket': 'str',
        'path': 'str',
        'url': 'str',
        'access_key_secret': 'str',
        'secret_key_of_access_key_id': 'str',
        'secret_key_of_secret_key': 'str'
    }
    if hasattr(StorageInstanceName, "swagger_types"):
        swagger_types.update(StorageInstanceName.swagger_types)

    attribute_map = {
        'bucket': 'bucket',
        'path': 'path',
        'url': 'url',
        'access_key_secret': 'accessKeySecret',
        'secret_key_of_access_key_id': 'secretKeyOfAccessKeyId',
        'secret_key_of_secret_key': 'secretKeyOfSecretKey'
    }
    if hasattr(StorageInstanceName, "attribute_map"):
        attribute_map.update(StorageInstanceName.attribute_map)

    def __init__(self, bucket=None, path=None, url=None, access_key_secret=None, secret_key_of_access_key_id=None, secret_key_of_secret_key=None, *args, **kwargs):  # noqa: E501
        """S3Instance - a model defined in Swagger"""  # noqa: E501
        self._bucket = None
        self._path = None
        self._url = None
        self._access_key_secret = None
        self._secret_key_of_access_key_id = None
        self._secret_key_of_secret_key = None
        self.discriminator = None
        if bucket is not None:
            self.bucket = bucket
        if path is not None:
            self.path = path
        if url is not None:
            self.url = url
        if access_key_secret is not None:
            self.access_key_secret = access_key_secret
        if secret_key_of_access_key_id is not None:
            self.secret_key_of_access_key_id = secret_key_of_access_key_id
        if secret_key_of_secret_key is not None:
            self.secret_key_of_secret_key = secret_key_of_secret_key
        StorageInstanceName.__init__(self, *args, **kwargs)

    @property
    def bucket(self):
        """Gets the bucket of this S3Instance.  # noqa: E501

        The name of the bucket. (mandatory)  # noqa: E501

        :return: The bucket of this S3Instance.  # noqa: E501
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this S3Instance.

        The name of the bucket. (mandatory)  # noqa: E501

        :param bucket: The bucket of this S3Instance.  # noqa: E501
        :type: str
        """

        self._bucket = bucket

    @property
    def path(self):
        """Gets the path of this S3Instance.  # noqa: E501

        Local path within the workspace to which the S3 bucket will be mapped. (mandatory)  # noqa: E501

        :return: The path of this S3Instance.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this S3Instance.

        Local path within the workspace to which the S3 bucket will be mapped. (mandatory)  # noqa: E501

        :param path: The path of this S3Instance.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def url(self):
        """Gets the url of this S3Instance.  # noqa: E501

        The url of the S3 service provider. The default is the URL of the Amazon AWS S3 service.  # noqa: E501

        :return: The url of this S3Instance.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this S3Instance.

        The url of the S3 service provider. The default is the URL of the Amazon AWS S3 service.  # noqa: E501

        :param url: The url of this S3Instance.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def access_key_secret(self):
        """Gets the access_key_secret of this S3Instance.  # noqa: E501

        Name of the secret containing credentials of the S3 bucket. Used for private S3 buckets.  # noqa: E501

        :return: The access_key_secret of this S3Instance.  # noqa: E501
        :rtype: str
        """
        return self._access_key_secret

    @access_key_secret.setter
    def access_key_secret(self, access_key_secret):
        """Sets the access_key_secret of this S3Instance.

        Name of the secret containing credentials of the S3 bucket. Used for private S3 buckets.  # noqa: E501

        :param access_key_secret: The access_key_secret of this S3Instance.  # noqa: E501
        :type: str
        """

        self._access_key_secret = access_key_secret

    @property
    def secret_key_of_access_key_id(self):
        """Gets the secret_key_of_access_key_id of this S3Instance.  # noqa: E501

        The key to use for loading the access key id from the secret. The default is `AccessKeyId`. For more information, see [Credentials access keys](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html).  # noqa: E501

        :return: The secret_key_of_access_key_id of this S3Instance.  # noqa: E501
        :rtype: str
        """
        return self._secret_key_of_access_key_id

    @secret_key_of_access_key_id.setter
    def secret_key_of_access_key_id(self, secret_key_of_access_key_id):
        """Sets the secret_key_of_access_key_id of this S3Instance.

        The key to use for loading the access key id from the secret. The default is `AccessKeyId`. For more information, see [Credentials access keys](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html).  # noqa: E501

        :param secret_key_of_access_key_id: The secret_key_of_access_key_id of this S3Instance.  # noqa: E501
        :type: str
        """

        self._secret_key_of_access_key_id = secret_key_of_access_key_id

    @property
    def secret_key_of_secret_key(self):
        """Gets the secret_key_of_secret_key of this S3Instance.  # noqa: E501

        The key to use for loading the secret key from the secret. The default is `SecretKey`. For more information, see [Credentials access keys](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html).  # noqa: E501

        :return: The secret_key_of_secret_key of this S3Instance.  # noqa: E501
        :rtype: str
        """
        return self._secret_key_of_secret_key

    @secret_key_of_secret_key.setter
    def secret_key_of_secret_key(self, secret_key_of_secret_key):
        """Sets the secret_key_of_secret_key of this S3Instance.

        The key to use for loading the secret key from the secret. The default is `SecretKey`. For more information, see [Credentials access keys](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html).  # noqa: E501

        :param secret_key_of_secret_key: The secret_key_of_secret_key of this S3Instance.  # noqa: E501
        :type: str
        """

        self._secret_key_of_secret_key = secret_key_of_secret_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(S3Instance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, S3Instance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
