# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DistributedFieldsRules(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_workers': 'IntegerRules',
        'distributed_framework': 'DistributedFrameworkRules',
        'slots_per_worker': 'IntegerRules',
        'min_replicas': 'IntegerRules',
        'max_replicas': 'IntegerRules'
    }

    attribute_map = {
        'num_workers': 'numWorkers',
        'distributed_framework': 'distributedFramework',
        'slots_per_worker': 'slotsPerWorker',
        'min_replicas': 'minReplicas',
        'max_replicas': 'maxReplicas'
    }

    def __init__(self, num_workers=None, distributed_framework=None, slots_per_worker=None, min_replicas=None, max_replicas=None):  # noqa: E501
        """DistributedFieldsRules - a model defined in Swagger"""  # noqa: E501
        self._num_workers = None
        self._distributed_framework = None
        self._slots_per_worker = None
        self._min_replicas = None
        self._max_replicas = None
        self.discriminator = None
        if num_workers is not None:
            self.num_workers = num_workers
        if distributed_framework is not None:
            self.distributed_framework = distributed_framework
        if slots_per_worker is not None:
            self.slots_per_worker = slots_per_worker
        if min_replicas is not None:
            self.min_replicas = min_replicas
        if max_replicas is not None:
            self.max_replicas = max_replicas

    @property
    def num_workers(self):
        """Gets the num_workers of this DistributedFieldsRules.  # noqa: E501


        :return: The num_workers of this DistributedFieldsRules.  # noqa: E501
        :rtype: IntegerRules
        """
        return self._num_workers

    @num_workers.setter
    def num_workers(self, num_workers):
        """Sets the num_workers of this DistributedFieldsRules.


        :param num_workers: The num_workers of this DistributedFieldsRules.  # noqa: E501
        :type: IntegerRules
        """

        self._num_workers = num_workers

    @property
    def distributed_framework(self):
        """Gets the distributed_framework of this DistributedFieldsRules.  # noqa: E501


        :return: The distributed_framework of this DistributedFieldsRules.  # noqa: E501
        :rtype: DistributedFrameworkRules
        """
        return self._distributed_framework

    @distributed_framework.setter
    def distributed_framework(self, distributed_framework):
        """Sets the distributed_framework of this DistributedFieldsRules.


        :param distributed_framework: The distributed_framework of this DistributedFieldsRules.  # noqa: E501
        :type: DistributedFrameworkRules
        """

        self._distributed_framework = distributed_framework

    @property
    def slots_per_worker(self):
        """Gets the slots_per_worker of this DistributedFieldsRules.  # noqa: E501


        :return: The slots_per_worker of this DistributedFieldsRules.  # noqa: E501
        :rtype: IntegerRules
        """
        return self._slots_per_worker

    @slots_per_worker.setter
    def slots_per_worker(self, slots_per_worker):
        """Sets the slots_per_worker of this DistributedFieldsRules.


        :param slots_per_worker: The slots_per_worker of this DistributedFieldsRules.  # noqa: E501
        :type: IntegerRules
        """

        self._slots_per_worker = slots_per_worker

    @property
    def min_replicas(self):
        """Gets the min_replicas of this DistributedFieldsRules.  # noqa: E501


        :return: The min_replicas of this DistributedFieldsRules.  # noqa: E501
        :rtype: IntegerRules
        """
        return self._min_replicas

    @min_replicas.setter
    def min_replicas(self, min_replicas):
        """Sets the min_replicas of this DistributedFieldsRules.


        :param min_replicas: The min_replicas of this DistributedFieldsRules.  # noqa: E501
        :type: IntegerRules
        """

        self._min_replicas = min_replicas

    @property
    def max_replicas(self):
        """Gets the max_replicas of this DistributedFieldsRules.  # noqa: E501


        :return: The max_replicas of this DistributedFieldsRules.  # noqa: E501
        :rtype: IntegerRules
        """
        return self._max_replicas

    @max_replicas.setter
    def max_replicas(self, max_replicas):
        """Sets the max_replicas of this DistributedFieldsRules.


        :param max_replicas: The max_replicas of this DistributedFieldsRules.  # noqa: E501
        :type: IntegerRules
        """

        self._max_replicas = max_replicas

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DistributedFieldsRules, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DistributedFieldsRules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
