# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.shared_scope_base import SharedScopeBase  # noqa: F401,E501

class SharedScope(SharedScopeBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scope_name': 'str',
        'created_at': 'datetime',
        'created_by': 'str'
    }
    if hasattr(SharedScopeBase, "swagger_types"):
        swagger_types.update(SharedScopeBase.swagger_types)

    attribute_map = {
        'scope_name': 'scopeName',
        'created_at': 'createdAt',
        'created_by': 'createdBy'
    }
    if hasattr(SharedScopeBase, "attribute_map"):
        attribute_map.update(SharedScopeBase.attribute_map)

    def __init__(self, scope_name=None, created_at=None, created_by=None, *args, **kwargs):  # noqa: E501
        """SharedScope - a model defined in Swagger"""  # noqa: E501
        self._scope_name = None
        self._created_at = None
        self._created_by = None
        self.discriminator = None
        self.scope_name = scope_name
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        SharedScopeBase.__init__(self, *args, **kwargs)

    @property
    def scope_name(self):
        """Gets the scope_name of this SharedScope.  # noqa: E501

        The name of the scope  # noqa: E501

        :return: The scope_name of this SharedScope.  # noqa: E501
        :rtype: str
        """
        return self._scope_name

    @scope_name.setter
    def scope_name(self, scope_name):
        """Sets the scope_name of this SharedScope.

        The name of the scope  # noqa: E501

        :param scope_name: The scope_name of this SharedScope.  # noqa: E501
        :type: str
        """
        if scope_name is None:
            raise ValueError("Invalid value for `scope_name`, must not be `None`")  # noqa: E501

        self._scope_name = scope_name

    @property
    def created_at(self):
        """Gets the created_at of this SharedScope.  # noqa: E501


        :return: The created_at of this SharedScope.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SharedScope.


        :param created_at: The created_at of this SharedScope.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this SharedScope.  # noqa: E501


        :return: The created_by of this SharedScope.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this SharedScope.


        :param created_by: The created_by of this SharedScope.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SharedScope, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedScope):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
