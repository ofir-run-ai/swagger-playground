# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DepartmentV1CreationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node_pools_resources': 'list[NodePoolAssignedResourcesV1]',
        'name': 'str',
        'deserved_gpus': 'float',
        'allow_over_quota': 'bool',
        'max_allowed_gpus': 'float',
        'resources': 'object'
    }

    attribute_map = {
        'node_pools_resources': 'nodePoolsResources',
        'name': 'name',
        'deserved_gpus': 'deservedGpus',
        'allow_over_quota': 'allowOverQuota',
        'max_allowed_gpus': 'maxAllowedGpus',
        'resources': 'resources'
    }

    def __init__(self, node_pools_resources=None, name=None, deserved_gpus=None, allow_over_quota=None, max_allowed_gpus=None, resources=None):  # noqa: E501
        """DepartmentV1CreationRequest - a model defined in Swagger"""  # noqa: E501
        self._node_pools_resources = None
        self._name = None
        self._deserved_gpus = None
        self._allow_over_quota = None
        self._max_allowed_gpus = None
        self._resources = None
        self.discriminator = None
        if node_pools_resources is not None:
            self.node_pools_resources = node_pools_resources
        if name is not None:
            self.name = name
        if deserved_gpus is not None:
            self.deserved_gpus = deserved_gpus
        if allow_over_quota is not None:
            self.allow_over_quota = allow_over_quota
        if max_allowed_gpus is not None:
            self.max_allowed_gpus = max_allowed_gpus
        if resources is not None:
            self.resources = resources

    @property
    def node_pools_resources(self):
        """Gets the node_pools_resources of this DepartmentV1CreationRequest.  # noqa: E501

        Resources assigned to the Department per node pool.  # noqa: E501

        :return: The node_pools_resources of this DepartmentV1CreationRequest.  # noqa: E501
        :rtype: list[NodePoolAssignedResourcesV1]
        """
        return self._node_pools_resources

    @node_pools_resources.setter
    def node_pools_resources(self, node_pools_resources):
        """Sets the node_pools_resources of this DepartmentV1CreationRequest.

        Resources assigned to the Department per node pool.  # noqa: E501

        :param node_pools_resources: The node_pools_resources of this DepartmentV1CreationRequest.  # noqa: E501
        :type: list[NodePoolAssignedResourcesV1]
        """

        self._node_pools_resources = node_pools_resources

    @property
    def name(self):
        """Gets the name of this DepartmentV1CreationRequest.  # noqa: E501

        The name of the department.  # noqa: E501

        :return: The name of this DepartmentV1CreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DepartmentV1CreationRequest.

        The name of the department.  # noqa: E501

        :param name: The name of this DepartmentV1CreationRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def deserved_gpus(self):
        """Gets the deserved_gpus of this DepartmentV1CreationRequest.  # noqa: E501

        Deprecated. Instead, use `deserved` for the relevant resource type under `NodePoolResources`. Deserved GPUs for the department.  # noqa: E501

        :return: The deserved_gpus of this DepartmentV1CreationRequest.  # noqa: E501
        :rtype: float
        """
        return self._deserved_gpus

    @deserved_gpus.setter
    def deserved_gpus(self, deserved_gpus):
        """Sets the deserved_gpus of this DepartmentV1CreationRequest.

        Deprecated. Instead, use `deserved` for the relevant resource type under `NodePoolResources`. Deserved GPUs for the department.  # noqa: E501

        :param deserved_gpus: The deserved_gpus of this DepartmentV1CreationRequest.  # noqa: E501
        :type: float
        """

        self._deserved_gpus = deserved_gpus

    @property
    def allow_over_quota(self):
        """Gets the allow_over_quota of this DepartmentV1CreationRequest.  # noqa: E501

        Deprecated. Instead, use `maxAllowed` for the relevant resource type under `NodePoolResources`. Is over quota allowed for the department.  # noqa: E501

        :return: The allow_over_quota of this DepartmentV1CreationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_over_quota

    @allow_over_quota.setter
    def allow_over_quota(self, allow_over_quota):
        """Sets the allow_over_quota of this DepartmentV1CreationRequest.

        Deprecated. Instead, use `maxAllowed` for the relevant resource type under `NodePoolResources`. Is over quota allowed for the department.  # noqa: E501

        :param allow_over_quota: The allow_over_quota of this DepartmentV1CreationRequest.  # noqa: E501
        :type: bool
        """

        self._allow_over_quota = allow_over_quota

    @property
    def max_allowed_gpus(self):
        """Gets the max_allowed_gpus of this DepartmentV1CreationRequest.  # noqa: E501

        Deprecated. Instead, use `maxAllowed` for the relevant resource type under `NodePoolResources`. Max allowed GPUs for the department.  # noqa: E501

        :return: The max_allowed_gpus of this DepartmentV1CreationRequest.  # noqa: E501
        :rtype: float
        """
        return self._max_allowed_gpus

    @max_allowed_gpus.setter
    def max_allowed_gpus(self, max_allowed_gpus):
        """Sets the max_allowed_gpus of this DepartmentV1CreationRequest.

        Deprecated. Instead, use `maxAllowed` for the relevant resource type under `NodePoolResources`. Max allowed GPUs for the department.  # noqa: E501

        :param max_allowed_gpus: The max_allowed_gpus of this DepartmentV1CreationRequest.  # noqa: E501
        :type: float
        """

        self._max_allowed_gpus = max_allowed_gpus

    @property
    def resources(self):
        """Gets the resources of this DepartmentV1CreationRequest.  # noqa: E501

        Deprecated. Instead, use 'nodePoolsResources'. Total resources assigned to the Department. Can only be used in PUT/POST when there is a single Node Pool in the system. The resources returned in GET are the sum of all Node Pool Resources.  # noqa: E501

        :return: The resources of this DepartmentV1CreationRequest.  # noqa: E501
        :rtype: object
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this DepartmentV1CreationRequest.

        Deprecated. Instead, use 'nodePoolsResources'. Total resources assigned to the Department. Can only be used in PUT/POST when there is a single Node Pool in the system. The resources returned in GET are the sum of all Node Pool Resources.  # noqa: E501

        :param resources: The resources of this DepartmentV1CreationRequest.  # noqa: E501
        :type: object
        """

        self._resources = resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DepartmentV1CreationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DepartmentV1CreationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
