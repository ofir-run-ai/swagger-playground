# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClaimInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'size': 'str',
        'storage_class': 'str',
        'access_modes': 'PvcAccessModes',
        'volume_mode': 'str'
    }

    attribute_map = {
        'size': 'size',
        'storage_class': 'storageClass',
        'access_modes': 'accessModes',
        'volume_mode': 'volumeMode'
    }

    def __init__(self, size=None, storage_class=None, access_modes=None, volume_mode=None):  # noqa: E501
        """ClaimInfo - a model defined in Swagger"""  # noqa: E501
        self._size = None
        self._storage_class = None
        self._access_modes = None
        self._volume_mode = None
        self.discriminator = None
        if size is not None:
            self.size = size
        if storage_class is not None:
            self.storage_class = storage_class
        if access_modes is not None:
            self.access_modes = access_modes
        if volume_mode is not None:
            self.volume_mode = volume_mode

    @property
    def size(self):
        """Gets the size of this ClaimInfo.  # noqa: E501

        Requested size for the PVC. Mandatory when `existingPvc` is `false` (mandatory)  # noqa: E501

        :return: The size of this ClaimInfo.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ClaimInfo.

        Requested size for the PVC. Mandatory when `existingPvc` is `false` (mandatory)  # noqa: E501

        :param size: The size of this ClaimInfo.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def storage_class(self):
        """Gets the storage_class of this ClaimInfo.  # noqa: E501

        Storage class name to associate with the PVC. This parameter may be omitted if there is a single storage class in the system, or you are using the default storage class. For more information, see [Storage class](https://kubernetes.io/docs/concepts/storage/storage-classes).  # noqa: E501

        :return: The storage_class of this ClaimInfo.  # noqa: E501
        :rtype: str
        """
        return self._storage_class

    @storage_class.setter
    def storage_class(self, storage_class):
        """Sets the storage_class of this ClaimInfo.

        Storage class name to associate with the PVC. This parameter may be omitted if there is a single storage class in the system, or you are using the default storage class. For more information, see [Storage class](https://kubernetes.io/docs/concepts/storage/storage-classes).  # noqa: E501

        :param storage_class: The storage_class of this ClaimInfo.  # noqa: E501
        :type: str
        """

        self._storage_class = storage_class

    @property
    def access_modes(self):
        """Gets the access_modes of this ClaimInfo.  # noqa: E501


        :return: The access_modes of this ClaimInfo.  # noqa: E501
        :rtype: PvcAccessModes
        """
        return self._access_modes

    @access_modes.setter
    def access_modes(self, access_modes):
        """Sets the access_modes of this ClaimInfo.


        :param access_modes: The access_modes of this ClaimInfo.  # noqa: E501
        :type: PvcAccessModes
        """

        self._access_modes = access_modes

    @property
    def volume_mode(self):
        """Gets the volume_mode of this ClaimInfo.  # noqa: E501

        The volume mode required by the claim. Choose Filesystem (default) or Block.  # noqa: E501

        :return: The volume_mode of this ClaimInfo.  # noqa: E501
        :rtype: str
        """
        return self._volume_mode

    @volume_mode.setter
    def volume_mode(self, volume_mode):
        """Sets the volume_mode of this ClaimInfo.

        The volume mode required by the claim. Choose Filesystem (default) or Block.  # noqa: E501

        :param volume_mode: The volume_mode of this ClaimInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["Filesystem", "Block"]  # noqa: E501
        if volume_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `volume_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(volume_mode, allowed_values)
            )

        self._volume_mode = volume_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClaimInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClaimInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
