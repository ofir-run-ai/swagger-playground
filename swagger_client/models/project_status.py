# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'namespace': 'str',
        'phase': 'str',
        'phase_message': 'str',
        'node_pool_quota_statuses': 'list[QuotaStatusNodePool]',
        'quota_status': 'QuotaStatus',
        'additional_status_data': 'dict(str, object)'
    }

    attribute_map = {
        'namespace': 'namespace',
        'phase': 'phase',
        'phase_message': 'phaseMessage',
        'node_pool_quota_statuses': 'nodePoolQuotaStatuses',
        'quota_status': 'quotaStatus',
        'additional_status_data': 'additionalStatusData'
    }

    def __init__(self, namespace=None, phase=None, phase_message=None, node_pool_quota_statuses=None, quota_status=None, additional_status_data=None):  # noqa: E501
        """ProjectStatus - a model defined in Swagger"""  # noqa: E501
        self._namespace = None
        self._phase = None
        self._phase_message = None
        self._node_pool_quota_statuses = None
        self._quota_status = None
        self._additional_status_data = None
        self.discriminator = None
        if namespace is not None:
            self.namespace = namespace
        if phase is not None:
            self.phase = phase
        if phase_message is not None:
            self.phase_message = phase_message
        if node_pool_quota_statuses is not None:
            self.node_pool_quota_statuses = node_pool_quota_statuses
        if quota_status is not None:
            self.quota_status = quota_status
        if additional_status_data is not None:
            self.additional_status_data = additional_status_data

    @property
    def namespace(self):
        """Gets the namespace of this ProjectStatus.  # noqa: E501

        the project's namespace  # noqa: E501

        :return: The namespace of this ProjectStatus.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this ProjectStatus.

        the project's namespace  # noqa: E501

        :param namespace: The namespace of this ProjectStatus.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def phase(self):
        """Gets the phase of this ProjectStatus.  # noqa: E501

        the project's phase  # noqa: E501

        :return: The phase of this ProjectStatus.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this ProjectStatus.

        the project's phase  # noqa: E501

        :param phase: The phase of this ProjectStatus.  # noqa: E501
        :type: str
        """

        self._phase = phase

    @property
    def phase_message(self):
        """Gets the phase_message of this ProjectStatus.  # noqa: E501

        the project's phase message  # noqa: E501

        :return: The phase_message of this ProjectStatus.  # noqa: E501
        :rtype: str
        """
        return self._phase_message

    @phase_message.setter
    def phase_message(self, phase_message):
        """Sets the phase_message of this ProjectStatus.

        the project's phase message  # noqa: E501

        :param phase_message: The phase_message of this ProjectStatus.  # noqa: E501
        :type: str
        """

        self._phase_message = phase_message

    @property
    def node_pool_quota_statuses(self):
        """Gets the node_pool_quota_statuses of this ProjectStatus.  # noqa: E501


        :return: The node_pool_quota_statuses of this ProjectStatus.  # noqa: E501
        :rtype: list[QuotaStatusNodePool]
        """
        return self._node_pool_quota_statuses

    @node_pool_quota_statuses.setter
    def node_pool_quota_statuses(self, node_pool_quota_statuses):
        """Sets the node_pool_quota_statuses of this ProjectStatus.


        :param node_pool_quota_statuses: The node_pool_quota_statuses of this ProjectStatus.  # noqa: E501
        :type: list[QuotaStatusNodePool]
        """

        self._node_pool_quota_statuses = node_pool_quota_statuses

    @property
    def quota_status(self):
        """Gets the quota_status of this ProjectStatus.  # noqa: E501


        :return: The quota_status of this ProjectStatus.  # noqa: E501
        :rtype: QuotaStatus
        """
        return self._quota_status

    @quota_status.setter
    def quota_status(self, quota_status):
        """Sets the quota_status of this ProjectStatus.


        :param quota_status: The quota_status of this ProjectStatus.  # noqa: E501
        :type: QuotaStatus
        """

        self._quota_status = quota_status

    @property
    def additional_status_data(self):
        """Gets the additional_status_data of this ProjectStatus.  # noqa: E501


        :return: The additional_status_data of this ProjectStatus.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._additional_status_data

    @additional_status_data.setter
    def additional_status_data(self, additional_status_data):
        """Sets the additional_status_data of this ProjectStatus.


        :param additional_status_data: The additional_status_data of this ProjectStatus.  # noqa: E501
        :type: dict(str, object)
        """

        self._additional_status_data = additional_status_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
