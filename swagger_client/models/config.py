# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Config(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tenant_name': 'str',
        'auth_client_name': 'str',
        'auth_url': 'str',
        'auth_realm': 'str'
    }

    attribute_map = {
        'tenant_name': 'tenantName',
        'auth_client_name': 'authClientName',
        'auth_url': 'authUrl',
        'auth_realm': 'authRealm'
    }

    def __init__(self, tenant_name=None, auth_client_name=None, auth_url=None, auth_realm=None):  # noqa: E501
        """Config - a model defined in Swagger"""  # noqa: E501
        self._tenant_name = None
        self._auth_client_name = None
        self._auth_url = None
        self._auth_realm = None
        self.discriminator = None
        if tenant_name is not None:
            self.tenant_name = tenant_name
        if auth_client_name is not None:
            self.auth_client_name = auth_client_name
        if auth_url is not None:
            self.auth_url = auth_url
        if auth_realm is not None:
            self.auth_realm = auth_realm

    @property
    def tenant_name(self):
        """Gets the tenant_name of this Config.  # noqa: E501


        :return: The tenant_name of this Config.  # noqa: E501
        :rtype: str
        """
        return self._tenant_name

    @tenant_name.setter
    def tenant_name(self, tenant_name):
        """Sets the tenant_name of this Config.


        :param tenant_name: The tenant_name of this Config.  # noqa: E501
        :type: str
        """

        self._tenant_name = tenant_name

    @property
    def auth_client_name(self):
        """Gets the auth_client_name of this Config.  # noqa: E501


        :return: The auth_client_name of this Config.  # noqa: E501
        :rtype: str
        """
        return self._auth_client_name

    @auth_client_name.setter
    def auth_client_name(self, auth_client_name):
        """Sets the auth_client_name of this Config.


        :param auth_client_name: The auth_client_name of this Config.  # noqa: E501
        :type: str
        """

        self._auth_client_name = auth_client_name

    @property
    def auth_url(self):
        """Gets the auth_url of this Config.  # noqa: E501


        :return: The auth_url of this Config.  # noqa: E501
        :rtype: str
        """
        return self._auth_url

    @auth_url.setter
    def auth_url(self, auth_url):
        """Sets the auth_url of this Config.


        :param auth_url: The auth_url of this Config.  # noqa: E501
        :type: str
        """

        self._auth_url = auth_url

    @property
    def auth_realm(self):
        """Gets the auth_realm of this Config.  # noqa: E501


        :return: The auth_realm of this Config.  # noqa: E501
        :rtype: str
        """
        return self._auth_realm

    @auth_realm.setter
    def auth_realm(self, auth_realm):
        """Sets the auth_realm of this Config.


        :param auth_realm: The auth_realm of this Config.  # noqa: E501
        :type: str
        """

        self._auth_realm = auth_realm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Config, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Config):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
