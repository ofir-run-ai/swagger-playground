# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PodSyncFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'priority_class_name': 'str',
        'id': 'str',
        'workload_id': 'str',
        'cluster_id': 'ClusterId',
        'project_id': 'str',
        'node_name': 'str',
        'created_at': 'datetime',
        'completed_at': 'datetime',
        'containers': 'list[Container1]',
        'current_node_pool': 'str',
        'requested_node_pools': 'list[str]',
        'requested_resources': 'PodRequestResources',
        'allocated_resources': 'AllocatedResources',
        'tolerations': 'PodTolerations',
        'k8s_phase': 'str'
    }

    attribute_map = {
        'name': 'name',
        'priority_class_name': 'priorityClassName',
        'id': 'id',
        'workload_id': 'workloadId',
        'cluster_id': 'clusterId',
        'project_id': 'projectId',
        'node_name': 'nodeName',
        'created_at': 'createdAt',
        'completed_at': 'completedAt',
        'containers': 'containers',
        'current_node_pool': 'currentNodePool',
        'requested_node_pools': 'requestedNodePools',
        'requested_resources': 'requestedResources',
        'allocated_resources': 'allocatedResources',
        'tolerations': 'tolerations',
        'k8s_phase': 'k8sPhase'
    }

    def __init__(self, name=None, priority_class_name=None, id=None, workload_id=None, cluster_id=None, project_id=None, node_name=None, created_at=None, completed_at=None, containers=None, current_node_pool=None, requested_node_pools=None, requested_resources=None, allocated_resources=None, tolerations=None, k8s_phase=None):  # noqa: E501
        """PodSyncFields - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._priority_class_name = None
        self._id = None
        self._workload_id = None
        self._cluster_id = None
        self._project_id = None
        self._node_name = None
        self._created_at = None
        self._completed_at = None
        self._containers = None
        self._current_node_pool = None
        self._requested_node_pools = None
        self._requested_resources = None
        self._allocated_resources = None
        self._tolerations = None
        self._k8s_phase = None
        self.discriminator = None
        self.name = name
        self.priority_class_name = priority_class_name
        self.id = id
        self.workload_id = workload_id
        self.cluster_id = cluster_id
        if project_id is not None:
            self.project_id = project_id
        if node_name is not None:
            self.node_name = node_name
        self.created_at = created_at
        if completed_at is not None:
            self.completed_at = completed_at
        self.containers = containers
        if current_node_pool is not None:
            self.current_node_pool = current_node_pool
        if requested_node_pools is not None:
            self.requested_node_pools = requested_node_pools
        if requested_resources is not None:
            self.requested_resources = requested_resources
        if allocated_resources is not None:
            self.allocated_resources = allocated_resources
        if tolerations is not None:
            self.tolerations = tolerations
        self.k8s_phase = k8s_phase

    @property
    def name(self):
        """Gets the name of this PodSyncFields.  # noqa: E501


        :return: The name of this PodSyncFields.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PodSyncFields.


        :param name: The name of this PodSyncFields.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def priority_class_name(self):
        """Gets the priority_class_name of this PodSyncFields.  # noqa: E501


        :return: The priority_class_name of this PodSyncFields.  # noqa: E501
        :rtype: str
        """
        return self._priority_class_name

    @priority_class_name.setter
    def priority_class_name(self, priority_class_name):
        """Sets the priority_class_name of this PodSyncFields.


        :param priority_class_name: The priority_class_name of this PodSyncFields.  # noqa: E501
        :type: str
        """
        if priority_class_name is None:
            raise ValueError("Invalid value for `priority_class_name`, must not be `None`")  # noqa: E501

        self._priority_class_name = priority_class_name

    @property
    def id(self):
        """Gets the id of this PodSyncFields.  # noqa: E501


        :return: The id of this PodSyncFields.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PodSyncFields.


        :param id: The id of this PodSyncFields.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def workload_id(self):
        """Gets the workload_id of this PodSyncFields.  # noqa: E501


        :return: The workload_id of this PodSyncFields.  # noqa: E501
        :rtype: str
        """
        return self._workload_id

    @workload_id.setter
    def workload_id(self, workload_id):
        """Sets the workload_id of this PodSyncFields.


        :param workload_id: The workload_id of this PodSyncFields.  # noqa: E501
        :type: str
        """
        if workload_id is None:
            raise ValueError("Invalid value for `workload_id`, must not be `None`")  # noqa: E501

        self._workload_id = workload_id

    @property
    def cluster_id(self):
        """Gets the cluster_id of this PodSyncFields.  # noqa: E501


        :return: The cluster_id of this PodSyncFields.  # noqa: E501
        :rtype: ClusterId
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this PodSyncFields.


        :param cluster_id: The cluster_id of this PodSyncFields.  # noqa: E501
        :type: ClusterId
        """
        if cluster_id is None:
            raise ValueError("Invalid value for `cluster_id`, must not be `None`")  # noqa: E501

        self._cluster_id = cluster_id

    @property
    def project_id(self):
        """Gets the project_id of this PodSyncFields.  # noqa: E501


        :return: The project_id of this PodSyncFields.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this PodSyncFields.


        :param project_id: The project_id of this PodSyncFields.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def node_name(self):
        """Gets the node_name of this PodSyncFields.  # noqa: E501


        :return: The node_name of this PodSyncFields.  # noqa: E501
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this PodSyncFields.


        :param node_name: The node_name of this PodSyncFields.  # noqa: E501
        :type: str
        """

        self._node_name = node_name

    @property
    def created_at(self):
        """Gets the created_at of this PodSyncFields.  # noqa: E501


        :return: The created_at of this PodSyncFields.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PodSyncFields.


        :param created_at: The created_at of this PodSyncFields.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def completed_at(self):
        """Gets the completed_at of this PodSyncFields.  # noqa: E501


        :return: The completed_at of this PodSyncFields.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this PodSyncFields.


        :param completed_at: The completed_at of this PodSyncFields.  # noqa: E501
        :type: datetime
        """

        self._completed_at = completed_at

    @property
    def containers(self):
        """Gets the containers of this PodSyncFields.  # noqa: E501


        :return: The containers of this PodSyncFields.  # noqa: E501
        :rtype: list[Container1]
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this PodSyncFields.


        :param containers: The containers of this PodSyncFields.  # noqa: E501
        :type: list[Container1]
        """
        if containers is None:
            raise ValueError("Invalid value for `containers`, must not be `None`")  # noqa: E501

        self._containers = containers

    @property
    def current_node_pool(self):
        """Gets the current_node_pool of this PodSyncFields.  # noqa: E501


        :return: The current_node_pool of this PodSyncFields.  # noqa: E501
        :rtype: str
        """
        return self._current_node_pool

    @current_node_pool.setter
    def current_node_pool(self, current_node_pool):
        """Sets the current_node_pool of this PodSyncFields.


        :param current_node_pool: The current_node_pool of this PodSyncFields.  # noqa: E501
        :type: str
        """

        self._current_node_pool = current_node_pool

    @property
    def requested_node_pools(self):
        """Gets the requested_node_pools of this PodSyncFields.  # noqa: E501


        :return: The requested_node_pools of this PodSyncFields.  # noqa: E501
        :rtype: list[str]
        """
        return self._requested_node_pools

    @requested_node_pools.setter
    def requested_node_pools(self, requested_node_pools):
        """Sets the requested_node_pools of this PodSyncFields.


        :param requested_node_pools: The requested_node_pools of this PodSyncFields.  # noqa: E501
        :type: list[str]
        """

        self._requested_node_pools = requested_node_pools

    @property
    def requested_resources(self):
        """Gets the requested_resources of this PodSyncFields.  # noqa: E501


        :return: The requested_resources of this PodSyncFields.  # noqa: E501
        :rtype: PodRequestResources
        """
        return self._requested_resources

    @requested_resources.setter
    def requested_resources(self, requested_resources):
        """Sets the requested_resources of this PodSyncFields.


        :param requested_resources: The requested_resources of this PodSyncFields.  # noqa: E501
        :type: PodRequestResources
        """

        self._requested_resources = requested_resources

    @property
    def allocated_resources(self):
        """Gets the allocated_resources of this PodSyncFields.  # noqa: E501


        :return: The allocated_resources of this PodSyncFields.  # noqa: E501
        :rtype: AllocatedResources
        """
        return self._allocated_resources

    @allocated_resources.setter
    def allocated_resources(self, allocated_resources):
        """Sets the allocated_resources of this PodSyncFields.


        :param allocated_resources: The allocated_resources of this PodSyncFields.  # noqa: E501
        :type: AllocatedResources
        """

        self._allocated_resources = allocated_resources

    @property
    def tolerations(self):
        """Gets the tolerations of this PodSyncFields.  # noqa: E501


        :return: The tolerations of this PodSyncFields.  # noqa: E501
        :rtype: PodTolerations
        """
        return self._tolerations

    @tolerations.setter
    def tolerations(self, tolerations):
        """Sets the tolerations of this PodSyncFields.


        :param tolerations: The tolerations of this PodSyncFields.  # noqa: E501
        :type: PodTolerations
        """

        self._tolerations = tolerations

    @property
    def k8s_phase(self):
        """Gets the k8s_phase of this PodSyncFields.  # noqa: E501


        :return: The k8s_phase of this PodSyncFields.  # noqa: E501
        :rtype: str
        """
        return self._k8s_phase

    @k8s_phase.setter
    def k8s_phase(self, k8s_phase):
        """Sets the k8s_phase of this PodSyncFields.


        :param k8s_phase: The k8s_phase of this PodSyncFields.  # noqa: E501
        :type: str
        """
        if k8s_phase is None:
            raise ValueError("Invalid value for `k8s_phase`, must not be `None`")  # noqa: E501

        self._k8s_phase = k8s_phase

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PodSyncFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PodSyncFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
