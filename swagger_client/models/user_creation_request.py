# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserCreationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'roles': 'list[Role]',
        'entity_type': 'AuthEntityType',
        'tenant_id': 'TenantId',
        'password': 'str',
        'need_to_change_password': 'bool',
        'permit_all_clusters': 'bool',
        'user_id': 'UserId',
        'permitted_clusters': 'list[ClusterId]'
    }

    attribute_map = {
        'email': 'email',
        'roles': 'roles',
        'entity_type': 'entityType',
        'tenant_id': 'tenantId',
        'password': 'password',
        'need_to_change_password': 'needToChangePassword',
        'permit_all_clusters': 'permitAllClusters',
        'user_id': 'userId',
        'permitted_clusters': 'permittedClusters'
    }

    def __init__(self, email=None, roles=None, entity_type=None, tenant_id=None, password=None, need_to_change_password=None, permit_all_clusters=None, user_id=None, permitted_clusters=None):  # noqa: E501
        """UserCreationRequest - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._roles = None
        self._entity_type = None
        self._tenant_id = None
        self._password = None
        self._need_to_change_password = None
        self._permit_all_clusters = None
        self._user_id = None
        self._permitted_clusters = None
        self.discriminator = None
        self.email = email
        self.roles = roles
        if entity_type is not None:
            self.entity_type = entity_type
        if tenant_id is not None:
            self.tenant_id = tenant_id
        self.password = password
        if need_to_change_password is not None:
            self.need_to_change_password = need_to_change_password
        if permit_all_clusters is not None:
            self.permit_all_clusters = permit_all_clusters
        if user_id is not None:
            self.user_id = user_id
        if permitted_clusters is not None:
            self.permitted_clusters = permitted_clusters

    @property
    def email(self):
        """Gets the email of this UserCreationRequest.  # noqa: E501

        Email address of the user.  # noqa: E501

        :return: The email of this UserCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserCreationRequest.

        Email address of the user.  # noqa: E501

        :param email: The email of this UserCreationRequest.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def roles(self):
        """Gets the roles of this UserCreationRequest.  # noqa: E501


        :return: The roles of this UserCreationRequest.  # noqa: E501
        :rtype: list[Role]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this UserCreationRequest.


        :param roles: The roles of this UserCreationRequest.  # noqa: E501
        :type: list[Role]
        """
        if roles is None:
            raise ValueError("Invalid value for `roles`, must not be `None`")  # noqa: E501

        self._roles = roles

    @property
    def entity_type(self):
        """Gets the entity_type of this UserCreationRequest.  # noqa: E501


        :return: The entity_type of this UserCreationRequest.  # noqa: E501
        :rtype: AuthEntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this UserCreationRequest.


        :param entity_type: The entity_type of this UserCreationRequest.  # noqa: E501
        :type: AuthEntityType
        """

        self._entity_type = entity_type

    @property
    def tenant_id(self):
        """Gets the tenant_id of this UserCreationRequest.  # noqa: E501


        :return: The tenant_id of this UserCreationRequest.  # noqa: E501
        :rtype: TenantId
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this UserCreationRequest.


        :param tenant_id: The tenant_id of this UserCreationRequest.  # noqa: E501
        :type: TenantId
        """

        self._tenant_id = tenant_id

    @property
    def password(self):
        """Gets the password of this UserCreationRequest.  # noqa: E501

        The user's password.  # noqa: E501

        :return: The password of this UserCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserCreationRequest.

        The user's password.  # noqa: E501

        :param password: The password of this UserCreationRequest.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def need_to_change_password(self):
        """Gets the need_to_change_password of this UserCreationRequest.  # noqa: E501

        True if the user is requested to change his password upon next login.  # noqa: E501

        :return: The need_to_change_password of this UserCreationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._need_to_change_password

    @need_to_change_password.setter
    def need_to_change_password(self, need_to_change_password):
        """Sets the need_to_change_password of this UserCreationRequest.

        True if the user is requested to change his password upon next login.  # noqa: E501

        :param need_to_change_password: The need_to_change_password of this UserCreationRequest.  # noqa: E501
        :type: bool
        """

        self._need_to_change_password = need_to_change_password

    @property
    def permit_all_clusters(self):
        """Gets the permit_all_clusters of this UserCreationRequest.  # noqa: E501


        :return: The permit_all_clusters of this UserCreationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._permit_all_clusters

    @permit_all_clusters.setter
    def permit_all_clusters(self, permit_all_clusters):
        """Sets the permit_all_clusters of this UserCreationRequest.


        :param permit_all_clusters: The permit_all_clusters of this UserCreationRequest.  # noqa: E501
        :type: bool
        """

        self._permit_all_clusters = permit_all_clusters

    @property
    def user_id(self):
        """Gets the user_id of this UserCreationRequest.  # noqa: E501


        :return: The user_id of this UserCreationRequest.  # noqa: E501
        :rtype: UserId
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserCreationRequest.


        :param user_id: The user_id of this UserCreationRequest.  # noqa: E501
        :type: UserId
        """

        self._user_id = user_id

    @property
    def permitted_clusters(self):
        """Gets the permitted_clusters of this UserCreationRequest.  # noqa: E501


        :return: The permitted_clusters of this UserCreationRequest.  # noqa: E501
        :rtype: list[ClusterId]
        """
        return self._permitted_clusters

    @permitted_clusters.setter
    def permitted_clusters(self, permitted_clusters):
        """Sets the permitted_clusters of this UserCreationRequest.


        :param permitted_clusters: The permitted_clusters of this UserCreationRequest.  # noqa: E501
        :type: list[ClusterId]
        """

        self._permitted_clusters = permitted_clusters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserCreationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserCreationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
