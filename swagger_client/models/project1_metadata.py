# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Project1Metadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_id': 'ProjectId',
        'project_name': 'ProjectName1',
        'department_id': 'DepartmentId',
        'department_name': 'DepartmentName',
        'cluster_id': 'ClusterId',
        'cluster_name': 'ClusterName'
    }

    attribute_map = {
        'project_id': 'projectId',
        'project_name': 'projectName',
        'department_id': 'departmentId',
        'department_name': 'departmentName',
        'cluster_id': 'clusterId',
        'cluster_name': 'clusterName'
    }

    def __init__(self, project_id=None, project_name=None, department_id=None, department_name=None, cluster_id=None, cluster_name=None):  # noqa: E501
        """Project1Metadata - a model defined in Swagger"""  # noqa: E501
        self._project_id = None
        self._project_name = None
        self._department_id = None
        self._department_name = None
        self._cluster_id = None
        self._cluster_name = None
        self.discriminator = None
        self.project_id = project_id
        self.project_name = project_name
        self.department_id = department_id
        self.department_name = department_name
        self.cluster_id = cluster_id
        self.cluster_name = cluster_name

    @property
    def project_id(self):
        """Gets the project_id of this Project1Metadata.  # noqa: E501


        :return: The project_id of this Project1Metadata.  # noqa: E501
        :rtype: ProjectId
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Project1Metadata.


        :param project_id: The project_id of this Project1Metadata.  # noqa: E501
        :type: ProjectId
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def project_name(self):
        """Gets the project_name of this Project1Metadata.  # noqa: E501


        :return: The project_name of this Project1Metadata.  # noqa: E501
        :rtype: ProjectName1
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this Project1Metadata.


        :param project_name: The project_name of this Project1Metadata.  # noqa: E501
        :type: ProjectName1
        """
        if project_name is None:
            raise ValueError("Invalid value for `project_name`, must not be `None`")  # noqa: E501

        self._project_name = project_name

    @property
    def department_id(self):
        """Gets the department_id of this Project1Metadata.  # noqa: E501


        :return: The department_id of this Project1Metadata.  # noqa: E501
        :rtype: DepartmentId
        """
        return self._department_id

    @department_id.setter
    def department_id(self, department_id):
        """Sets the department_id of this Project1Metadata.


        :param department_id: The department_id of this Project1Metadata.  # noqa: E501
        :type: DepartmentId
        """
        if department_id is None:
            raise ValueError("Invalid value for `department_id`, must not be `None`")  # noqa: E501

        self._department_id = department_id

    @property
    def department_name(self):
        """Gets the department_name of this Project1Metadata.  # noqa: E501


        :return: The department_name of this Project1Metadata.  # noqa: E501
        :rtype: DepartmentName
        """
        return self._department_name

    @department_name.setter
    def department_name(self, department_name):
        """Sets the department_name of this Project1Metadata.


        :param department_name: The department_name of this Project1Metadata.  # noqa: E501
        :type: DepartmentName
        """
        if department_name is None:
            raise ValueError("Invalid value for `department_name`, must not be `None`")  # noqa: E501

        self._department_name = department_name

    @property
    def cluster_id(self):
        """Gets the cluster_id of this Project1Metadata.  # noqa: E501


        :return: The cluster_id of this Project1Metadata.  # noqa: E501
        :rtype: ClusterId
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this Project1Metadata.


        :param cluster_id: The cluster_id of this Project1Metadata.  # noqa: E501
        :type: ClusterId
        """
        if cluster_id is None:
            raise ValueError("Invalid value for `cluster_id`, must not be `None`")  # noqa: E501

        self._cluster_id = cluster_id

    @property
    def cluster_name(self):
        """Gets the cluster_name of this Project1Metadata.  # noqa: E501


        :return: The cluster_name of this Project1Metadata.  # noqa: E501
        :rtype: ClusterName
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this Project1Metadata.


        :param cluster_name: The cluster_name of this Project1Metadata.  # noqa: E501
        :type: ClusterName
        """
        if cluster_name is None:
            raise ValueError("Invalid value for `cluster_name`, must not be `None`")  # noqa: E501

        self._cluster_name = cluster_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Project1Metadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Project1Metadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
