# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TokenResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'str',
        'id_token': 'str',
        'refresh_token': 'str',
        'external_token': 'str'
    }

    attribute_map = {
        'access_token': 'accessToken',
        'id_token': 'idToken',
        'refresh_token': 'refreshToken',
        'external_token': 'externalToken'
    }

    def __init__(self, access_token=None, id_token=None, refresh_token=None, external_token=None):  # noqa: E501
        """TokenResponse - a model defined in Swagger"""  # noqa: E501
        self._access_token = None
        self._id_token = None
        self._refresh_token = None
        self._external_token = None
        self.discriminator = None
        if access_token is not None:
            self.access_token = access_token
        if id_token is not None:
            self.id_token = id_token
        if refresh_token is not None:
            self.refresh_token = refresh_token
        if external_token is not None:
            self.external_token = external_token

    @property
    def access_token(self):
        """Gets the access_token of this TokenResponse.  # noqa: E501


        :return: The access_token of this TokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this TokenResponse.


        :param access_token: The access_token of this TokenResponse.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def id_token(self):
        """Gets the id_token of this TokenResponse.  # noqa: E501


        :return: The id_token of this TokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._id_token

    @id_token.setter
    def id_token(self, id_token):
        """Sets the id_token of this TokenResponse.


        :param id_token: The id_token of this TokenResponse.  # noqa: E501
        :type: str
        """

        self._id_token = id_token

    @property
    def refresh_token(self):
        """Gets the refresh_token of this TokenResponse.  # noqa: E501


        :return: The refresh_token of this TokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this TokenResponse.


        :param refresh_token: The refresh_token of this TokenResponse.  # noqa: E501
        :type: str
        """

        self._refresh_token = refresh_token

    @property
    def external_token(self):
        """Gets the external_token of this TokenResponse.  # noqa: E501


        :return: The external_token of this TokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._external_token

    @external_token.setter
    def external_token(self, external_token):
        """Sets the external_token of this TokenResponse.


        :param external_token: The external_token of this TokenResponse.  # noqa: E501
        :type: str
        """

        self._external_token = external_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
