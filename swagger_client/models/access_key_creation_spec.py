# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccessKeyCreationSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'existing_secret_name': 'str',
        'access_key_id': 'str',
        'secret_access_key': 'str'
    }

    attribute_map = {
        'existing_secret_name': 'existingSecretName',
        'access_key_id': 'accessKeyId',
        'secret_access_key': 'secretAccessKey'
    }

    def __init__(self, existing_secret_name=None, access_key_id=None, secret_access_key=None):  # noqa: E501
        """AccessKeyCreationSpec - a model defined in Swagger"""  # noqa: E501
        self._existing_secret_name = None
        self._access_key_id = None
        self._secret_access_key = None
        self.discriminator = None
        if existing_secret_name is not None:
            self.existing_secret_name = existing_secret_name
        if access_key_id is not None:
            self.access_key_id = access_key_id
        if secret_access_key is not None:
            self.secret_access_key = secret_access_key

    @property
    def existing_secret_name(self):
        """Gets the existing_secret_name of this AccessKeyCreationSpec.  # noqa: E501

        optional name of existing secret in the cluster from which the access key id and secret should be taken. If omitted, you will have to provide those credentials in the accessKeyId and secretAccessKey fields. The provided credentials are encrypted into the control plane database and cloned to a kubernetes secret in the cluster.  # noqa: E501

        :return: The existing_secret_name of this AccessKeyCreationSpec.  # noqa: E501
        :rtype: str
        """
        return self._existing_secret_name

    @existing_secret_name.setter
    def existing_secret_name(self, existing_secret_name):
        """Sets the existing_secret_name of this AccessKeyCreationSpec.

        optional name of existing secret in the cluster from which the access key id and secret should be taken. If omitted, you will have to provide those credentials in the accessKeyId and secretAccessKey fields. The provided credentials are encrypted into the control plane database and cloned to a kubernetes secret in the cluster.  # noqa: E501

        :param existing_secret_name: The existing_secret_name of this AccessKeyCreationSpec.  # noqa: E501
        :type: str
        """

        self._existing_secret_name = existing_secret_name

    @property
    def access_key_id(self):
        """Gets the access_key_id of this AccessKeyCreationSpec.  # noqa: E501

        The access key id of the S3-compatible bucket, required only when not using existing secret.  # noqa: E501

        :return: The access_key_id of this AccessKeyCreationSpec.  # noqa: E501
        :rtype: str
        """
        return self._access_key_id

    @access_key_id.setter
    def access_key_id(self, access_key_id):
        """Sets the access_key_id of this AccessKeyCreationSpec.

        The access key id of the S3-compatible bucket, required only when not using existing secret.  # noqa: E501

        :param access_key_id: The access_key_id of this AccessKeyCreationSpec.  # noqa: E501
        :type: str
        """

        self._access_key_id = access_key_id

    @property
    def secret_access_key(self):
        """Gets the secret_access_key of this AccessKeyCreationSpec.  # noqa: E501

        The secret access key of the S3-compatible bucket, required only when not using existing secret.  # noqa: E501

        :return: The secret_access_key of this AccessKeyCreationSpec.  # noqa: E501
        :rtype: str
        """
        return self._secret_access_key

    @secret_access_key.setter
    def secret_access_key(self, secret_access_key):
        """Sets the secret_access_key of this AccessKeyCreationSpec.

        The secret access key of the S3-compatible bucket, required only when not using existing secret.  # noqa: E501

        :param secret_access_key: The secret_access_key of this AccessKeyCreationSpec.  # noqa: E501
        :type: str
        """

        self._secret_access_key = secret_access_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessKeyCreationSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessKeyCreationSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
