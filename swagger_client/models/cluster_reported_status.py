# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClusterReportedStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conditions': 'list[ClusterReportedStatusConditions]',
        'operands': 'dict(str, ClusterReportedStatusOperands)',
        'platform': 'ClusterReportedStatusPlatform',
        'config': 'ClusterReportedConfig',
        'dependencies': 'ClusterDependenciesStatus'
    }

    attribute_map = {
        'conditions': 'conditions',
        'operands': 'operands',
        'platform': 'platform',
        'config': 'config',
        'dependencies': 'dependencies'
    }

    def __init__(self, conditions=None, operands=None, platform=None, config=None, dependencies=None):  # noqa: E501
        """ClusterReportedStatus - a model defined in Swagger"""  # noqa: E501
        self._conditions = None
        self._operands = None
        self._platform = None
        self._config = None
        self._dependencies = None
        self.discriminator = None
        if conditions is not None:
            self.conditions = conditions
        if operands is not None:
            self.operands = operands
        if platform is not None:
            self.platform = platform
        if config is not None:
            self.config = config
        if dependencies is not None:
            self.dependencies = dependencies

    @property
    def conditions(self):
        """Gets the conditions of this ClusterReportedStatus.  # noqa: E501


        :return: The conditions of this ClusterReportedStatus.  # noqa: E501
        :rtype: list[ClusterReportedStatusConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this ClusterReportedStatus.


        :param conditions: The conditions of this ClusterReportedStatus.  # noqa: E501
        :type: list[ClusterReportedStatusConditions]
        """

        self._conditions = conditions

    @property
    def operands(self):
        """Gets the operands of this ClusterReportedStatus.  # noqa: E501

        OperandStatuses specifies the status of the managed operands  # noqa: E501

        :return: The operands of this ClusterReportedStatus.  # noqa: E501
        :rtype: dict(str, ClusterReportedStatusOperands)
        """
        return self._operands

    @operands.setter
    def operands(self, operands):
        """Sets the operands of this ClusterReportedStatus.

        OperandStatuses specifies the status of the managed operands  # noqa: E501

        :param operands: The operands of this ClusterReportedStatus.  # noqa: E501
        :type: dict(str, ClusterReportedStatusOperands)
        """

        self._operands = operands

    @property
    def platform(self):
        """Gets the platform of this ClusterReportedStatus.  # noqa: E501


        :return: The platform of this ClusterReportedStatus.  # noqa: E501
        :rtype: ClusterReportedStatusPlatform
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this ClusterReportedStatus.


        :param platform: The platform of this ClusterReportedStatus.  # noqa: E501
        :type: ClusterReportedStatusPlatform
        """

        self._platform = platform

    @property
    def config(self):
        """Gets the config of this ClusterReportedStatus.  # noqa: E501


        :return: The config of this ClusterReportedStatus.  # noqa: E501
        :rtype: ClusterReportedConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ClusterReportedStatus.


        :param config: The config of this ClusterReportedStatus.  # noqa: E501
        :type: ClusterReportedConfig
        """

        self._config = config

    @property
    def dependencies(self):
        """Gets the dependencies of this ClusterReportedStatus.  # noqa: E501


        :return: The dependencies of this ClusterReportedStatus.  # noqa: E501
        :rtype: ClusterDependenciesStatus
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this ClusterReportedStatus.


        :param dependencies: The dependencies of this ClusterReportedStatus.  # noqa: E501
        :type: ClusterDependenciesStatus
        """

        self._dependencies = dependencies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterReportedStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterReportedStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
