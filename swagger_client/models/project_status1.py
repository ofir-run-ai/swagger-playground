# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectStatus1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'namespace': 'str',
        'message': 'str',
        'quota_statuses': 'NodePoolsQuotaStatuses'
    }

    attribute_map = {
        'namespace': 'namespace',
        'message': 'message',
        'quota_statuses': 'quotaStatuses'
    }

    def __init__(self, namespace=None, message=None, quota_statuses=None):  # noqa: E501
        """ProjectStatus1 - a model defined in Swagger"""  # noqa: E501
        self._namespace = None
        self._message = None
        self._quota_statuses = None
        self.discriminator = None
        if namespace is not None:
            self.namespace = namespace
        if message is not None:
            self.message = message
        if quota_statuses is not None:
            self.quota_statuses = quota_statuses

    @property
    def namespace(self):
        """Gets the namespace of this ProjectStatus1.  # noqa: E501

        The namespace of the project  # noqa: E501

        :return: The namespace of this ProjectStatus1.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this ProjectStatus1.

        The namespace of the project  # noqa: E501

        :param namespace: The namespace of this ProjectStatus1.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def message(self):
        """Gets the message of this ProjectStatus1.  # noqa: E501

        Detailed phase message  # noqa: E501

        :return: The message of this ProjectStatus1.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ProjectStatus1.

        Detailed phase message  # noqa: E501

        :param message: The message of this ProjectStatus1.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def quota_statuses(self):
        """Gets the quota_statuses of this ProjectStatus1.  # noqa: E501


        :return: The quota_statuses of this ProjectStatus1.  # noqa: E501
        :rtype: NodePoolsQuotaStatuses
        """
        return self._quota_statuses

    @quota_statuses.setter
    def quota_statuses(self, quota_statuses):
        """Sets the quota_statuses of this ProjectStatus1.


        :param quota_statuses: The quota_statuses of this ProjectStatus1.  # noqa: E501
        :type: NodePoolsQuotaStatuses
        """

        self._quota_statuses = quota_statuses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectStatus1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectStatus1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
