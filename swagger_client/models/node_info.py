# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NodeInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'conditions': 'list[NodeStatusConditionDetails]',
        'taints': 'list[NodeTaint]',
        'node_pool': 'str',
        'created_at': 'datetime',
        'gpu_info': 'GpuInfo'
    }

    attribute_map = {
        'status': 'status',
        'conditions': 'conditions',
        'taints': 'taints',
        'node_pool': 'nodePool',
        'created_at': 'createdAt',
        'gpu_info': 'gpuInfo'
    }

    def __init__(self, status=None, conditions=None, taints=None, node_pool=None, created_at=None, gpu_info=None):  # noqa: E501
        """NodeInfo - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._conditions = None
        self._taints = None
        self._node_pool = None
        self._created_at = None
        self._gpu_info = None
        self.discriminator = None
        self.status = status
        if conditions is not None:
            self.conditions = conditions
        if taints is not None:
            self.taints = taints
        self.node_pool = node_pool
        self.created_at = created_at
        if gpu_info is not None:
            self.gpu_info = gpu_info

    @property
    def status(self):
        """Gets the status of this NodeInfo.  # noqa: E501

        The calculated status of the node.  # noqa: E501

        :return: The status of this NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NodeInfo.

        The calculated status of the node.  # noqa: E501

        :param status: The status of this NodeInfo.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["Ready", "NotReady", "Unknown"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def conditions(self):
        """Gets the conditions of this NodeInfo.  # noqa: E501


        :return: The conditions of this NodeInfo.  # noqa: E501
        :rtype: list[NodeStatusConditionDetails]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this NodeInfo.


        :param conditions: The conditions of this NodeInfo.  # noqa: E501
        :type: list[NodeStatusConditionDetails]
        """

        self._conditions = conditions

    @property
    def taints(self):
        """Gets the taints of this NodeInfo.  # noqa: E501


        :return: The taints of this NodeInfo.  # noqa: E501
        :rtype: list[NodeTaint]
        """
        return self._taints

    @taints.setter
    def taints(self, taints):
        """Sets the taints of this NodeInfo.


        :param taints: The taints of this NodeInfo.  # noqa: E501
        :type: list[NodeTaint]
        """

        self._taints = taints

    @property
    def node_pool(self):
        """Gets the node_pool of this NodeInfo.  # noqa: E501

        The node's NodePool.  # noqa: E501

        :return: The node_pool of this NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._node_pool

    @node_pool.setter
    def node_pool(self, node_pool):
        """Sets the node_pool of this NodeInfo.

        The node's NodePool.  # noqa: E501

        :param node_pool: The node_pool of this NodeInfo.  # noqa: E501
        :type: str
        """
        if node_pool is None:
            raise ValueError("Invalid value for `node_pool`, must not be `None`")  # noqa: E501

        self._node_pool = node_pool

    @property
    def created_at(self):
        """Gets the created_at of this NodeInfo.  # noqa: E501


        :return: The created_at of this NodeInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this NodeInfo.


        :param created_at: The created_at of this NodeInfo.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def gpu_info(self):
        """Gets the gpu_info of this NodeInfo.  # noqa: E501


        :return: The gpu_info of this NodeInfo.  # noqa: E501
        :rtype: GpuInfo
        """
        return self._gpu_info

    @gpu_info.setter
    def gpu_info(self, gpu_info):
        """Sets the gpu_info of this NodeInfo.


        :param gpu_info: The gpu_info of this NodeInfo.  # noqa: E501
        :type: GpuInfo
        """

        self._gpu_info = gpu_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
