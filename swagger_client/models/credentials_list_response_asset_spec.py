# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CredentialsListResponseAssetSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_key': 'AllOfCredentialsListResponseAssetSpecAccessKey',
        'password': 'AllOfCredentialsListResponseAssetSpecPassword',
        'docker_registry': 'AllOfCredentialsListResponseAssetSpecDockerRegistry',
        'generic_secret': 'AllOfCredentialsListResponseAssetSpecGenericSecret'
    }

    attribute_map = {
        'access_key': 'accessKey',
        'password': 'password',
        'docker_registry': 'dockerRegistry',
        'generic_secret': 'genericSecret'
    }

    def __init__(self, access_key=None, password=None, docker_registry=None, generic_secret=None):  # noqa: E501
        """CredentialsListResponseAssetSpec - a model defined in Swagger"""  # noqa: E501
        self._access_key = None
        self._password = None
        self._docker_registry = None
        self._generic_secret = None
        self.discriminator = None
        if access_key is not None:
            self.access_key = access_key
        if password is not None:
            self.password = password
        if docker_registry is not None:
            self.docker_registry = docker_registry
        if generic_secret is not None:
            self.generic_secret = generic_secret

    @property
    def access_key(self):
        """Gets the access_key of this CredentialsListResponseAssetSpec.  # noqa: E501


        :return: The access_key of this CredentialsListResponseAssetSpec.  # noqa: E501
        :rtype: AllOfCredentialsListResponseAssetSpecAccessKey
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this CredentialsListResponseAssetSpec.


        :param access_key: The access_key of this CredentialsListResponseAssetSpec.  # noqa: E501
        :type: AllOfCredentialsListResponseAssetSpecAccessKey
        """

        self._access_key = access_key

    @property
    def password(self):
        """Gets the password of this CredentialsListResponseAssetSpec.  # noqa: E501


        :return: The password of this CredentialsListResponseAssetSpec.  # noqa: E501
        :rtype: AllOfCredentialsListResponseAssetSpecPassword
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CredentialsListResponseAssetSpec.


        :param password: The password of this CredentialsListResponseAssetSpec.  # noqa: E501
        :type: AllOfCredentialsListResponseAssetSpecPassword
        """

        self._password = password

    @property
    def docker_registry(self):
        """Gets the docker_registry of this CredentialsListResponseAssetSpec.  # noqa: E501


        :return: The docker_registry of this CredentialsListResponseAssetSpec.  # noqa: E501
        :rtype: AllOfCredentialsListResponseAssetSpecDockerRegistry
        """
        return self._docker_registry

    @docker_registry.setter
    def docker_registry(self, docker_registry):
        """Sets the docker_registry of this CredentialsListResponseAssetSpec.


        :param docker_registry: The docker_registry of this CredentialsListResponseAssetSpec.  # noqa: E501
        :type: AllOfCredentialsListResponseAssetSpecDockerRegistry
        """

        self._docker_registry = docker_registry

    @property
    def generic_secret(self):
        """Gets the generic_secret of this CredentialsListResponseAssetSpec.  # noqa: E501


        :return: The generic_secret of this CredentialsListResponseAssetSpec.  # noqa: E501
        :rtype: AllOfCredentialsListResponseAssetSpecGenericSecret
        """
        return self._generic_secret

    @generic_secret.setter
    def generic_secret(self, generic_secret):
        """Sets the generic_secret of this CredentialsListResponseAssetSpec.


        :param generic_secret: The generic_secret of this CredentialsListResponseAssetSpec.  # noqa: E501
        :type: AllOfCredentialsListResponseAssetSpecGenericSecret
        """

        self._generic_secret = generic_secret

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CredentialsListResponseAssetSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CredentialsListResponseAssetSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
