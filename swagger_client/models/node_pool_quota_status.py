# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NodePoolQuotaStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node_pool_name': 'str',
        'allocated': 'QuotaStatusResourceList',
        'allocated_non_preemptible': 'QuotaStatusResourceList',
        'requested': 'QuotaStatusResourceList'
    }

    attribute_map = {
        'node_pool_name': 'nodePoolName',
        'allocated': 'allocated',
        'allocated_non_preemptible': 'allocatedNonPreemptible',
        'requested': 'requested'
    }

    def __init__(self, node_pool_name=None, allocated=None, allocated_non_preemptible=None, requested=None):  # noqa: E501
        """NodePoolQuotaStatus - a model defined in Swagger"""  # noqa: E501
        self._node_pool_name = None
        self._allocated = None
        self._allocated_non_preemptible = None
        self._requested = None
        self.discriminator = None
        if node_pool_name is not None:
            self.node_pool_name = node_pool_name
        if allocated is not None:
            self.allocated = allocated
        if allocated_non_preemptible is not None:
            self.allocated_non_preemptible = allocated_non_preemptible
        if requested is not None:
            self.requested = requested

    @property
    def node_pool_name(self):
        """Gets the node_pool_name of this NodePoolQuotaStatus.  # noqa: E501

        The node pool name which the current quota status refers to.  # noqa: E501

        :return: The node_pool_name of this NodePoolQuotaStatus.  # noqa: E501
        :rtype: str
        """
        return self._node_pool_name

    @node_pool_name.setter
    def node_pool_name(self, node_pool_name):
        """Sets the node_pool_name of this NodePoolQuotaStatus.

        The node pool name which the current quota status refers to.  # noqa: E501

        :param node_pool_name: The node_pool_name of this NodePoolQuotaStatus.  # noqa: E501
        :type: str
        """

        self._node_pool_name = node_pool_name

    @property
    def allocated(self):
        """Gets the allocated of this NodePoolQuotaStatus.  # noqa: E501


        :return: The allocated of this NodePoolQuotaStatus.  # noqa: E501
        :rtype: QuotaStatusResourceList
        """
        return self._allocated

    @allocated.setter
    def allocated(self, allocated):
        """Sets the allocated of this NodePoolQuotaStatus.


        :param allocated: The allocated of this NodePoolQuotaStatus.  # noqa: E501
        :type: QuotaStatusResourceList
        """

        self._allocated = allocated

    @property
    def allocated_non_preemptible(self):
        """Gets the allocated_non_preemptible of this NodePoolQuotaStatus.  # noqa: E501


        :return: The allocated_non_preemptible of this NodePoolQuotaStatus.  # noqa: E501
        :rtype: QuotaStatusResourceList
        """
        return self._allocated_non_preemptible

    @allocated_non_preemptible.setter
    def allocated_non_preemptible(self, allocated_non_preemptible):
        """Sets the allocated_non_preemptible of this NodePoolQuotaStatus.


        :param allocated_non_preemptible: The allocated_non_preemptible of this NodePoolQuotaStatus.  # noqa: E501
        :type: QuotaStatusResourceList
        """

        self._allocated_non_preemptible = allocated_non_preemptible

    @property
    def requested(self):
        """Gets the requested of this NodePoolQuotaStatus.  # noqa: E501


        :return: The requested of this NodePoolQuotaStatus.  # noqa: E501
        :rtype: QuotaStatusResourceList
        """
        return self._requested

    @requested.setter
    def requested(self, requested):
        """Sets the requested of this NodePoolQuotaStatus.


        :param requested: The requested of this NodePoolQuotaStatus.  # noqa: E501
        :type: QuotaStatusResourceList
        """

        self._requested = requested

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodePoolQuotaStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodePoolQuotaStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
