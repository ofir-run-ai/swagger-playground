# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Deployment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_uuid': 'str',
        'id': 'str',
        'name': 'str',
        'namespace': 'str',
        'project': 'str',
        'owners': 'list[Owner]',
        'created_at': 'datetime',
        'replicas': 'int',
        'template': 'PodTemplate',
        'scheduler_name': 'str',
        'username': 'str',
        'connections': 'list[str]',
        'service_id': 'str',
        'revision_id': 'str',
        'inferenceworkload_name': 'str',
        'conditions': 'list[DeploymentCondition]',
        'node_pool': 'str'
    }

    attribute_map = {
        'cluster_uuid': 'clusterUuid',
        'id': 'id',
        'name': 'name',
        'namespace': 'namespace',
        'project': 'project',
        'owners': 'owners',
        'created_at': 'createdAt',
        'replicas': 'replicas',
        'template': 'template',
        'scheduler_name': 'schedulerName',
        'username': 'username',
        'connections': 'connections',
        'service_id': 'serviceId',
        'revision_id': 'revisionId',
        'inferenceworkload_name': 'inferenceworkloadName',
        'conditions': 'conditions',
        'node_pool': 'nodePool'
    }

    def __init__(self, cluster_uuid=None, id=None, name=None, namespace=None, project=None, owners=None, created_at=None, replicas=None, template=None, scheduler_name=None, username=None, connections=None, service_id=None, revision_id=None, inferenceworkload_name=None, conditions=None, node_pool=None):  # noqa: E501
        """Deployment - a model defined in Swagger"""  # noqa: E501
        self._cluster_uuid = None
        self._id = None
        self._name = None
        self._namespace = None
        self._project = None
        self._owners = None
        self._created_at = None
        self._replicas = None
        self._template = None
        self._scheduler_name = None
        self._username = None
        self._connections = None
        self._service_id = None
        self._revision_id = None
        self._inferenceworkload_name = None
        self._conditions = None
        self._node_pool = None
        self.discriminator = None
        self.cluster_uuid = cluster_uuid
        self.id = id
        self.name = name
        self.namespace = namespace
        if project is not None:
            self.project = project
        self.owners = owners
        if created_at is not None:
            self.created_at = created_at
        self.replicas = replicas
        self.template = template
        self.scheduler_name = scheduler_name
        if username is not None:
            self.username = username
        self.connections = connections
        if service_id is not None:
            self.service_id = service_id
        if revision_id is not None:
            self.revision_id = revision_id
        if inferenceworkload_name is not None:
            self.inferenceworkload_name = inferenceworkload_name
        if conditions is not None:
            self.conditions = conditions
        if node_pool is not None:
            self.node_pool = node_pool

    @property
    def cluster_uuid(self):
        """Gets the cluster_uuid of this Deployment.  # noqa: E501


        :return: The cluster_uuid of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._cluster_uuid

    @cluster_uuid.setter
    def cluster_uuid(self, cluster_uuid):
        """Sets the cluster_uuid of this Deployment.


        :param cluster_uuid: The cluster_uuid of this Deployment.  # noqa: E501
        :type: str
        """
        if cluster_uuid is None:
            raise ValueError("Invalid value for `cluster_uuid`, must not be `None`")  # noqa: E501

        self._cluster_uuid = cluster_uuid

    @property
    def id(self):
        """Gets the id of this Deployment.  # noqa: E501


        :return: The id of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Deployment.


        :param id: The id of this Deployment.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Deployment.  # noqa: E501


        :return: The name of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Deployment.


        :param name: The name of this Deployment.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this Deployment.  # noqa: E501


        :return: The namespace of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Deployment.


        :param namespace: The namespace of this Deployment.  # noqa: E501
        :type: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def project(self):
        """Gets the project of this Deployment.  # noqa: E501


        :return: The project of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Deployment.


        :param project: The project of this Deployment.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def owners(self):
        """Gets the owners of this Deployment.  # noqa: E501


        :return: The owners of this Deployment.  # noqa: E501
        :rtype: list[Owner]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this Deployment.


        :param owners: The owners of this Deployment.  # noqa: E501
        :type: list[Owner]
        """
        if owners is None:
            raise ValueError("Invalid value for `owners`, must not be `None`")  # noqa: E501

        self._owners = owners

    @property
    def created_at(self):
        """Gets the created_at of this Deployment.  # noqa: E501


        :return: The created_at of this Deployment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Deployment.


        :param created_at: The created_at of this Deployment.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def replicas(self):
        """Gets the replicas of this Deployment.  # noqa: E501


        :return: The replicas of this Deployment.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this Deployment.


        :param replicas: The replicas of this Deployment.  # noqa: E501
        :type: int
        """
        if replicas is None:
            raise ValueError("Invalid value for `replicas`, must not be `None`")  # noqa: E501

        self._replicas = replicas

    @property
    def template(self):
        """Gets the template of this Deployment.  # noqa: E501


        :return: The template of this Deployment.  # noqa: E501
        :rtype: PodTemplate
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this Deployment.


        :param template: The template of this Deployment.  # noqa: E501
        :type: PodTemplate
        """
        if template is None:
            raise ValueError("Invalid value for `template`, must not be `None`")  # noqa: E501

        self._template = template

    @property
    def scheduler_name(self):
        """Gets the scheduler_name of this Deployment.  # noqa: E501


        :return: The scheduler_name of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._scheduler_name

    @scheduler_name.setter
    def scheduler_name(self, scheduler_name):
        """Sets the scheduler_name of this Deployment.


        :param scheduler_name: The scheduler_name of this Deployment.  # noqa: E501
        :type: str
        """
        if scheduler_name is None:
            raise ValueError("Invalid value for `scheduler_name`, must not be `None`")  # noqa: E501

        self._scheduler_name = scheduler_name

    @property
    def username(self):
        """Gets the username of this Deployment.  # noqa: E501


        :return: The username of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Deployment.


        :param username: The username of this Deployment.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def connections(self):
        """Gets the connections of this Deployment.  # noqa: E501


        :return: The connections of this Deployment.  # noqa: E501
        :rtype: list[str]
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this Deployment.


        :param connections: The connections of this Deployment.  # noqa: E501
        :type: list[str]
        """
        if connections is None:
            raise ValueError("Invalid value for `connections`, must not be `None`")  # noqa: E501

        self._connections = connections

    @property
    def service_id(self):
        """Gets the service_id of this Deployment.  # noqa: E501


        :return: The service_id of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this Deployment.


        :param service_id: The service_id of this Deployment.  # noqa: E501
        :type: str
        """

        self._service_id = service_id

    @property
    def revision_id(self):
        """Gets the revision_id of this Deployment.  # noqa: E501


        :return: The revision_id of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this Deployment.


        :param revision_id: The revision_id of this Deployment.  # noqa: E501
        :type: str
        """

        self._revision_id = revision_id

    @property
    def inferenceworkload_name(self):
        """Gets the inferenceworkload_name of this Deployment.  # noqa: E501


        :return: The inferenceworkload_name of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._inferenceworkload_name

    @inferenceworkload_name.setter
    def inferenceworkload_name(self, inferenceworkload_name):
        """Sets the inferenceworkload_name of this Deployment.


        :param inferenceworkload_name: The inferenceworkload_name of this Deployment.  # noqa: E501
        :type: str
        """

        self._inferenceworkload_name = inferenceworkload_name

    @property
    def conditions(self):
        """Gets the conditions of this Deployment.  # noqa: E501


        :return: The conditions of this Deployment.  # noqa: E501
        :rtype: list[DeploymentCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this Deployment.


        :param conditions: The conditions of this Deployment.  # noqa: E501
        :type: list[DeploymentCondition]
        """

        self._conditions = conditions

    @property
    def node_pool(self):
        """Gets the node_pool of this Deployment.  # noqa: E501


        :return: The node_pool of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._node_pool

    @node_pool.setter
    def node_pool(self, node_pool):
        """Sets the node_pool of this Deployment.


        :param node_pool: The node_pool of this Deployment.  # noqa: E501
        :type: str
        """

        self._node_pool = node_pool

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Deployment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Deployment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
