# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SpecificRunConnectionInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'node_port': 'int',
        'external_url': 'str',
        'authorized_users': 'list[str]',
        'authorized_groups': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'node_port': 'nodePort',
        'external_url': 'externalUrl',
        'authorized_users': 'authorizedUsers',
        'authorized_groups': 'authorizedGroups'
    }

    def __init__(self, name=None, node_port=None, external_url=None, authorized_users=None, authorized_groups=None):  # noqa: E501
        """SpecificRunConnectionInfo - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._node_port = None
        self._external_url = None
        self._authorized_users = None
        self._authorized_groups = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if node_port is not None:
            self.node_port = node_port
        if external_url is not None:
            self.external_url = external_url
        if authorized_users is not None:
            self.authorized_users = authorized_users
        if authorized_groups is not None:
            self.authorized_groups = authorized_groups

    @property
    def name(self):
        """Gets the name of this SpecificRunConnectionInfo.  # noqa: E501

        Unique identifier of the connection. Will be used to correlate between the information given here and the information provided for the connection in the environment asset.  # noqa: E501

        :return: The name of this SpecificRunConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SpecificRunConnectionInfo.

        Unique identifier of the connection. Will be used to correlate between the information given here and the information provided for the connection in the environment asset.  # noqa: E501

        :param name: The name of this SpecificRunConnectionInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def node_port(self):
        """Gets the node_port of this SpecificRunConnectionInfo.  # noqa: E501

        Port number of the host that will be connected with the container port. Required if and only if isCustomPort is set to true in the environment asset.  # noqa: E501

        :return: The node_port of this SpecificRunConnectionInfo.  # noqa: E501
        :rtype: int
        """
        return self._node_port

    @node_port.setter
    def node_port(self, node_port):
        """Sets the node_port of this SpecificRunConnectionInfo.

        Port number of the host that will be connected with the container port. Required if and only if isCustomPort is set to true in the environment asset.  # noqa: E501

        :param node_port: The node_port of this SpecificRunConnectionInfo.  # noqa: E501
        :type: int
        """

        self._node_port = node_port

    @property
    def external_url(self):
        """Gets the external_url of this SpecificRunConnectionInfo.  # noqa: E501

        URL to associated with the container port. Required if and only if isCustomExternalUrl is set to true in the environment asset.  # noqa: E501

        :return: The external_url of this SpecificRunConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this SpecificRunConnectionInfo.

        URL to associated with the container port. Required if and only if isCustomExternalUrl is set to true in the environment asset.  # noqa: E501

        :param external_url: The external_url of this SpecificRunConnectionInfo.  # noqa: E501
        :type: str
        """

        self._external_url = external_url

    @property
    def authorized_users(self):
        """Gets the authorized_users of this SpecificRunConnectionInfo.  # noqa: E501

        Specifies the emails of those users that are allowed to access the connection. Note that authorizedUsers and authorizedGroups are mutually exclusive.  # noqa: E501

        :return: The authorized_users of this SpecificRunConnectionInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._authorized_users

    @authorized_users.setter
    def authorized_users(self, authorized_users):
        """Sets the authorized_users of this SpecificRunConnectionInfo.

        Specifies the emails of those users that are allowed to access the connection. Note that authorizedUsers and authorizedGroups are mutually exclusive.  # noqa: E501

        :param authorized_users: The authorized_users of this SpecificRunConnectionInfo.  # noqa: E501
        :type: list[str]
        """

        self._authorized_users = authorized_users

    @property
    def authorized_groups(self):
        """Gets the authorized_groups of this SpecificRunConnectionInfo.  # noqa: E501

        Specifies the names of those groups that are allowed to access the connection. Note that authorizedUsers and authorizedGroups are mutually exclusive.  # noqa: E501

        :return: The authorized_groups of this SpecificRunConnectionInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._authorized_groups

    @authorized_groups.setter
    def authorized_groups(self, authorized_groups):
        """Sets the authorized_groups of this SpecificRunConnectionInfo.

        Specifies the names of those groups that are allowed to access the connection. Note that authorizedUsers and authorizedGroups are mutually exclusive.  # noqa: E501

        :param authorized_groups: The authorized_groups of this SpecificRunConnectionInfo.  # noqa: E501
        :type: list[str]
        """

        self._authorized_groups = authorized_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpecificRunConnectionInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpecificRunConnectionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
