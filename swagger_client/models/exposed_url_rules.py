# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExposedUrlRules(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'container': 'IntegerRules',
        'custom_url': 'BooleanRules',
        'url': 'StringRules',
        'authorized_users': 'ArrayRules',
        'tool_type': 'StringRules',
        'tool_name': 'StringRules'
    }

    attribute_map = {
        'container': 'container',
        'custom_url': 'customUrl',
        'url': 'url',
        'authorized_users': 'authorizedUsers',
        'tool_type': 'toolType',
        'tool_name': 'toolName'
    }

    def __init__(self, container=None, custom_url=None, url=None, authorized_users=None, tool_type=None, tool_name=None):  # noqa: E501
        """ExposedUrlRules - a model defined in Swagger"""  # noqa: E501
        self._container = None
        self._custom_url = None
        self._url = None
        self._authorized_users = None
        self._tool_type = None
        self._tool_name = None
        self.discriminator = None
        if container is not None:
            self.container = container
        if custom_url is not None:
            self.custom_url = custom_url
        if url is not None:
            self.url = url
        if authorized_users is not None:
            self.authorized_users = authorized_users
        if tool_type is not None:
            self.tool_type = tool_type
        if tool_name is not None:
            self.tool_name = tool_name

    @property
    def container(self):
        """Gets the container of this ExposedUrlRules.  # noqa: E501


        :return: The container of this ExposedUrlRules.  # noqa: E501
        :rtype: IntegerRules
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this ExposedUrlRules.


        :param container: The container of this ExposedUrlRules.  # noqa: E501
        :type: IntegerRules
        """

        self._container = container

    @property
    def custom_url(self):
        """Gets the custom_url of this ExposedUrlRules.  # noqa: E501


        :return: The custom_url of this ExposedUrlRules.  # noqa: E501
        :rtype: BooleanRules
        """
        return self._custom_url

    @custom_url.setter
    def custom_url(self, custom_url):
        """Sets the custom_url of this ExposedUrlRules.


        :param custom_url: The custom_url of this ExposedUrlRules.  # noqa: E501
        :type: BooleanRules
        """

        self._custom_url = custom_url

    @property
    def url(self):
        """Gets the url of this ExposedUrlRules.  # noqa: E501


        :return: The url of this ExposedUrlRules.  # noqa: E501
        :rtype: StringRules
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ExposedUrlRules.


        :param url: The url of this ExposedUrlRules.  # noqa: E501
        :type: StringRules
        """

        self._url = url

    @property
    def authorized_users(self):
        """Gets the authorized_users of this ExposedUrlRules.  # noqa: E501


        :return: The authorized_users of this ExposedUrlRules.  # noqa: E501
        :rtype: ArrayRules
        """
        return self._authorized_users

    @authorized_users.setter
    def authorized_users(self, authorized_users):
        """Sets the authorized_users of this ExposedUrlRules.


        :param authorized_users: The authorized_users of this ExposedUrlRules.  # noqa: E501
        :type: ArrayRules
        """

        self._authorized_users = authorized_users

    @property
    def tool_type(self):
        """Gets the tool_type of this ExposedUrlRules.  # noqa: E501


        :return: The tool_type of this ExposedUrlRules.  # noqa: E501
        :rtype: StringRules
        """
        return self._tool_type

    @tool_type.setter
    def tool_type(self, tool_type):
        """Sets the tool_type of this ExposedUrlRules.


        :param tool_type: The tool_type of this ExposedUrlRules.  # noqa: E501
        :type: StringRules
        """

        self._tool_type = tool_type

    @property
    def tool_name(self):
        """Gets the tool_name of this ExposedUrlRules.  # noqa: E501


        :return: The tool_name of this ExposedUrlRules.  # noqa: E501
        :rtype: StringRules
        """
        return self._tool_name

    @tool_name.setter
    def tool_name(self, tool_name):
        """Sets the tool_name of this ExposedUrlRules.


        :param tool_name: The tool_name of this ExposedUrlRules.  # noqa: E501
        :type: StringRules
        """

        self._tool_name = tool_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExposedUrlRules, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExposedUrlRules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
