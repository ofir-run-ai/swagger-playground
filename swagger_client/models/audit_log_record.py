# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuditLogRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'cluster_uuid': 'ClusterId',
        'tenant_id': 'TenantId',
        'happened_at': 'datetime',
        'action': 'str',
        'version': 'str',
        'entity_id': 'str',
        'entity_type': 'str',
        'entity_name': 'str',
        'source_type': 'str',
        'source_id': 'str',
        'source_name': 'str',
        'error': 'str',
        'context': 'object',
        'body': 'object'
    }

    attribute_map = {
        'id': 'id',
        'cluster_uuid': 'clusterUuid',
        'tenant_id': 'tenantId',
        'happened_at': 'happenedAt',
        'action': 'action',
        'version': 'version',
        'entity_id': 'entityId',
        'entity_type': 'entityType',
        'entity_name': 'entityName',
        'source_type': 'sourceType',
        'source_id': 'sourceId',
        'source_name': 'sourceName',
        'error': 'error',
        'context': 'context',
        'body': 'body'
    }

    def __init__(self, id=None, cluster_uuid=None, tenant_id=None, happened_at=None, action=None, version=None, entity_id=None, entity_type=None, entity_name=None, source_type=None, source_id=None, source_name=None, error=None, context=None, body=None):  # noqa: E501
        """AuditLogRecord - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._cluster_uuid = None
        self._tenant_id = None
        self._happened_at = None
        self._action = None
        self._version = None
        self._entity_id = None
        self._entity_type = None
        self._entity_name = None
        self._source_type = None
        self._source_id = None
        self._source_name = None
        self._error = None
        self._context = None
        self._body = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if cluster_uuid is not None:
            self.cluster_uuid = cluster_uuid
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if happened_at is not None:
            self.happened_at = happened_at
        if action is not None:
            self.action = action
        if version is not None:
            self.version = version
        if entity_id is not None:
            self.entity_id = entity_id
        if entity_type is not None:
            self.entity_type = entity_type
        if entity_name is not None:
            self.entity_name = entity_name
        if source_type is not None:
            self.source_type = source_type
        if source_id is not None:
            self.source_id = source_id
        if source_name is not None:
            self.source_name = source_name
        if error is not None:
            self.error = error
        if context is not None:
            self.context = context
        if body is not None:
            self.body = body

    @property
    def id(self):
        """Gets the id of this AuditLogRecord.  # noqa: E501

        The unique id of the audit log.  # noqa: E501

        :return: The id of this AuditLogRecord.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuditLogRecord.

        The unique id of the audit log.  # noqa: E501

        :param id: The id of this AuditLogRecord.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def cluster_uuid(self):
        """Gets the cluster_uuid of this AuditLogRecord.  # noqa: E501


        :return: The cluster_uuid of this AuditLogRecord.  # noqa: E501
        :rtype: ClusterId
        """
        return self._cluster_uuid

    @cluster_uuid.setter
    def cluster_uuid(self, cluster_uuid):
        """Sets the cluster_uuid of this AuditLogRecord.


        :param cluster_uuid: The cluster_uuid of this AuditLogRecord.  # noqa: E501
        :type: ClusterId
        """

        self._cluster_uuid = cluster_uuid

    @property
    def tenant_id(self):
        """Gets the tenant_id of this AuditLogRecord.  # noqa: E501


        :return: The tenant_id of this AuditLogRecord.  # noqa: E501
        :rtype: TenantId
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this AuditLogRecord.


        :param tenant_id: The tenant_id of this AuditLogRecord.  # noqa: E501
        :type: TenantId
        """

        self._tenant_id = tenant_id

    @property
    def happened_at(self):
        """Gets the happened_at of this AuditLogRecord.  # noqa: E501

        The date and time in which the event happened.  # noqa: E501

        :return: The happened_at of this AuditLogRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._happened_at

    @happened_at.setter
    def happened_at(self, happened_at):
        """Sets the happened_at of this AuditLogRecord.

        The date and time in which the event happened.  # noqa: E501

        :param happened_at: The happened_at of this AuditLogRecord.  # noqa: E501
        :type: datetime
        """

        self._happened_at = happened_at

    @property
    def action(self):
        """Gets the action of this AuditLogRecord.  # noqa: E501

        The action that was performed by the user.  # noqa: E501

        :return: The action of this AuditLogRecord.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AuditLogRecord.

        The action that was performed by the user.  # noqa: E501

        :param action: The action of this AuditLogRecord.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def version(self):
        """Gets the version of this AuditLogRecord.  # noqa: E501

        The version of the audit log record.  # noqa: E501

        :return: The version of this AuditLogRecord.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AuditLogRecord.

        The version of the audit log record.  # noqa: E501

        :param version: The version of this AuditLogRecord.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def entity_id(self):
        """Gets the entity_id of this AuditLogRecord.  # noqa: E501

        The id of the action related entity.  # noqa: E501

        :return: The entity_id of this AuditLogRecord.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this AuditLogRecord.

        The id of the action related entity.  # noqa: E501

        :param entity_id: The entity_id of this AuditLogRecord.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this AuditLogRecord.  # noqa: E501

        The type of the action related entity.  # noqa: E501

        :return: The entity_type of this AuditLogRecord.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this AuditLogRecord.

        The type of the action related entity.  # noqa: E501

        :param entity_type: The entity_type of this AuditLogRecord.  # noqa: E501
        :type: str
        """

        self._entity_type = entity_type

    @property
    def entity_name(self):
        """Gets the entity_name of this AuditLogRecord.  # noqa: E501

        The name of the action related entity.  # noqa: E501

        :return: The entity_name of this AuditLogRecord.  # noqa: E501
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name):
        """Sets the entity_name of this AuditLogRecord.

        The name of the action related entity.  # noqa: E501

        :param entity_name: The entity_name of this AuditLogRecord.  # noqa: E501
        :type: str
        """

        self._entity_name = entity_name

    @property
    def source_type(self):
        """Gets the source_type of this AuditLogRecord.  # noqa: E501

        The type of the source of the action.  # noqa: E501

        :return: The source_type of this AuditLogRecord.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this AuditLogRecord.

        The type of the source of the action.  # noqa: E501

        :param source_type: The source_type of this AuditLogRecord.  # noqa: E501
        :type: str
        """

        self._source_type = source_type

    @property
    def source_id(self):
        """Gets the source_id of this AuditLogRecord.  # noqa: E501

        The id of the source of the action.  # noqa: E501

        :return: The source_id of this AuditLogRecord.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this AuditLogRecord.

        The id of the source of the action.  # noqa: E501

        :param source_id: The source_id of this AuditLogRecord.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def source_name(self):
        """Gets the source_name of this AuditLogRecord.  # noqa: E501

        The name of the source of the action.  # noqa: E501

        :return: The source_name of this AuditLogRecord.  # noqa: E501
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this AuditLogRecord.

        The name of the source of the action.  # noqa: E501

        :param source_name: The source_name of this AuditLogRecord.  # noqa: E501
        :type: str
        """

        self._source_name = source_name

    @property
    def error(self):
        """Gets the error of this AuditLogRecord.  # noqa: E501

        In case of a failed action, the corresponding error  # noqa: E501

        :return: The error of this AuditLogRecord.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this AuditLogRecord.

        In case of a failed action, the corresponding error  # noqa: E501

        :param error: The error of this AuditLogRecord.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def context(self):
        """Gets the context of this AuditLogRecord.  # noqa: E501

        The context of the action.  # noqa: E501

        :return: The context of this AuditLogRecord.  # noqa: E501
        :rtype: object
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this AuditLogRecord.

        The context of the action.  # noqa: E501

        :param context: The context of this AuditLogRecord.  # noqa: E501
        :type: object
        """

        self._context = context

    @property
    def body(self):
        """Gets the body of this AuditLogRecord.  # noqa: E501

        The body of the action http request.  # noqa: E501

        :return: The body of this AuditLogRecord.  # noqa: E501
        :rtype: object
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this AuditLogRecord.

        The body of the action http request.  # noqa: E501

        :param body: The body of this AuditLogRecord.  # noqa: E501
        :type: object
        """

        self._body = body

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditLogRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditLogRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
