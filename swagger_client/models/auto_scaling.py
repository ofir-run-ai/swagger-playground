# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.auto_scaling_common_fields import AutoScalingCommonFields  # noqa: F401,E501

class AutoScaling(AutoScalingCommonFields):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metric': 'AutoScalingMetric',
        'metric_threshold': 'int'
    }
    if hasattr(AutoScalingCommonFields, "swagger_types"):
        swagger_types.update(AutoScalingCommonFields.swagger_types)

    attribute_map = {
        'metric': 'metric',
        'metric_threshold': 'metricThreshold'
    }
    if hasattr(AutoScalingCommonFields, "attribute_map"):
        attribute_map.update(AutoScalingCommonFields.attribute_map)

    def __init__(self, metric=None, metric_threshold=None, *args, **kwargs):  # noqa: E501
        """AutoScaling - a model defined in Swagger"""  # noqa: E501
        self._metric = None
        self._metric_threshold = None
        self.discriminator = None
        if metric is not None:
            self.metric = metric
        if metric_threshold is not None:
            self.metric_threshold = metric_threshold
        AutoScalingCommonFields.__init__(self, *args, **kwargs)

    @property
    def metric(self):
        """Gets the metric of this AutoScaling.  # noqa: E501


        :return: The metric of this AutoScaling.  # noqa: E501
        :rtype: AutoScalingMetric
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this AutoScaling.


        :param metric: The metric of this AutoScaling.  # noqa: E501
        :type: AutoScalingMetric
        """

        self._metric = metric

    @property
    def metric_threshold(self):
        """Gets the metric_threshold of this AutoScaling.  # noqa: E501

        The threshold to use with the specified metric for autoscaling. Mandatory if metric is specified  # noqa: E501

        :return: The metric_threshold of this AutoScaling.  # noqa: E501
        :rtype: int
        """
        return self._metric_threshold

    @metric_threshold.setter
    def metric_threshold(self, metric_threshold):
        """Sets the metric_threshold of this AutoScaling.

        The threshold to use with the specified metric for autoscaling. Mandatory if metric is specified  # noqa: E501

        :param metric_threshold: The metric_threshold of this AutoScaling.  # noqa: E501
        :type: int
        """

        self._metric_threshold = metric_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutoScaling, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutoScaling):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
