# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PortRules(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'container': 'IntegerRules',
        'service_type': 'PortServiceTypeRules',
        'custom_external_port': 'BooleanRules',
        'external': 'IntegerRules',
        'tool_type': 'StringRules',
        'tool_name': 'StringRules'
    }

    attribute_map = {
        'container': 'container',
        'service_type': 'serviceType',
        'custom_external_port': 'customExternalPort',
        'external': 'external',
        'tool_type': 'toolType',
        'tool_name': 'toolName'
    }

    def __init__(self, container=None, service_type=None, custom_external_port=None, external=None, tool_type=None, tool_name=None):  # noqa: E501
        """PortRules - a model defined in Swagger"""  # noqa: E501
        self._container = None
        self._service_type = None
        self._custom_external_port = None
        self._external = None
        self._tool_type = None
        self._tool_name = None
        self.discriminator = None
        if container is not None:
            self.container = container
        if service_type is not None:
            self.service_type = service_type
        if custom_external_port is not None:
            self.custom_external_port = custom_external_port
        if external is not None:
            self.external = external
        if tool_type is not None:
            self.tool_type = tool_type
        if tool_name is not None:
            self.tool_name = tool_name

    @property
    def container(self):
        """Gets the container of this PortRules.  # noqa: E501


        :return: The container of this PortRules.  # noqa: E501
        :rtype: IntegerRules
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this PortRules.


        :param container: The container of this PortRules.  # noqa: E501
        :type: IntegerRules
        """

        self._container = container

    @property
    def service_type(self):
        """Gets the service_type of this PortRules.  # noqa: E501


        :return: The service_type of this PortRules.  # noqa: E501
        :rtype: PortServiceTypeRules
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this PortRules.


        :param service_type: The service_type of this PortRules.  # noqa: E501
        :type: PortServiceTypeRules
        """

        self._service_type = service_type

    @property
    def custom_external_port(self):
        """Gets the custom_external_port of this PortRules.  # noqa: E501


        :return: The custom_external_port of this PortRules.  # noqa: E501
        :rtype: BooleanRules
        """
        return self._custom_external_port

    @custom_external_port.setter
    def custom_external_port(self, custom_external_port):
        """Sets the custom_external_port of this PortRules.


        :param custom_external_port: The custom_external_port of this PortRules.  # noqa: E501
        :type: BooleanRules
        """

        self._custom_external_port = custom_external_port

    @property
    def external(self):
        """Gets the external of this PortRules.  # noqa: E501


        :return: The external of this PortRules.  # noqa: E501
        :rtype: IntegerRules
        """
        return self._external

    @external.setter
    def external(self, external):
        """Sets the external of this PortRules.


        :param external: The external of this PortRules.  # noqa: E501
        :type: IntegerRules
        """

        self._external = external

    @property
    def tool_type(self):
        """Gets the tool_type of this PortRules.  # noqa: E501


        :return: The tool_type of this PortRules.  # noqa: E501
        :rtype: StringRules
        """
        return self._tool_type

    @tool_type.setter
    def tool_type(self, tool_type):
        """Sets the tool_type of this PortRules.


        :param tool_type: The tool_type of this PortRules.  # noqa: E501
        :type: StringRules
        """

        self._tool_type = tool_type

    @property
    def tool_name(self):
        """Gets the tool_name of this PortRules.  # noqa: E501


        :return: The tool_name of this PortRules.  # noqa: E501
        :rtype: StringRules
        """
        return self._tool_name

    @tool_name.setter
    def tool_name(self, tool_name):
        """Sets the tool_name of this PortRules.


        :param tool_name: The tool_name of this PortRules.  # noqa: E501
        :type: StringRules
        """

        self._tool_name = tool_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortRules, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortRules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
