# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobResourcesData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gpu': 'JobResourceData',
        'gpu_memory': 'JobResourceData',
        'cpu': 'JobResourceData',
        'cpu_memory': 'JobResourceData',
        'advanced': 'JobAdvancedData'
    }

    attribute_map = {
        'gpu': 'gpu',
        'gpu_memory': 'gpu-memory',
        'cpu': 'cpu',
        'cpu_memory': 'cpu-memory',
        'advanced': 'advanced'
    }

    def __init__(self, gpu=None, gpu_memory=None, cpu=None, cpu_memory=None, advanced=None):  # noqa: E501
        """JobResourcesData - a model defined in Swagger"""  # noqa: E501
        self._gpu = None
        self._gpu_memory = None
        self._cpu = None
        self._cpu_memory = None
        self._advanced = None
        self.discriminator = None
        self.gpu = gpu
        self.gpu_memory = gpu_memory
        self.cpu = cpu
        self.cpu_memory = cpu_memory
        if advanced is not None:
            self.advanced = advanced

    @property
    def gpu(self):
        """Gets the gpu of this JobResourcesData.  # noqa: E501


        :return: The gpu of this JobResourcesData.  # noqa: E501
        :rtype: JobResourceData
        """
        return self._gpu

    @gpu.setter
    def gpu(self, gpu):
        """Sets the gpu of this JobResourcesData.


        :param gpu: The gpu of this JobResourcesData.  # noqa: E501
        :type: JobResourceData
        """
        if gpu is None:
            raise ValueError("Invalid value for `gpu`, must not be `None`")  # noqa: E501

        self._gpu = gpu

    @property
    def gpu_memory(self):
        """Gets the gpu_memory of this JobResourcesData.  # noqa: E501


        :return: The gpu_memory of this JobResourcesData.  # noqa: E501
        :rtype: JobResourceData
        """
        return self._gpu_memory

    @gpu_memory.setter
    def gpu_memory(self, gpu_memory):
        """Sets the gpu_memory of this JobResourcesData.


        :param gpu_memory: The gpu_memory of this JobResourcesData.  # noqa: E501
        :type: JobResourceData
        """
        if gpu_memory is None:
            raise ValueError("Invalid value for `gpu_memory`, must not be `None`")  # noqa: E501

        self._gpu_memory = gpu_memory

    @property
    def cpu(self):
        """Gets the cpu of this JobResourcesData.  # noqa: E501


        :return: The cpu of this JobResourcesData.  # noqa: E501
        :rtype: JobResourceData
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this JobResourcesData.


        :param cpu: The cpu of this JobResourcesData.  # noqa: E501
        :type: JobResourceData
        """
        if cpu is None:
            raise ValueError("Invalid value for `cpu`, must not be `None`")  # noqa: E501

        self._cpu = cpu

    @property
    def cpu_memory(self):
        """Gets the cpu_memory of this JobResourcesData.  # noqa: E501


        :return: The cpu_memory of this JobResourcesData.  # noqa: E501
        :rtype: JobResourceData
        """
        return self._cpu_memory

    @cpu_memory.setter
    def cpu_memory(self, cpu_memory):
        """Sets the cpu_memory of this JobResourcesData.


        :param cpu_memory: The cpu_memory of this JobResourcesData.  # noqa: E501
        :type: JobResourceData
        """
        if cpu_memory is None:
            raise ValueError("Invalid value for `cpu_memory`, must not be `None`")  # noqa: E501

        self._cpu_memory = cpu_memory

    @property
    def advanced(self):
        """Gets the advanced of this JobResourcesData.  # noqa: E501


        :return: The advanced of this JobResourcesData.  # noqa: E501
        :rtype: JobAdvancedData
        """
        return self._advanced

    @advanced.setter
    def advanced(self, advanced):
        """Sets the advanced of this JobResourcesData.


        :param advanced: The advanced of this JobResourcesData.  # noqa: E501
        :type: JobAdvancedData
        """

        self._advanced = advanced

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobResourcesData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobResourcesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
