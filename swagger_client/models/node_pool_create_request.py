# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NodePoolCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'over_provisioning_ratio': 'int',
        'label_key': 'str',
        'label_value': 'str',
        'placement_strategy': 'PlacementStrategy'
    }

    attribute_map = {
        'name': 'name',
        'over_provisioning_ratio': 'overProvisioningRatio',
        'label_key': 'labelKey',
        'label_value': 'labelValue',
        'placement_strategy': 'placementStrategy'
    }

    def __init__(self, name=None, over_provisioning_ratio=1, label_key=None, label_value=None, placement_strategy=None):  # noqa: E501
        """NodePoolCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._over_provisioning_ratio = None
        self._label_key = None
        self._label_value = None
        self._placement_strategy = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if over_provisioning_ratio is not None:
            self.over_provisioning_ratio = over_provisioning_ratio
        if label_key is not None:
            self.label_key = label_key
        if label_value is not None:
            self.label_value = label_value
        if placement_strategy is not None:
            self.placement_strategy = placement_strategy

    @property
    def name(self):
        """Gets the name of this NodePoolCreateRequest.  # noqa: E501

        Node Pool Name  # noqa: E501

        :return: The name of this NodePoolCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodePoolCreateRequest.

        Node Pool Name  # noqa: E501

        :param name: The name of this NodePoolCreateRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def over_provisioning_ratio(self):
        """Gets the over_provisioning_ratio of this NodePoolCreateRequest.  # noqa: E501


        :return: The over_provisioning_ratio of this NodePoolCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._over_provisioning_ratio

    @over_provisioning_ratio.setter
    def over_provisioning_ratio(self, over_provisioning_ratio):
        """Sets the over_provisioning_ratio of this NodePoolCreateRequest.


        :param over_provisioning_ratio: The over_provisioning_ratio of this NodePoolCreateRequest.  # noqa: E501
        :type: int
        """

        self._over_provisioning_ratio = over_provisioning_ratio

    @property
    def label_key(self):
        """Gets the label_key of this NodePoolCreateRequest.  # noqa: E501

        Label key for associated nodes to the Node Pool (with value as in labelValue)  # noqa: E501

        :return: The label_key of this NodePoolCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._label_key

    @label_key.setter
    def label_key(self, label_key):
        """Sets the label_key of this NodePoolCreateRequest.

        Label key for associated nodes to the Node Pool (with value as in labelValue)  # noqa: E501

        :param label_key: The label_key of this NodePoolCreateRequest.  # noqa: E501
        :type: str
        """

        self._label_key = label_key

    @property
    def label_value(self):
        """Gets the label_value of this NodePoolCreateRequest.  # noqa: E501

        Label value for associated nodes to the Node Pool (with key as in labelKey)  # noqa: E501

        :return: The label_value of this NodePoolCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._label_value

    @label_value.setter
    def label_value(self, label_value):
        """Sets the label_value of this NodePoolCreateRequest.

        Label value for associated nodes to the Node Pool (with key as in labelKey)  # noqa: E501

        :param label_value: The label_value of this NodePoolCreateRequest.  # noqa: E501
        :type: str
        """

        self._label_value = label_value

    @property
    def placement_strategy(self):
        """Gets the placement_strategy of this NodePoolCreateRequest.  # noqa: E501


        :return: The placement_strategy of this NodePoolCreateRequest.  # noqa: E501
        :rtype: PlacementStrategy
        """
        return self._placement_strategy

    @placement_strategy.setter
    def placement_strategy(self, placement_strategy):
        """Sets the placement_strategy of this NodePoolCreateRequest.


        :param placement_strategy: The placement_strategy of this NodePoolCreateRequest.  # noqa: E501
        :type: PlacementStrategy
        """

        self._placement_strategy = placement_strategy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodePoolCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodePoolCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
