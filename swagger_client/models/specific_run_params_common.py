# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.container_overridable import ContainerOverridable  # noqa: F401,E501

class SpecificRunParamsCommon(ContainerOverridable):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'run_as_uid': 'int',
        'run_as_gid': 'int',
        'supplemental_groups': 'str',
        'environment_variables': 'EnvironmentVariables',
        'node_type': 'str',
        'node_pools': 'list[str]',
        'pod_affinity': 'PodAffinity',
        'terminate_after_preemption': 'bool',
        'auto_deletion_time_after_completion_seconds': 'int',
        'backoff_limit': 'int',
        'labels': 'Labels',
        'connections': 'list[SpecificRunConnectionInfo]'
    }
    if hasattr(ContainerOverridable, "swagger_types"):
        swagger_types.update(ContainerOverridable.swagger_types)

    attribute_map = {
        'run_as_uid': 'runAsUid',
        'run_as_gid': 'runAsGid',
        'supplemental_groups': 'supplementalGroups',
        'environment_variables': 'environmentVariables',
        'node_type': 'nodeType',
        'node_pools': 'nodePools',
        'pod_affinity': 'podAffinity',
        'terminate_after_preemption': 'terminateAfterPreemption',
        'auto_deletion_time_after_completion_seconds': 'autoDeletionTimeAfterCompletionSeconds',
        'backoff_limit': 'backoffLimit',
        'labels': 'labels',
        'connections': 'connections'
    }
    if hasattr(ContainerOverridable, "attribute_map"):
        attribute_map.update(ContainerOverridable.attribute_map)

    def __init__(self, run_as_uid=None, run_as_gid=None, supplemental_groups=None, environment_variables=None, node_type=None, node_pools=None, pod_affinity=None, terminate_after_preemption=None, auto_deletion_time_after_completion_seconds=None, backoff_limit=None, labels=None, connections=None, *args, **kwargs):  # noqa: E501
        """SpecificRunParamsCommon - a model defined in Swagger"""  # noqa: E501
        self._run_as_uid = None
        self._run_as_gid = None
        self._supplemental_groups = None
        self._environment_variables = None
        self._node_type = None
        self._node_pools = None
        self._pod_affinity = None
        self._terminate_after_preemption = None
        self._auto_deletion_time_after_completion_seconds = None
        self._backoff_limit = None
        self._labels = None
        self._connections = None
        self.discriminator = None
        if run_as_uid is not None:
            self.run_as_uid = run_as_uid
        if run_as_gid is not None:
            self.run_as_gid = run_as_gid
        if supplemental_groups is not None:
            self.supplemental_groups = supplemental_groups
        if environment_variables is not None:
            self.environment_variables = environment_variables
        if node_type is not None:
            self.node_type = node_type
        if node_pools is not None:
            self.node_pools = node_pools
        if pod_affinity is not None:
            self.pod_affinity = pod_affinity
        if terminate_after_preemption is not None:
            self.terminate_after_preemption = terminate_after_preemption
        if auto_deletion_time_after_completion_seconds is not None:
            self.auto_deletion_time_after_completion_seconds = auto_deletion_time_after_completion_seconds
        if backoff_limit is not None:
            self.backoff_limit = backoff_limit
        if labels is not None:
            self.labels = labels
        if connections is not None:
            self.connections = connections
        ContainerOverridable.__init__(self, *args, **kwargs)

    @property
    def run_as_uid(self):
        """Gets the run_as_uid of this SpecificRunParamsCommon.  # noqa: E501

        The user id to run the entrypoint of the container which executes the workspace. Default to the value specified in the environment asset `runAsUid` field (optional). Use only when the source uid/gid of the environment asset is not `fromTheImage`, and `overrideUidGidInWorkspace` is enabled.  # noqa: E501

        :return: The run_as_uid of this SpecificRunParamsCommon.  # noqa: E501
        :rtype: int
        """
        return self._run_as_uid

    @run_as_uid.setter
    def run_as_uid(self, run_as_uid):
        """Sets the run_as_uid of this SpecificRunParamsCommon.

        The user id to run the entrypoint of the container which executes the workspace. Default to the value specified in the environment asset `runAsUid` field (optional). Use only when the source uid/gid of the environment asset is not `fromTheImage`, and `overrideUidGidInWorkspace` is enabled.  # noqa: E501

        :param run_as_uid: The run_as_uid of this SpecificRunParamsCommon.  # noqa: E501
        :type: int
        """

        self._run_as_uid = run_as_uid

    @property
    def run_as_gid(self):
        """Gets the run_as_gid of this SpecificRunParamsCommon.  # noqa: E501

        The group id to run the entrypoint of the container which executes the workspace. Default to the value specified in the environment asset `runAsGid` field (optional). Use only when the source uid/gid of the environment asset is not `fromTheImage`, and `overrideUidGidInWorkspace` is enabled.  # noqa: E501

        :return: The run_as_gid of this SpecificRunParamsCommon.  # noqa: E501
        :rtype: int
        """
        return self._run_as_gid

    @run_as_gid.setter
    def run_as_gid(self, run_as_gid):
        """Sets the run_as_gid of this SpecificRunParamsCommon.

        The group id to run the entrypoint of the container which executes the workspace. Default to the value specified in the environment asset `runAsGid` field (optional). Use only when the source uid/gid of the environment asset is not `fromTheImage`, and `overrideUidGidInWorkspace` is enabled.  # noqa: E501

        :param run_as_gid: The run_as_gid of this SpecificRunParamsCommon.  # noqa: E501
        :type: int
        """

        self._run_as_gid = run_as_gid

    @property
    def supplemental_groups(self):
        """Gets the supplemental_groups of this SpecificRunParamsCommon.  # noqa: E501

        Comma separated list of groups that the user running the container belongs to, in addition to the group indicated by runAsGid. Use only when the source uid/gid of the environment asset is not `fromTheImage`, and `overrideUidGidInWorkspace` is enabled. Using an empty string implies reverting the supplementary groups of the image.  # noqa: E501

        :return: The supplemental_groups of this SpecificRunParamsCommon.  # noqa: E501
        :rtype: str
        """
        return self._supplemental_groups

    @supplemental_groups.setter
    def supplemental_groups(self, supplemental_groups):
        """Sets the supplemental_groups of this SpecificRunParamsCommon.

        Comma separated list of groups that the user running the container belongs to, in addition to the group indicated by runAsGid. Use only when the source uid/gid of the environment asset is not `fromTheImage`, and `overrideUidGidInWorkspace` is enabled. Using an empty string implies reverting the supplementary groups of the image.  # noqa: E501

        :param supplemental_groups: The supplemental_groups of this SpecificRunParamsCommon.  # noqa: E501
        :type: str
        """

        self._supplemental_groups = supplemental_groups

    @property
    def environment_variables(self):
        """Gets the environment_variables of this SpecificRunParamsCommon.  # noqa: E501


        :return: The environment_variables of this SpecificRunParamsCommon.  # noqa: E501
        :rtype: EnvironmentVariables
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """Sets the environment_variables of this SpecificRunParamsCommon.


        :param environment_variables: The environment_variables of this SpecificRunParamsCommon.  # noqa: E501
        :type: EnvironmentVariables
        """

        self._environment_variables = environment_variables

    @property
    def node_type(self):
        """Gets the node_type of this SpecificRunParamsCommon.  # noqa: E501

        Nodes (machines), or a group of nodes on which the workload will run. To use this feature, your Administrator will need to label nodes. For more information, see [Group Nodes](https://docs.run.ai/latest/admin/researcher-setup/limit-to-node-group). When using this flag with with Project-based affinity, it refines the list of allowable node groups set in the Project. For more information, see [Projects](https://docs.run.ai/admin/admin-ui-setup/project-setup).  # noqa: E501

        :return: The node_type of this SpecificRunParamsCommon.  # noqa: E501
        :rtype: str
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this SpecificRunParamsCommon.

        Nodes (machines), or a group of nodes on which the workload will run. To use this feature, your Administrator will need to label nodes. For more information, see [Group Nodes](https://docs.run.ai/latest/admin/researcher-setup/limit-to-node-group). When using this flag with with Project-based affinity, it refines the list of allowable node groups set in the Project. For more information, see [Projects](https://docs.run.ai/admin/admin-ui-setup/project-setup).  # noqa: E501

        :param node_type: The node_type of this SpecificRunParamsCommon.  # noqa: E501
        :type: str
        """

        self._node_type = node_type

    @property
    def node_pools(self):
        """Gets the node_pools of this SpecificRunParamsCommon.  # noqa: E501

        A prioritized list of node pools for the scheduler to run the workspace on. The scheduler will always try to use the first node pool before moving to the next one if the first is not available.  # noqa: E501

        :return: The node_pools of this SpecificRunParamsCommon.  # noqa: E501
        :rtype: list[str]
        """
        return self._node_pools

    @node_pools.setter
    def node_pools(self, node_pools):
        """Sets the node_pools of this SpecificRunParamsCommon.

        A prioritized list of node pools for the scheduler to run the workspace on. The scheduler will always try to use the first node pool before moving to the next one if the first is not available.  # noqa: E501

        :param node_pools: The node_pools of this SpecificRunParamsCommon.  # noqa: E501
        :type: list[str]
        """

        self._node_pools = node_pools

    @property
    def pod_affinity(self):
        """Gets the pod_affinity of this SpecificRunParamsCommon.  # noqa: E501


        :return: The pod_affinity of this SpecificRunParamsCommon.  # noqa: E501
        :rtype: PodAffinity
        """
        return self._pod_affinity

    @pod_affinity.setter
    def pod_affinity(self, pod_affinity):
        """Sets the pod_affinity of this SpecificRunParamsCommon.


        :param pod_affinity: The pod_affinity of this SpecificRunParamsCommon.  # noqa: E501
        :type: PodAffinity
        """

        self._pod_affinity = pod_affinity

    @property
    def terminate_after_preemption(self):
        """Gets the terminate_after_preemption of this SpecificRunParamsCommon.  # noqa: E501

        Indicates if the job should be terminated by the system after it has been preempted.  # noqa: E501

        :return: The terminate_after_preemption of this SpecificRunParamsCommon.  # noqa: E501
        :rtype: bool
        """
        return self._terminate_after_preemption

    @terminate_after_preemption.setter
    def terminate_after_preemption(self, terminate_after_preemption):
        """Sets the terminate_after_preemption of this SpecificRunParamsCommon.

        Indicates if the job should be terminated by the system after it has been preempted.  # noqa: E501

        :param terminate_after_preemption: The terminate_after_preemption of this SpecificRunParamsCommon.  # noqa: E501
        :type: bool
        """

        self._terminate_after_preemption = terminate_after_preemption

    @property
    def auto_deletion_time_after_completion_seconds(self):
        """Gets the auto_deletion_time_after_completion_seconds of this SpecificRunParamsCommon.  # noqa: E501

        Specifies the duration after which a finished workload (completed or failed) will be automatically deleted. The default is 30 days.  # noqa: E501

        :return: The auto_deletion_time_after_completion_seconds of this SpecificRunParamsCommon.  # noqa: E501
        :rtype: int
        """
        return self._auto_deletion_time_after_completion_seconds

    @auto_deletion_time_after_completion_seconds.setter
    def auto_deletion_time_after_completion_seconds(self, auto_deletion_time_after_completion_seconds):
        """Sets the auto_deletion_time_after_completion_seconds of this SpecificRunParamsCommon.

        Specifies the duration after which a finished workload (completed or failed) will be automatically deleted. The default is 30 days.  # noqa: E501

        :param auto_deletion_time_after_completion_seconds: The auto_deletion_time_after_completion_seconds of this SpecificRunParamsCommon.  # noqa: E501
        :type: int
        """

        self._auto_deletion_time_after_completion_seconds = auto_deletion_time_after_completion_seconds

    @property
    def backoff_limit(self):
        """Gets the backoff_limit of this SpecificRunParamsCommon.  # noqa: E501

        Specifies the number of retries before marking a workload as failed (not applicable to Inference workloads). The default value is 6.  # noqa: E501

        :return: The backoff_limit of this SpecificRunParamsCommon.  # noqa: E501
        :rtype: int
        """
        return self._backoff_limit

    @backoff_limit.setter
    def backoff_limit(self, backoff_limit):
        """Sets the backoff_limit of this SpecificRunParamsCommon.

        Specifies the number of retries before marking a workload as failed (not applicable to Inference workloads). The default value is 6.  # noqa: E501

        :param backoff_limit: The backoff_limit of this SpecificRunParamsCommon.  # noqa: E501
        :type: int
        """

        self._backoff_limit = backoff_limit

    @property
    def labels(self):
        """Gets the labels of this SpecificRunParamsCommon.  # noqa: E501


        :return: The labels of this SpecificRunParamsCommon.  # noqa: E501
        :rtype: Labels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this SpecificRunParamsCommon.


        :param labels: The labels of this SpecificRunParamsCommon.  # noqa: E501
        :type: Labels
        """

        self._labels = labels

    @property
    def connections(self):
        """Gets the connections of this SpecificRunParamsCommon.  # noqa: E501


        :return: The connections of this SpecificRunParamsCommon.  # noqa: E501
        :rtype: list[SpecificRunConnectionInfo]
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this SpecificRunParamsCommon.


        :param connections: The connections of this SpecificRunParamsCommon.  # noqa: E501
        :type: list[SpecificRunConnectionInfo]
        """

        self._connections = connections

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpecificRunParamsCommon, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpecificRunParamsCommon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
