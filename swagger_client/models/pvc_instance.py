# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.storage_instance_name import StorageInstanceName  # noqa: F401,E501

class PvcInstance(StorageInstanceName):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'existing_pvc': 'bool',
        'claim_name': 'str',
        'path': 'str',
        'read_only': 'bool',
        'ephemeral': 'bool',
        'claim_info': 'ClaimInfo'
    }
    if hasattr(StorageInstanceName, "swagger_types"):
        swagger_types.update(StorageInstanceName.swagger_types)

    attribute_map = {
        'existing_pvc': 'existingPvc',
        'claim_name': 'claimName',
        'path': 'path',
        'read_only': 'readOnly',
        'ephemeral': 'ephemeral',
        'claim_info': 'claimInfo'
    }
    if hasattr(StorageInstanceName, "attribute_map"):
        attribute_map.update(StorageInstanceName.attribute_map)

    def __init__(self, existing_pvc=False, claim_name=None, path=None, read_only=False, ephemeral=False, claim_info=None, *args, **kwargs):  # noqa: E501
        """PvcInstance - a model defined in Swagger"""  # noqa: E501
        self._existing_pvc = None
        self._claim_name = None
        self._path = None
        self._read_only = None
        self._ephemeral = None
        self._claim_info = None
        self.discriminator = None
        if existing_pvc is not None:
            self.existing_pvc = existing_pvc
        if claim_name is not None:
            self.claim_name = claim_name
        if path is not None:
            self.path = path
        if read_only is not None:
            self.read_only = read_only
        if ephemeral is not None:
            self.ephemeral = ephemeral
        if claim_info is not None:
            self.claim_info = claim_info
        StorageInstanceName.__init__(self, *args, **kwargs)

    @property
    def existing_pvc(self):
        """Gets the existing_pvc of this PvcInstance.  # noqa: E501

        Verify existing PVC. PVC is assumed to exist when set to `true`. If set to `false`, the PVC will be created, if it does not exist.  # noqa: E501

        :return: The existing_pvc of this PvcInstance.  # noqa: E501
        :rtype: bool
        """
        return self._existing_pvc

    @existing_pvc.setter
    def existing_pvc(self, existing_pvc):
        """Sets the existing_pvc of this PvcInstance.

        Verify existing PVC. PVC is assumed to exist when set to `true`. If set to `false`, the PVC will be created, if it does not exist.  # noqa: E501

        :param existing_pvc: The existing_pvc of this PvcInstance.  # noqa: E501
        :type: bool
        """

        self._existing_pvc = existing_pvc

    @property
    def claim_name(self):
        """Gets the claim_name of this PvcInstance.  # noqa: E501

        Name for the PVC. Allow referencing it across workloads. If not provided, a name based on the workload name and scope will be auto-generated.  # noqa: E501

        :return: The claim_name of this PvcInstance.  # noqa: E501
        :rtype: str
        """
        return self._claim_name

    @claim_name.setter
    def claim_name(self, claim_name):
        """Sets the claim_name of this PvcInstance.

        Name for the PVC. Allow referencing it across workloads. If not provided, a name based on the workload name and scope will be auto-generated.  # noqa: E501

        :param claim_name: The claim_name of this PvcInstance.  # noqa: E501
        :type: str
        """

        self._claim_name = claim_name

    @property
    def path(self):
        """Gets the path of this PvcInstance.  # noqa: E501

        Local path within the workspace to which the PVC bucket will be mapped. (mandatory)  # noqa: E501

        :return: The path of this PvcInstance.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this PvcInstance.

        Local path within the workspace to which the PVC bucket will be mapped. (mandatory)  # noqa: E501

        :param path: The path of this PvcInstance.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def read_only(self):
        """Gets the read_only of this PvcInstance.  # noqa: E501

        Permit only read access to PVC.  # noqa: E501

        :return: The read_only of this PvcInstance.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this PvcInstance.

        Permit only read access to PVC.  # noqa: E501

        :param read_only: The read_only of this PvcInstance.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def ephemeral(self):
        """Gets the ephemeral of this PvcInstance.  # noqa: E501

        Use `true` to set PVC to ephemeral. If set to `true`, the PVC will be deleted when the workspace is stopped.  # noqa: E501

        :return: The ephemeral of this PvcInstance.  # noqa: E501
        :rtype: bool
        """
        return self._ephemeral

    @ephemeral.setter
    def ephemeral(self, ephemeral):
        """Sets the ephemeral of this PvcInstance.

        Use `true` to set PVC to ephemeral. If set to `true`, the PVC will be deleted when the workspace is stopped.  # noqa: E501

        :param ephemeral: The ephemeral of this PvcInstance.  # noqa: E501
        :type: bool
        """

        self._ephemeral = ephemeral

    @property
    def claim_info(self):
        """Gets the claim_info of this PvcInstance.  # noqa: E501


        :return: The claim_info of this PvcInstance.  # noqa: E501
        :rtype: ClaimInfo
        """
        return self._claim_info

    @claim_info.setter
    def claim_info(self, claim_info):
        """Sets the claim_info of this PvcInstance.


        :param claim_info: The claim_info of this PvcInstance.  # noqa: E501
        :type: ClaimInfo
        """

        self._claim_info = claim_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PvcInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PvcInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
