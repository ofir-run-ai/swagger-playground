# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClusterInstallationInfoResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'installation_str': 'str',
        'repository_name': 'str',
        'chart_repo_url': 'str',
        'client_secret': 'str'
    }

    attribute_map = {
        'installation_str': 'installationStr',
        'repository_name': 'repositoryName',
        'chart_repo_url': 'chartRepoURL',
        'client_secret': 'clientSecret'
    }

    def __init__(self, installation_str=None, repository_name=None, chart_repo_url=None, client_secret=None):  # noqa: E501
        """ClusterInstallationInfoResponse - a model defined in Swagger"""  # noqa: E501
        self._installation_str = None
        self._repository_name = None
        self._chart_repo_url = None
        self._client_secret = None
        self.discriminator = None
        self.installation_str = installation_str
        self.repository_name = repository_name
        self.chart_repo_url = chart_repo_url
        self.client_secret = client_secret

    @property
    def installation_str(self):
        """Gets the installation_str of this ClusterInstallationInfoResponse.  # noqa: E501


        :return: The installation_str of this ClusterInstallationInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._installation_str

    @installation_str.setter
    def installation_str(self, installation_str):
        """Sets the installation_str of this ClusterInstallationInfoResponse.


        :param installation_str: The installation_str of this ClusterInstallationInfoResponse.  # noqa: E501
        :type: str
        """
        if installation_str is None:
            raise ValueError("Invalid value for `installation_str`, must not be `None`")  # noqa: E501

        self._installation_str = installation_str

    @property
    def repository_name(self):
        """Gets the repository_name of this ClusterInstallationInfoResponse.  # noqa: E501


        :return: The repository_name of this ClusterInstallationInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this ClusterInstallationInfoResponse.


        :param repository_name: The repository_name of this ClusterInstallationInfoResponse.  # noqa: E501
        :type: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")  # noqa: E501

        self._repository_name = repository_name

    @property
    def chart_repo_url(self):
        """Gets the chart_repo_url of this ClusterInstallationInfoResponse.  # noqa: E501


        :return: The chart_repo_url of this ClusterInstallationInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._chart_repo_url

    @chart_repo_url.setter
    def chart_repo_url(self, chart_repo_url):
        """Sets the chart_repo_url of this ClusterInstallationInfoResponse.


        :param chart_repo_url: The chart_repo_url of this ClusterInstallationInfoResponse.  # noqa: E501
        :type: str
        """
        if chart_repo_url is None:
            raise ValueError("Invalid value for `chart_repo_url`, must not be `None`")  # noqa: E501

        self._chart_repo_url = chart_repo_url

    @property
    def client_secret(self):
        """Gets the client_secret of this ClusterInstallationInfoResponse.  # noqa: E501


        :return: The client_secret of this ClusterInstallationInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this ClusterInstallationInfoResponse.


        :param client_secret: The client_secret of this ClusterInstallationInfoResponse.  # noqa: E501
        :type: str
        """
        if client_secret is None:
            raise ValueError("Invalid value for `client_secret`, must not be `None`")  # noqa: E501

        self._client_secret = client_secret

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterInstallationInfoResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterInstallationInfoResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
