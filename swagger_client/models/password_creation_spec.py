# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PasswordCreationSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'existing_secret_name': 'str',
        'user': 'str',
        'password': 'str'
    }

    attribute_map = {
        'existing_secret_name': 'existingSecretName',
        'user': 'user',
        'password': 'password'
    }

    def __init__(self, existing_secret_name=None, user=None, password=None):  # noqa: E501
        """PasswordCreationSpec - a model defined in Swagger"""  # noqa: E501
        self._existing_secret_name = None
        self._user = None
        self._password = None
        self.discriminator = None
        if existing_secret_name is not None:
            self.existing_secret_name = existing_secret_name
        if user is not None:
            self.user = user
        if password is not None:
            self.password = password

    @property
    def existing_secret_name(self):
        """Gets the existing_secret_name of this PasswordCreationSpec.  # noqa: E501

        optional name of existing secret in the cluster from which the user name and password should be taken. If omitted, you will have to provide those credentials in the user and password fields. The provided credentials are encrypted into the control plane database and cloned to a kubernetes secret in the cluster.  # noqa: E501

        :return: The existing_secret_name of this PasswordCreationSpec.  # noqa: E501
        :rtype: str
        """
        return self._existing_secret_name

    @existing_secret_name.setter
    def existing_secret_name(self, existing_secret_name):
        """Sets the existing_secret_name of this PasswordCreationSpec.

        optional name of existing secret in the cluster from which the user name and password should be taken. If omitted, you will have to provide those credentials in the user and password fields. The provided credentials are encrypted into the control plane database and cloned to a kubernetes secret in the cluster.  # noqa: E501

        :param existing_secret_name: The existing_secret_name of this PasswordCreationSpec.  # noqa: E501
        :type: str
        """

        self._existing_secret_name = existing_secret_name

    @property
    def user(self):
        """Gets the user of this PasswordCreationSpec.  # noqa: E501

        The name of the user, required only when not using existing secret.  # noqa: E501

        :return: The user of this PasswordCreationSpec.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PasswordCreationSpec.

        The name of the user, required only when not using existing secret.  # noqa: E501

        :param user: The user of this PasswordCreationSpec.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def password(self):
        """Gets the password of this PasswordCreationSpec.  # noqa: E501

        The password, required only when not using existing secret.  # noqa: E501

        :return: The password of this PasswordCreationSpec.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PasswordCreationSpec.

        The password, required only when not using existing secret.  # noqa: E501

        :param password: The password of this PasswordCreationSpec.  # noqa: E501
        :type: str
        """

        self._password = password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PasswordCreationSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PasswordCreationSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
