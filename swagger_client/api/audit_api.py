# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AuditApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_audit_logs(self, **kwargs):  # noqa: E501
        """Get audit logs.  # noqa: E501

        Retrieve audit logs using the query parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_audit_logs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start: Starting date for audit logs retrieval. format yyyy-MM-dd for date yyyy-MM-ddTHH:mm:ss for date-time.
        :param datetime end: Ending date for audit logs retrieval. format yyyy-MM-dd for date yyyy-MM-ddTHH:mm:ss for date-time.
        :param str cluster_uuid: The cluster uuid of the logged operation (for cluster related operations)
        :param str action: The action of the logged operation.
        :param str source_type: The type of the source of the action.
        :param str source_id: The id of the source of the action.
        :param str source_name: The name of the source of the action.
        :param str entity_type: The type of the action related entity.
        :param str entity_id: The id of the action related entity.
        :param int limit: The maximum number of entries to return.
        :param int offset: The offset of the first item returned in the collection.
        :param str success: enter true for success audits and false for failures (leave blank for all)
        :param str download: enter true to download the logs into logs.json file
        :return: list[AuditLogRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_audit_logs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_audit_logs_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_audit_logs_with_http_info(self, **kwargs):  # noqa: E501
        """Get audit logs.  # noqa: E501

        Retrieve audit logs using the query parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_audit_logs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start: Starting date for audit logs retrieval. format yyyy-MM-dd for date yyyy-MM-ddTHH:mm:ss for date-time.
        :param datetime end: Ending date for audit logs retrieval. format yyyy-MM-dd for date yyyy-MM-ddTHH:mm:ss for date-time.
        :param str cluster_uuid: The cluster uuid of the logged operation (for cluster related operations)
        :param str action: The action of the logged operation.
        :param str source_type: The type of the source of the action.
        :param str source_id: The id of the source of the action.
        :param str source_name: The name of the source of the action.
        :param str entity_type: The type of the action related entity.
        :param str entity_id: The id of the action related entity.
        :param int limit: The maximum number of entries to return.
        :param int offset: The offset of the first item returned in the collection.
        :param str success: enter true for success audits and false for failures (leave blank for all)
        :param str download: enter true to download the logs into logs.json file
        :return: list[AuditLogRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'end', 'cluster_uuid', 'action', 'source_type', 'source_id', 'source_name', 'entity_type', 'entity_id', 'limit', 'offset', 'success', 'download']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_audit_logs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'cluster_uuid' in params:
            query_params.append(('cluster_uuid', params['cluster_uuid']))  # noqa: E501
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501
        if 'source_type' in params:
            query_params.append(('source_type', params['source_type']))  # noqa: E501
        if 'source_id' in params:
            query_params.append(('source_id', params['source_id']))  # noqa: E501
        if 'source_name' in params:
            query_params.append(('source_name', params['source_name']))  # noqa: E501
        if 'entity_type' in params:
            query_params.append(('entity_type', params['entity_type']))  # noqa: E501
        if 'entity_id' in params:
            query_params.append(('entity_id', params['entity_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'success' in params:
            query_params.append(('success', params['success']))  # noqa: E501
        if 'download' in params:
            query_params.append(('download', params['download']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/k8s/audit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AuditLogRecord]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
