# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class NodePoolsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_node_pool(self, cluster_id, **kwargs):  # noqa: E501
        """Create a Node Pool.  # noqa: E501

        Use to create a node pool in a cluster by Universally Unique Identifier (UUID).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_node_pool(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: Unique identifier of the cluster (required)
        :param NodePoolCreateRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_node_pool_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_node_pool_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def create_node_pool_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """Create a Node Pool.  # noqa: E501

        Use to create a node pool in a cluster by Universally Unique Identifier (UUID).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_node_pool_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: Unique identifier of the cluster (required)
        :param NodePoolCreateRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_node_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `create_node_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/k8s/clusters/{clusterId}/node-pools', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_node_pool(self, cluster_id, id, **kwargs):  # noqa: E501
        """Delete a Node Pool by id.ยง  # noqa: E501

        Use to delete a node pool by Universally Unique Identifier (UUID).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_node_pool(cluster_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: Unique identifier of the cluster (required)
        :param int id: The unique id identifying the Node Pool. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_node_pool_with_http_info(cluster_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_node_pool_with_http_info(cluster_id, id, **kwargs)  # noqa: E501
            return data

    def delete_node_pool_with_http_info(self, cluster_id, id, **kwargs):  # noqa: E501
        """Delete a Node Pool by id.ยง  # noqa: E501

        Use to delete a node pool by Universally Unique Identifier (UUID).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_node_pool_with_http_info(cluster_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: Unique identifier of the cluster (required)
        :param int id: The unique id identifying the Node Pool. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_node_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `delete_node_pool`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_node_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/k8s/clusters/{clusterId}/node-pools/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_node_pools(self, cluster_id, **kwargs):  # noqa: E501
        """Get the cluster's Node Pools.  # noqa: E501

        Retrieve all the node pools with details from the cluster by Universally Unique Identifier (UUID).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_node_pools(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: Unique identifier of the cluster (required)
        :return: list[NodePool1]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_node_pools_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_node_pools_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_node_pools_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """Get the cluster's Node Pools.  # noqa: E501

        Retrieve all the node pools with details from the cluster by Universally Unique Identifier (UUID).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_node_pools_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: Unique identifier of the cluster (required)
        :return: list[NodePool1]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_node_pools" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_node_pools`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/k8s/clusters/{clusterId}/node-pools', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NodePool1]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_nodepool_metrics(self, cluster_uuid, nodepool_name, start, end, metric_type, **kwargs):  # noqa: E501
        """Get the node pool metrics data. [Experimental]  # noqa: E501

        Retrieve the node pool metrics data by Universally Unique Identifier (UUID).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nodepool_metrics(cluster_uuid, nodepool_name, start, end, metric_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_uuid: The Universally Unique Identifier (UUID) of the cluster. (required)
        :param str nodepool_name: The unique nodepool name. (required)
        :param datetime start: Start date of time range to fetch data in ISO 8601 timestamp format. (required)
        :param datetime end: End date of time range to fetch data in ISO 8601 timestamp format. (required)
        :param list[MetricsType] metric_type: specifies what data to request (required)
        :param int number_of_samples: The number of samples to take in the specified time range.
        :return: MetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_nodepool_metrics_with_http_info(cluster_uuid, nodepool_name, start, end, metric_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_nodepool_metrics_with_http_info(cluster_uuid, nodepool_name, start, end, metric_type, **kwargs)  # noqa: E501
            return data

    def get_nodepool_metrics_with_http_info(self, cluster_uuid, nodepool_name, start, end, metric_type, **kwargs):  # noqa: E501
        """Get the node pool metrics data. [Experimental]  # noqa: E501

        Retrieve the node pool metrics data by Universally Unique Identifier (UUID).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nodepool_metrics_with_http_info(cluster_uuid, nodepool_name, start, end, metric_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_uuid: The Universally Unique Identifier (UUID) of the cluster. (required)
        :param str nodepool_name: The unique nodepool name. (required)
        :param datetime start: Start date of time range to fetch data in ISO 8601 timestamp format. (required)
        :param datetime end: End date of time range to fetch data in ISO 8601 timestamp format. (required)
        :param list[MetricsType] metric_type: specifies what data to request (required)
        :param int number_of_samples: The number of samples to take in the specified time range.
        :return: MetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_uuid', 'nodepool_name', 'start', 'end', 'metric_type', 'number_of_samples']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nodepool_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_uuid' is set
        if ('cluster_uuid' not in params or
                params['cluster_uuid'] is None):
            raise ValueError("Missing the required parameter `cluster_uuid` when calling `get_nodepool_metrics`")  # noqa: E501
        # verify the required parameter 'nodepool_name' is set
        if ('nodepool_name' not in params or
                params['nodepool_name'] is None):
            raise ValueError("Missing the required parameter `nodepool_name` when calling `get_nodepool_metrics`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_nodepool_metrics`")  # noqa: E501
        # verify the required parameter 'end' is set
        if ('end' not in params or
                params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_nodepool_metrics`")  # noqa: E501
        # verify the required parameter 'metric_type' is set
        if ('metric_type' not in params or
                params['metric_type'] is None):
            raise ValueError("Missing the required parameter `metric_type` when calling `get_nodepool_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_uuid' in params:
            path_params['clusterUuid'] = params['cluster_uuid']  # noqa: E501
        if 'nodepool_name' in params:
            path_params['nodepoolName'] = params['nodepool_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'number_of_samples' in params:
            query_params.append(('numberOfSamples', params['number_of_samples']))  # noqa: E501
        if 'metric_type' in params:
            query_params.append(('metricType', params['metric_type']))  # noqa: E501
            collection_formats['metricType'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/clusters/{clusterUuid}/nodepools/{nodepoolName}/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetricsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_node_pool(self, body, cluster_id, id, **kwargs):  # noqa: E501
        """Update a Node Pool.  # noqa: E501

        Use to update the details of a node pool by Universally Unique Identifier (UUID).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_node_pool(body, cluster_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateNodePoolRequest body: (required)
        :param str cluster_id: Unique identifier of the cluster (required)
        :param int id: The unique id identifying the Node Pool. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_node_pool_with_http_info(body, cluster_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_node_pool_with_http_info(body, cluster_id, id, **kwargs)  # noqa: E501
            return data

    def update_node_pool_with_http_info(self, body, cluster_id, id, **kwargs):  # noqa: E501
        """Update a Node Pool.  # noqa: E501

        Use to update the details of a node pool by Universally Unique Identifier (UUID).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_node_pool_with_http_info(body, cluster_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateNodePoolRequest body: (required)
        :param str cluster_id: Unique identifier of the cluster (required)
        :param int id: The unique id identifying the Node Pool. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cluster_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_node_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_node_pool`")  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `update_node_pool`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_node_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/k8s/clusters/{clusterId}/node-pools/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_node_pool_labels(self, body, cluster_id, id, **kwargs):  # noqa: E501
        """Update labels of a Node Pool.  # noqa: E501

        Use to update the labels of a node pool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_node_pool_labels(body, cluster_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodePoolLabelsRequest body: (required)
        :param str cluster_id: Unique identifier of the cluster (required)
        :param int id: The unique id identifying the Node Pool. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_node_pool_labels_with_http_info(body, cluster_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_node_pool_labels_with_http_info(body, cluster_id, id, **kwargs)  # noqa: E501
            return data

    def update_node_pool_labels_with_http_info(self, body, cluster_id, id, **kwargs):  # noqa: E501
        """Update labels of a Node Pool.  # noqa: E501

        Use to update the labels of a node pool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_node_pool_labels_with_http_info(body, cluster_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodePoolLabelsRequest body: (required)
        :param str cluster_id: Unique identifier of the cluster (required)
        :param int id: The unique id identifying the Node Pool. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cluster_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_node_pool_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_node_pool_labels`")  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `update_node_pool_labels`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_node_pool_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/k8s/clusters/{clusterId}/node-pools/{id}/labels', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
