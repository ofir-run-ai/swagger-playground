# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EventsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_workload_events(self, workload_id, **kwargs):  # noqa: E501
        """Get the workload events.  # noqa: E501

        Retrieve all the workload events by workload id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workload_events(workload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workload_id: Unique identifier of the workload. (required)
        :param int offset: The offset of the first item returned in the collection.
        :param int limit: The maximum number of entries to return.
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workload_events_with_http_info(workload_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workload_events_with_http_info(workload_id, **kwargs)  # noqa: E501
            return data

    def get_workload_events_with_http_info(self, workload_id, **kwargs):  # noqa: E501
        """Get the workload events.  # noqa: E501

        Retrieve all the workload events by workload id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workload_events_with_http_info(workload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workload_id: Unique identifier of the workload. (required)
        :param int offset: The offset of the first item returned in the collection.
        :param int limit: The maximum number of entries to return.
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workload_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workload_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workload_id' is set
        if ('workload_id' not in params or
                params['workload_id'] is None):
            raise ValueError("Missing the required parameter `workload_id` when calling `get_workload_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workload_id' in params:
            path_params['workloadId'] = params['workload_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workloads/{workloadId}/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workload_history(self, workload_id, **kwargs):  # noqa: E501
        """Get the workload history.  # noqa: E501

        Retrieve the details workload history including events by workload id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workload_history(workload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workload_id: Unique identifier of the workload. (required)
        :param int offset: The offset of the first item returned in the collection.
        :param int limit: The maximum number of entries to return.
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workload_history_with_http_info(workload_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workload_history_with_http_info(workload_id, **kwargs)  # noqa: E501
            return data

    def get_workload_history_with_http_info(self, workload_id, **kwargs):  # noqa: E501
        """Get the workload history.  # noqa: E501

        Retrieve the details workload history including events by workload id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workload_history_with_http_info(workload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workload_id: Unique identifier of the workload. (required)
        :param int offset: The offset of the first item returned in the collection.
        :param int limit: The maximum number of entries to return.
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workload_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workload_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workload_id' is set
        if ('workload_id' not in params or
                params['workload_id'] is None):
            raise ValueError("Missing the required parameter `workload_id` when calling `get_workload_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workload_id' in params:
            path_params['workloadId'] = params['workload_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workloads/{workloadId}/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
