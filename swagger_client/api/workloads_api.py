# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class WorkloadsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def count_workloads(self, **kwargs):  # noqa: E501
        """Count workloads.  # noqa: E501

        Retrieve the number of workloads.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.count_workloads(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool deleted: Return only deleted resources when `true`.
        :param list[str] filter_by: Filter results by a parameter. Use the format field-name operator value. Operators are `==` Equals, `!=` Not equals, `<=` Less than or equal, `>=` Greater than or equal, `=@` contains, `!@` Does not contain, `=^` Starts with and `=$` Ends with. Dates are in ISO 8601 timestamp format and available for operators `==`, `!=`, `<=` and `>=`.
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.count_workloads_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.count_workloads_with_http_info(**kwargs)  # noqa: E501
            return data

    def count_workloads_with_http_info(self, **kwargs):  # noqa: E501
        """Count workloads.  # noqa: E501

        Retrieve the number of workloads.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.count_workloads_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool deleted: Return only deleted resources when `true`.
        :param list[str] filter_by: Filter results by a parameter. Use the format field-name operator value. Operators are `==` Equals, `!=` Not equals, `<=` Less than or equal, `>=` Greater than or equal, `=@` contains, `!@` Does not contain, `=^` Starts with and `=$` Ends with. Dates are in ISO 8601 timestamp format and available for operators `==`, `!=`, `<=` and `>=`.
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deleted', 'filter_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method count_workloads" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'deleted' in params:
            query_params.append(('deleted', params['deleted']))  # noqa: E501
        if 'filter_by' in params:
            query_params.append(('filterBy', params['filter_by']))  # noqa: E501
            collection_formats['filterBy'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workloads/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workload(self, workload_id, **kwargs):  # noqa: E501
        """Get a workload.  # noqa: E501

        Retrieve workload data using a `workloadId`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workload(workload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workload_id: Unique identifier of the workload. (required)
        :return: Workload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workload_with_http_info(workload_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workload_with_http_info(workload_id, **kwargs)  # noqa: E501
            return data

    def get_workload_with_http_info(self, workload_id, **kwargs):  # noqa: E501
        """Get a workload.  # noqa: E501

        Retrieve workload data using a `workloadId`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workload_with_http_info(workload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workload_id: Unique identifier of the workload. (required)
        :return: Workload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workload_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workload_id' is set
        if ('workload_id' not in params or
                params['workload_id'] is None):
            raise ValueError("Missing the required parameter `workload_id` when calling `get_workload`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workload_id' in params:
            path_params['workloadId'] = params['workload_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workloads/{workloadId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Workload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workload_metrics(self, workload_id, metric_type, start, end, **kwargs):  # noqa: E501
        """Get workload metrics data. [Experimental]  # noqa: E501

        Retrieves workloads data metrics from the metrics database. Use in reporting and analysis tools.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workload_metrics(workload_id, metric_type, start, end, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workload_id: Unique identifier of the workload. (required)
        :param list[WorkloadMetricType] metric_type: Specify which data to request. (required)
        :param datetime start: Start date of time range to fetch data in ISO 8601 timestamp format. (required)
        :param datetime end: End date of time range to fetch data in ISO 8601 timestamp format. (required)
        :param int number_of_samples: The number of samples to take in the specified time range.
        :return: MetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workload_metrics_with_http_info(workload_id, metric_type, start, end, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workload_metrics_with_http_info(workload_id, metric_type, start, end, **kwargs)  # noqa: E501
            return data

    def get_workload_metrics_with_http_info(self, workload_id, metric_type, start, end, **kwargs):  # noqa: E501
        """Get workload metrics data. [Experimental]  # noqa: E501

        Retrieves workloads data metrics from the metrics database. Use in reporting and analysis tools.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workload_metrics_with_http_info(workload_id, metric_type, start, end, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workload_id: Unique identifier of the workload. (required)
        :param list[WorkloadMetricType] metric_type: Specify which data to request. (required)
        :param datetime start: Start date of time range to fetch data in ISO 8601 timestamp format. (required)
        :param datetime end: End date of time range to fetch data in ISO 8601 timestamp format. (required)
        :param int number_of_samples: The number of samples to take in the specified time range.
        :return: MetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workload_id', 'metric_type', 'start', 'end', 'number_of_samples']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workload_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workload_id' is set
        if ('workload_id' not in params or
                params['workload_id'] is None):
            raise ValueError("Missing the required parameter `workload_id` when calling `get_workload_metrics`")  # noqa: E501
        # verify the required parameter 'metric_type' is set
        if ('metric_type' not in params or
                params['metric_type'] is None):
            raise ValueError("Missing the required parameter `metric_type` when calling `get_workload_metrics`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_workload_metrics`")  # noqa: E501
        # verify the required parameter 'end' is set
        if ('end' not in params or
                params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_workload_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workload_id' in params:
            path_params['workloadId'] = params['workload_id']  # noqa: E501

        query_params = []
        if 'metric_type' in params:
            query_params.append(('metricType', params['metric_type']))  # noqa: E501
            collection_formats['metricType'] = 'csv'  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'number_of_samples' in params:
            query_params.append(('numberOfSamples', params['number_of_samples']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workloads/{workloadId}/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetricsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workloads(self, **kwargs):  # noqa: E501
        """List workloads.  # noqa: E501

        Retrieve a list of active workloads with details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workloads(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool deleted: Return only deleted resources when `true`.
        :param int offset: The offset of the first item returned in the collection.
        :param int limit: The maximum number of entries to return.
        :param str sort_order: Sort results in descending or ascending order.
        :param str sort_by: Sort results by a parameter.
        :param list[str] filter_by: Filter results by a parameter. Use the format field-name operator value. Operators are `==` Equals, `!=` Not equals, `<=` Less than or equal, `>=` Greater than or equal, `=@` contains, `!@` Does not contain, `=^` Starts with and `=$` Ends with. Dates are in ISO 8601 timestamp format and available for operators `==`, `!=`, `<=` and `>=`.
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workloads_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_workloads_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_workloads_with_http_info(self, **kwargs):  # noqa: E501
        """List workloads.  # noqa: E501

        Retrieve a list of active workloads with details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workloads_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool deleted: Return only deleted resources when `true`.
        :param int offset: The offset of the first item returned in the collection.
        :param int limit: The maximum number of entries to return.
        :param str sort_order: Sort results in descending or ascending order.
        :param str sort_by: Sort results by a parameter.
        :param list[str] filter_by: Filter results by a parameter. Use the format field-name operator value. Operators are `==` Equals, `!=` Not equals, `<=` Less than or equal, `>=` Greater than or equal, `=@` contains, `!@` Does not contain, `=^` Starts with and `=$` Ends with. Dates are in ISO 8601 timestamp format and available for operators `==`, `!=`, `<=` and `>=`.
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deleted', 'offset', 'limit', 'sort_order', 'sort_by', 'filter_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workloads" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'deleted' in params:
            query_params.append(('deleted', params['deleted']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'filter_by' in params:
            query_params.append(('filterBy', params['filter_by']))  # noqa: E501
            collection_formats['filterBy'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workloads', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workloads_telemetry(self, telemetry_type, **kwargs):  # noqa: E501
        """Get the workloads telemetry. [Experimental]  # noqa: E501

        Retrieves workload data by telemetry type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workloads_telemetry(telemetry_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkloadTelemetryType telemetry_type: Specifies the telemetry type. (required)
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :param str nodepool_name: Filter using the nodepool.
        :param str department_id: Filter using the department id.
        :param list[str] group_by: Group workloads by field.
        :return: TelemetryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workloads_telemetry_with_http_info(telemetry_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workloads_telemetry_with_http_info(telemetry_type, **kwargs)  # noqa: E501
            return data

    def get_workloads_telemetry_with_http_info(self, telemetry_type, **kwargs):  # noqa: E501
        """Get the workloads telemetry. [Experimental]  # noqa: E501

        Retrieves workload data by telemetry type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workloads_telemetry_with_http_info(telemetry_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkloadTelemetryType telemetry_type: Specifies the telemetry type. (required)
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :param str nodepool_name: Filter using the nodepool.
        :param str department_id: Filter using the department id.
        :param list[str] group_by: Group workloads by field.
        :return: TelemetryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['telemetry_type', 'cluster_id', 'nodepool_name', 'department_id', 'group_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workloads_telemetry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'telemetry_type' is set
        if ('telemetry_type' not in params or
                params['telemetry_type'] is None):
            raise ValueError("Missing the required parameter `telemetry_type` when calling `get_workloads_telemetry`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501
        if 'nodepool_name' in params:
            query_params.append(('nodepoolName', params['nodepool_name']))  # noqa: E501
        if 'department_id' in params:
            query_params.append(('departmentId', params['department_id']))  # noqa: E501
        if 'group_by' in params:
            query_params.append(('groupBy', params['group_by']))  # noqa: E501
            collection_formats['groupBy'] = 'csv'  # noqa: E501
        if 'telemetry_type' in params:
            query_params.append(('telemetryType', params['telemetry_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workloads/telemetry', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TelemetryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
