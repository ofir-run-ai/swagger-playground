# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TrainingsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_training1(self, **kwargs):  # noqa: E501
        """Create a training. [Experimental]  # noqa: E501

        Create a training workload using container related fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_training1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrainingCreationRequest body:
        :return: Training1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_training1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_training1_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_training1_with_http_info(self, **kwargs):  # noqa: E501
        """Create a training. [Experimental]  # noqa: E501

        Create a training workload using container related fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_training1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrainingCreationRequest body:
        :return: Training1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_training1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workloads/trainings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Training1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_training(self, workload_id, **kwargs):  # noqa: E501
        """Delete a training. [Experimental]  # noqa: E501

        Delete a training using a workload id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_training(workload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workload_id: Unique identifier of the workload. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_training_with_http_info(workload_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_training_with_http_info(workload_id, **kwargs)  # noqa: E501
            return data

    def delete_training_with_http_info(self, workload_id, **kwargs):  # noqa: E501
        """Delete a training. [Experimental]  # noqa: E501

        Delete a training using a workload id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_training_with_http_info(workload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workload_id: Unique identifier of the workload. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workload_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_training" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workload_id' is set
        if ('workload_id' not in params or
                params['workload_id'] is None):
            raise ValueError("Missing the required parameter `workload_id` when calling `delete_training`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workload_id' in params:
            path_params['workloadId'] = params['workload_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workloads/trainings/{workloadId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_training(self, workload_id, **kwargs):  # noqa: E501
        """Get training data. [Experimental]  # noqa: E501

        Retrieve training details using a workload id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_training(workload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workload_id: Unique identifier of the workload. (required)
        :return: Training1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_training_with_http_info(workload_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_training_with_http_info(workload_id, **kwargs)  # noqa: E501
            return data

    def get_training_with_http_info(self, workload_id, **kwargs):  # noqa: E501
        """Get training data. [Experimental]  # noqa: E501

        Retrieve training details using a workload id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_training_with_http_info(workload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workload_id: Unique identifier of the workload. (required)
        :return: Training1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workload_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_training" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workload_id' is set
        if ('workload_id' not in params or
                params['workload_id'] is None):
            raise ValueError("Missing the required parameter `workload_id` when calling `get_training`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workload_id' in params:
            path_params['workloadId'] = params['workload_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workloads/trainings/{workloadId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Training1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resume_training(self, workload_id, **kwargs):  # noqa: E501
        """Resume a training. [Experimental]  # noqa: E501

        Resume a training that was suspended using a workload id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resume_training(workload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workload_id: Unique identifier of the workload. (required)
        :return: HttpResponse2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resume_training_with_http_info(workload_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resume_training_with_http_info(workload_id, **kwargs)  # noqa: E501
            return data

    def resume_training_with_http_info(self, workload_id, **kwargs):  # noqa: E501
        """Resume a training. [Experimental]  # noqa: E501

        Resume a training that was suspended using a workload id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resume_training_with_http_info(workload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workload_id: Unique identifier of the workload. (required)
        :return: HttpResponse2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workload_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resume_training" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workload_id' is set
        if ('workload_id' not in params or
                params['workload_id'] is None):
            raise ValueError("Missing the required parameter `workload_id` when calling `resume_training`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workload_id' in params:
            path_params['workloadId'] = params['workload_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workloads/trainings/{workloadId}/resume', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponse2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def suspend_training(self, workload_id, **kwargs):  # noqa: E501
        """Suspend a training. [Experimental]  # noqa: E501

        Suspend a training from running using a workload id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suspend_training(workload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workload_id: Unique identifier of the workload. (required)
        :return: HttpResponse2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.suspend_training_with_http_info(workload_id, **kwargs)  # noqa: E501
        else:
            (data) = self.suspend_training_with_http_info(workload_id, **kwargs)  # noqa: E501
            return data

    def suspend_training_with_http_info(self, workload_id, **kwargs):  # noqa: E501
        """Suspend a training. [Experimental]  # noqa: E501

        Suspend a training from running using a workload id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suspend_training_with_http_info(workload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workload_id: Unique identifier of the workload. (required)
        :return: HttpResponse2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workload_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suspend_training" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workload_id' is set
        if ('workload_id' not in params or
                params['workload_id'] is None):
            raise ValueError("Missing the required parameter `workload_id` when calling `suspend_training`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workload_id' in params:
            path_params['workloadId'] = params['workload_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workloads/trainings/{workloadId}/suspend', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponse2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
