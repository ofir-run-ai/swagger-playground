# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DatavolumesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_datavolume(self, body, **kwargs):  # noqa: E501
        """Create a datavolume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_datavolume(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatavolumeCreationFields body: The datavolume to create. (required)
        :return: Datavolume
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_datavolume_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_datavolume_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_datavolume_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a datavolume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_datavolume_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatavolumeCreationFields body: The datavolume to create. (required)
        :return: Datavolume
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_datavolume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_datavolume`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/datavolumes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Datavolume',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_datavolume(self, datavolume_id, **kwargs):  # noqa: E501
        """Delete datavolume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_datavolume(datavolume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str datavolume_id: The id of the datavolume to retrieve (required)
        :return: HttpResponse3
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_datavolume_with_http_info(datavolume_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_datavolume_with_http_info(datavolume_id, **kwargs)  # noqa: E501
            return data

    def delete_datavolume_with_http_info(self, datavolume_id, **kwargs):  # noqa: E501
        """Delete datavolume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_datavolume_with_http_info(datavolume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str datavolume_id: The id of the datavolume to retrieve (required)
        :return: HttpResponse3
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datavolume_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_datavolume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'datavolume_id' is set
        if ('datavolume_id' not in params or
                params['datavolume_id'] is None):
            raise ValueError("Missing the required parameter `datavolume_id` when calling `delete_datavolume`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'datavolume_id' in params:
            path_params['datavolumeId'] = params['datavolume_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/datavolumes/{datavolumeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponse3',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datavolume(self, datavolume_id, **kwargs):  # noqa: E501
        """Get datavolume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datavolume(datavolume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str datavolume_id: The id of the datavolume to retrieve (required)
        :return: Datavolume
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datavolume_with_http_info(datavolume_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_datavolume_with_http_info(datavolume_id, **kwargs)  # noqa: E501
            return data

    def get_datavolume_with_http_info(self, datavolume_id, **kwargs):  # noqa: E501
        """Get datavolume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datavolume_with_http_info(datavolume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str datavolume_id: The id of the datavolume to retrieve (required)
        :return: Datavolume
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datavolume_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datavolume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'datavolume_id' is set
        if ('datavolume_id' not in params or
                params['datavolume_id'] is None):
            raise ValueError("Missing the required parameter `datavolume_id` when calling `get_datavolume`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'datavolume_id' in params:
            path_params['datavolumeId'] = params['datavolume_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/datavolumes/{datavolumeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Datavolume',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datavolume_shared_scopes(self, datavolume_id, **kwargs):  # noqa: E501
        """Get the datavolume's shared scopes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datavolume_shared_scopes(datavolume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str datavolume_id: The id of the datavolume to retrieve (required)
        :return: SharedScopes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datavolume_shared_scopes_with_http_info(datavolume_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_datavolume_shared_scopes_with_http_info(datavolume_id, **kwargs)  # noqa: E501
            return data

    def get_datavolume_shared_scopes_with_http_info(self, datavolume_id, **kwargs):  # noqa: E501
        """Get the datavolume's shared scopes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datavolume_shared_scopes_with_http_info(datavolume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str datavolume_id: The id of the datavolume to retrieve (required)
        :return: SharedScopes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datavolume_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datavolume_shared_scopes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'datavolume_id' is set
        if ('datavolume_id' not in params or
                params['datavolume_id'] is None):
            raise ValueError("Missing the required parameter `datavolume_id` when calling `get_datavolume_shared_scopes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'datavolume_id' in params:
            path_params['datavolumeId'] = params['datavolume_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/datavolumes/{datavolumeId}/sharedScopes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SharedScopes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datavolumes(self, request_type, **kwargs):  # noqa: E501
        """List datavolumes in permitted scopes  # noqa: E501

        Get requested datavolumes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datavolumes(request_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatavolumeRequestType request_type: Which datavolumes would be returned in the response. Originated - datavolumes that are originated in the permitted scopes of the caller. UsableInProject - datavolumes that can be used in a specific project; if you use this value, you must also provide the project ID in the \"usableInProjectId\" query param. (required)
        :param str usable_in_project_id: Only when using \"UsableInProject\" requestType; Filter results for only datavolumes that are shared with - or originated in - the project.
        :param int offset: The offset of the first item returned in the collection.
        :param int limit: The maximum number of entries to return.
        :param str sort_by: Sort results by a parameters.
        :param str sort_order: Sort results in descending or ascending order.
        :param list[str] filter_by: Filter results by a parameter. Use the format field-name operator value. Operators are == Equals, != Not equals, <= Less than or equal, >= Greater than or equal, =@ contains, !@ Does not contains, =^ Starts with and =$ Ends with. Dates are in ISO 8601 timestamp format and available for operators ==, !=, <= and >=.
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datavolumes_with_http_info(request_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_datavolumes_with_http_info(request_type, **kwargs)  # noqa: E501
            return data

    def get_datavolumes_with_http_info(self, request_type, **kwargs):  # noqa: E501
        """List datavolumes in permitted scopes  # noqa: E501

        Get requested datavolumes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datavolumes_with_http_info(request_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatavolumeRequestType request_type: Which datavolumes would be returned in the response. Originated - datavolumes that are originated in the permitted scopes of the caller. UsableInProject - datavolumes that can be used in a specific project; if you use this value, you must also provide the project ID in the \"usableInProjectId\" query param. (required)
        :param str usable_in_project_id: Only when using \"UsableInProject\" requestType; Filter results for only datavolumes that are shared with - or originated in - the project.
        :param int offset: The offset of the first item returned in the collection.
        :param int limit: The maximum number of entries to return.
        :param str sort_by: Sort results by a parameters.
        :param str sort_order: Sort results in descending or ascending order.
        :param list[str] filter_by: Filter results by a parameter. Use the format field-name operator value. Operators are == Equals, != Not equals, <= Less than or equal, >= Greater than or equal, =@ contains, !@ Does not contains, =^ Starts with and =$ Ends with. Dates are in ISO 8601 timestamp format and available for operators ==, !=, <= and >=.
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_type', 'usable_in_project_id', 'offset', 'limit', 'sort_by', 'sort_order', 'filter_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datavolumes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request_type' is set
        if ('request_type' not in params or
                params['request_type'] is None):
            raise ValueError("Missing the required parameter `request_type` when calling `get_datavolumes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'request_type' in params:
            query_params.append(('requestType', params['request_type']))  # noqa: E501
        if 'usable_in_project_id' in params:
            query_params.append(('usableInProjectId', params['usable_in_project_id']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'filter_by' in params:
            query_params.append(('filterBy', params['filter_by']))  # noqa: E501
            collection_formats['filterBy'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/datavolumes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_datavolume(self, body, datavolume_id, **kwargs):  # noqa: E501
        """Patch datavolume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_datavolume(body, datavolume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatavolumePatchFields body: Datavolume to update. (required)
        :param str datavolume_id: The id of the datavolume to retrieve (required)
        :return: DatavolumeNoSharedScopes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_datavolume_with_http_info(body, datavolume_id, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_datavolume_with_http_info(body, datavolume_id, **kwargs)  # noqa: E501
            return data

    def patch_datavolume_with_http_info(self, body, datavolume_id, **kwargs):  # noqa: E501
        """Patch datavolume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_datavolume_with_http_info(body, datavolume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatavolumePatchFields body: Datavolume to update. (required)
        :param str datavolume_id: The id of the datavolume to retrieve (required)
        :return: DatavolumeNoSharedScopes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'datavolume_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_datavolume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_datavolume`")  # noqa: E501
        # verify the required parameter 'datavolume_id' is set
        if ('datavolume_id' not in params or
                params['datavolume_id'] is None):
            raise ValueError("Missing the required parameter `datavolume_id` when calling `patch_datavolume`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'datavolume_id' in params:
            path_params['datavolumeId'] = params['datavolume_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/datavolumes/{datavolumeId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DatavolumeNoSharedScopes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_datavolume_shared_scopes(self, body, datavolume_id, **kwargs):  # noqa: E501
        """Patch the datavolume's shared scopes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_datavolume_shared_scopes(body, datavolume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SharedScopesPatchRequest body: Requested SharedScopes of the datavolume to patch. (required)
        :param str datavolume_id: The id of the datavolume to retrieve (required)
        :return: SharedScopes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_datavolume_shared_scopes_with_http_info(body, datavolume_id, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_datavolume_shared_scopes_with_http_info(body, datavolume_id, **kwargs)  # noqa: E501
            return data

    def patch_datavolume_shared_scopes_with_http_info(self, body, datavolume_id, **kwargs):  # noqa: E501
        """Patch the datavolume's shared scopes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_datavolume_shared_scopes_with_http_info(body, datavolume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SharedScopesPatchRequest body: Requested SharedScopes of the datavolume to patch. (required)
        :param str datavolume_id: The id of the datavolume to retrieve (required)
        :return: SharedScopes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'datavolume_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_datavolume_shared_scopes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_datavolume_shared_scopes`")  # noqa: E501
        # verify the required parameter 'datavolume_id' is set
        if ('datavolume_id' not in params or
                params['datavolume_id'] is None):
            raise ValueError("Missing the required parameter `datavolume_id` when calling `patch_datavolume_shared_scopes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'datavolume_id' in params:
            path_params['datavolumeId'] = params['datavolume_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/datavolumes/{datavolumeId}/sharedScopes', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SharedScopes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
