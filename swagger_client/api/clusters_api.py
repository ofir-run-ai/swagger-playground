# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ClustersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_cluster(self, body, **kwargs):  # noqa: E501
        """Create a cluster.  # noqa: E501

        Use to create a Kubernetes cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cluster(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClusterCreationRequest body: The cluster to create. (required)
        :return: DisplayedCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_cluster_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_cluster_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_cluster_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a cluster.  # noqa: E501

        Use to create a Kubernetes cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cluster_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClusterCreationRequest body: The cluster to create. (required)
        :return: DisplayedCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/clusters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DisplayedCluster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cluster(self, cluster_uuid, **kwargs):  # noqa: E501
        """Delete a cluster.  # noqa: E501

        Use to delete a cluster by Universally Unique Identifier (UUID).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cluster(cluster_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_uuid: The Universally Unique Identifier (UUID) of the cluster. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cluster_with_http_info(cluster_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cluster_with_http_info(cluster_uuid, **kwargs)  # noqa: E501
            return data

    def delete_cluster_with_http_info(self, cluster_uuid, **kwargs):  # noqa: E501
        """Delete a cluster.  # noqa: E501

        Use to delete a cluster by Universally Unique Identifier (UUID).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cluster_with_http_info(cluster_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_uuid: The Universally Unique Identifier (UUID) of the cluster. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_uuid' is set
        if ('cluster_uuid' not in params or
                params['cluster_uuid'] is None):
            raise ValueError("Missing the required parameter `cluster_uuid` when calling `delete_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_uuid' in params:
            path_params['clusterUuid'] = params['cluster_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/clusters/{clusterUuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_by_uuid(self, cluster_uuid, **kwargs):  # noqa: E501
        """Get cluster by id.  # noqa: E501

        Retrieve cluster details by Universally Unique Identifier (UUID).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_by_uuid(cluster_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_uuid: The Universally Unique Identifier (UUID) of the cluster. (required)
        :param str verbosity: response verbosity level. 
        :return: DisplayedCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_by_uuid_with_http_info(cluster_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_by_uuid_with_http_info(cluster_uuid, **kwargs)  # noqa: E501
            return data

    def get_cluster_by_uuid_with_http_info(self, cluster_uuid, **kwargs):  # noqa: E501
        """Get cluster by id.  # noqa: E501

        Retrieve cluster details by Universally Unique Identifier (UUID).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_by_uuid_with_http_info(cluster_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_uuid: The Universally Unique Identifier (UUID) of the cluster. (required)
        :param str verbosity: response verbosity level. 
        :return: DisplayedCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_uuid', 'verbosity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_by_uuid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_uuid' is set
        if ('cluster_uuid' not in params or
                params['cluster_uuid'] is None):
            raise ValueError("Missing the required parameter `cluster_uuid` when calling `get_cluster_by_uuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_uuid' in params:
            path_params['clusterUuid'] = params['cluster_uuid']  # noqa: E501

        query_params = []
        if 'verbosity' in params:
            query_params.append(('verbosity', params['verbosity']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/clusters/{clusterUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DisplayedCluster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_install_info_by_uuid(self, cluster_uuid, version, **kwargs):  # noqa: E501
        """Retrieve the installation instructions of a cluster by ID.  # noqa: E501

        Use to retrieve installation instruction for a cluster by Universally Unique Identifier (UUID).  Supports clusters version 2.15 or above.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_install_info_by_uuid(cluster_uuid, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_uuid: The Universally Unique Identifier (UUID) of the cluster. (required)
        :param str version: The cluster version to install (required)
        :param str remote_cluster_url: The remote URL of the runai cluster
        :return: ClusterInstallationInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_install_info_by_uuid_with_http_info(cluster_uuid, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_install_info_by_uuid_with_http_info(cluster_uuid, version, **kwargs)  # noqa: E501
            return data

    def get_cluster_install_info_by_uuid_with_http_info(self, cluster_uuid, version, **kwargs):  # noqa: E501
        """Retrieve the installation instructions of a cluster by ID.  # noqa: E501

        Use to retrieve installation instruction for a cluster by Universally Unique Identifier (UUID).  Supports clusters version 2.15 or above.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_install_info_by_uuid_with_http_info(cluster_uuid, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_uuid: The Universally Unique Identifier (UUID) of the cluster. (required)
        :param str version: The cluster version to install (required)
        :param str remote_cluster_url: The remote URL of the runai cluster
        :return: ClusterInstallationInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_uuid', 'version', 'remote_cluster_url']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_install_info_by_uuid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_uuid' is set
        if ('cluster_uuid' not in params or
                params['cluster_uuid'] is None):
            raise ValueError("Missing the required parameter `cluster_uuid` when calling `get_cluster_install_info_by_uuid`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_cluster_install_info_by_uuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_uuid' in params:
            path_params['clusterUuid'] = params['cluster_uuid']  # noqa: E501

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'remote_cluster_url' in params:
            query_params.append(('remoteClusterUrl', params['remote_cluster_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/clusters/{clusterUuid}/cluster-install-info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterInstallationInfoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_metrics(self, cluster_uuid, start, end, metric_type, **kwargs):  # noqa: E501
        """Get the cluster metrics data.  # noqa: E501

        Retrieve the metrics data for a Kubernetes cluster by Universally Unique Identifier (UUID).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_metrics(cluster_uuid, start, end, metric_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_uuid: The Universally Unique Identifier (UUID) of the cluster. (required)
        :param datetime start: Start date of time range to fetch data in ISO 8601 timestamp format. (required)
        :param datetime end: End date of time range to fetch data in ISO 8601 timestamp format. (required)
        :param list[MetricsType] metric_type: specifies what data to request (required)
        :param int number_of_samples: The number of samples to take in the specified time range.
        :return: MetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_metrics_with_http_info(cluster_uuid, start, end, metric_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_metrics_with_http_info(cluster_uuid, start, end, metric_type, **kwargs)  # noqa: E501
            return data

    def get_cluster_metrics_with_http_info(self, cluster_uuid, start, end, metric_type, **kwargs):  # noqa: E501
        """Get the cluster metrics data.  # noqa: E501

        Retrieve the metrics data for a Kubernetes cluster by Universally Unique Identifier (UUID).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_metrics_with_http_info(cluster_uuid, start, end, metric_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_uuid: The Universally Unique Identifier (UUID) of the cluster. (required)
        :param datetime start: Start date of time range to fetch data in ISO 8601 timestamp format. (required)
        :param datetime end: End date of time range to fetch data in ISO 8601 timestamp format. (required)
        :param list[MetricsType] metric_type: specifies what data to request (required)
        :param int number_of_samples: The number of samples to take in the specified time range.
        :return: MetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_uuid', 'start', 'end', 'metric_type', 'number_of_samples']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_uuid' is set
        if ('cluster_uuid' not in params or
                params['cluster_uuid'] is None):
            raise ValueError("Missing the required parameter `cluster_uuid` when calling `get_cluster_metrics`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_cluster_metrics`")  # noqa: E501
        # verify the required parameter 'end' is set
        if ('end' not in params or
                params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_cluster_metrics`")  # noqa: E501
        # verify the required parameter 'metric_type' is set
        if ('metric_type' not in params or
                params['metric_type'] is None):
            raise ValueError("Missing the required parameter `metric_type` when calling `get_cluster_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_uuid' in params:
            path_params['clusterUuid'] = params['cluster_uuid']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'number_of_samples' in params:
            query_params.append(('numberOfSamples', params['number_of_samples']))  # noqa: E501
        if 'metric_type' in params:
            query_params.append(('metricType', params['metric_type']))  # noqa: E501
            collection_formats['metricType'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/clusters/{clusterUuid}/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetricsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_metrics_0(self, cluster_uuid, **kwargs):  # noqa: E501
        """Get cluster metrics.  # noqa: E501

        Get current cluster metrics. If time range query parameters supplied, then historical data will be returned as well. Deprecated - please use api/v1/clusters/{clusterUuid}/metrics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_metrics_0(cluster_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_uuid: The Universally Unique Identifier (UUID) of the cluster. (required)
        :param datetime start: Start of time range to fetch data from in UTC format.
        :param datetime end: End of time range to fetch data from in UTC format.
        :param int number_of_samples: The number of samples to take in the specified time range.
        :param str nodepool_name: Filter by unique nodepool name.
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_metrics_0_with_http_info(cluster_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_metrics_0_with_http_info(cluster_uuid, **kwargs)  # noqa: E501
            return data

    def get_cluster_metrics_0_with_http_info(self, cluster_uuid, **kwargs):  # noqa: E501
        """Get cluster metrics.  # noqa: E501

        Get current cluster metrics. If time range query parameters supplied, then historical data will be returned as well. Deprecated - please use api/v1/clusters/{clusterUuid}/metrics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_metrics_0_with_http_info(cluster_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_uuid: The Universally Unique Identifier (UUID) of the cluster. (required)
        :param datetime start: Start of time range to fetch data from in UTC format.
        :param datetime end: End of time range to fetch data from in UTC format.
        :param int number_of_samples: The number of samples to take in the specified time range.
        :param str nodepool_name: Filter by unique nodepool name.
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_uuid', 'start', 'end', 'number_of_samples', 'nodepool_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_metrics_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_uuid' is set
        if ('cluster_uuid' not in params or
                params['cluster_uuid'] is None):
            raise ValueError("Missing the required parameter `cluster_uuid` when calling `get_cluster_metrics_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_uuid' in params:
            path_params['clusterUuid'] = params['cluster_uuid']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'number_of_samples' in params:
            query_params.append(('numberOfSamples', params['number_of_samples']))  # noqa: E501
        if 'nodepool_name' in params:
            query_params.append(('nodepoolName', params['nodepool_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/k8s/clusters/{clusterUuid}/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Cluster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_clusters(self, **kwargs):  # noqa: E501
        """Get a list of clusters.  # noqa: E501

        Retrieve a list of clusters with details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_clusters(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str verbosity: response verbosity level. 
        :return: list[DisplayedCluster]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_clusters_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_clusters_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_clusters_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of clusters.  # noqa: E501

        Retrieve a list of clusters with details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_clusters_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str verbosity: response verbosity level. 
        :return: list[DisplayedCluster]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['verbosity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_clusters" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'verbosity' in params:
            query_params.append(('verbosity', params['verbosity']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/clusters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DisplayedCluster]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_install_file(self, cluster_uuid, **kwargs):  # noqa: E501
        """Get cluster installation file by id.  # noqa: E501

        Retrieve the installation values file of a cluster by Retrieve the installation values file of a given cluster by ID.  Supports clusters 2.13 and lower.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_install_file(cluster_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_uuid: Unique identifier of the cluster. (required)
        :param str cloud: Cloud type identifier.
        :param str clusterip: Comma-separated list of IP addresses that provide access to the cluster.
        :param str format: Format of the output file.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_install_file_with_http_info(cluster_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_install_file_with_http_info(cluster_uuid, **kwargs)  # noqa: E501
            return data

    def get_install_file_with_http_info(self, cluster_uuid, **kwargs):  # noqa: E501
        """Get cluster installation file by id.  # noqa: E501

        Retrieve the installation values file of a cluster by Retrieve the installation values file of a given cluster by ID.  Supports clusters 2.13 and lower.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_install_file_with_http_info(cluster_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_uuid: Unique identifier of the cluster. (required)
        :param str cloud: Cloud type identifier.
        :param str clusterip: Comma-separated list of IP addresses that provide access to the cluster.
        :param str format: Format of the output file.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_uuid', 'cloud', 'clusterip', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_install_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_uuid' is set
        if ('cluster_uuid' not in params or
                params['cluster_uuid'] is None):
            raise ValueError("Missing the required parameter `cluster_uuid` when calling `get_install_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_uuid' in params:
            path_params['cluster_uuid'] = params['cluster_uuid']  # noqa: E501

        query_params = []
        if 'cloud' in params:
            query_params.append(('cloud', params['cloud']))  # noqa: E501
        if 'clusterip' in params:
            query_params.append(('clusterip', params['clusterip']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/k8s/clusters/{cluster_uuid}/installfile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_cluster(self, body, cluster_uuid, **kwargs):  # noqa: E501
        """Update a cluster by id.  # noqa: E501

        Use to update the details of a Kubernetes cluster by Universally Unique Identifier (UUID).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cluster(body, cluster_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClusterUpdateRequest body: The cluster details to update (required)
        :param str cluster_uuid: The Universally Unique Identifier (UUID) of the cluster. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_cluster_with_http_info(body, cluster_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_cluster_with_http_info(body, cluster_uuid, **kwargs)  # noqa: E501
            return data

    def update_cluster_with_http_info(self, body, cluster_uuid, **kwargs):  # noqa: E501
        """Update a cluster by id.  # noqa: E501

        Use to update the details of a Kubernetes cluster by Universally Unique Identifier (UUID).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cluster_with_http_info(body, cluster_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClusterUpdateRequest body: The cluster details to update (required)
        :param str cluster_uuid: The Universally Unique Identifier (UUID) of the cluster. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cluster_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_cluster`")  # noqa: E501
        # verify the required parameter 'cluster_uuid' is set
        if ('cluster_uuid' not in params or
                params['cluster_uuid'] is None):
            raise ValueError("Missing the required parameter `cluster_uuid` when calling `update_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_uuid' in params:
            path_params['clusterUuid'] = params['cluster_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/clusters/{clusterUuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
