# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PolicyApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_distributed_policy(self, scope, **kwargs):  # noqa: E501
        """Delete a distributed policy.  # noqa: E501

        Use to delete a distributed policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_distributed_policy(scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope: The scope that the policy relates to. (required)
        :param str department_id: Filter using the department id.
        :param str project_id: project id to filter by
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_distributed_policy_with_http_info(scope, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_distributed_policy_with_http_info(scope, **kwargs)  # noqa: E501
            return data

    def delete_distributed_policy_with_http_info(self, scope, **kwargs):  # noqa: E501
        """Delete a distributed policy.  # noqa: E501

        Use to delete a distributed policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_distributed_policy_with_http_info(scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope: The scope that the policy relates to. (required)
        :param str department_id: Filter using the department id.
        :param str project_id: project id to filter by
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope', 'department_id', 'project_id', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_distributed_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `delete_distributed_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'department_id' in params:
            query_params.append(('departmentId', params['department_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/policy/distributed', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_inference_policy(self, scope, **kwargs):  # noqa: E501
        """Delete an inference policy.  # noqa: E501

        Use to delete an inference policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_inference_policy(scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope: The scope that the policy relates to. (required)
        :param str department_id: Filter using the department id.
        :param str project_id: project id to filter by
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_inference_policy_with_http_info(scope, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_inference_policy_with_http_info(scope, **kwargs)  # noqa: E501
            return data

    def delete_inference_policy_with_http_info(self, scope, **kwargs):  # noqa: E501
        """Delete an inference policy.  # noqa: E501

        Use to delete an inference policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_inference_policy_with_http_info(scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope: The scope that the policy relates to. (required)
        :param str department_id: Filter using the department id.
        :param str project_id: project id to filter by
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope', 'department_id', 'project_id', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_inference_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `delete_inference_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'department_id' in params:
            query_params.append(('departmentId', params['department_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/policy/inferences', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_training_policy(self, scope, **kwargs):  # noqa: E501
        """Delete a training policy.  # noqa: E501

        Use to delete a training policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_training_policy(scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope: The scope that the policy relates to. (required)
        :param str department_id: Filter using the department id.
        :param str project_id: project id to filter by
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_training_policy_with_http_info(scope, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_training_policy_with_http_info(scope, **kwargs)  # noqa: E501
            return data

    def delete_training_policy_with_http_info(self, scope, **kwargs):  # noqa: E501
        """Delete a training policy.  # noqa: E501

        Use to delete a training policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_training_policy_with_http_info(scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope: The scope that the policy relates to. (required)
        :param str department_id: Filter using the department id.
        :param str project_id: project id to filter by
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope', 'department_id', 'project_id', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_training_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `delete_training_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'department_id' in params:
            query_params.append(('departmentId', params['department_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/policy/trainings', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workspace_policy(self, scope, **kwargs):  # noqa: E501
        """Delete a workspace policy.  # noqa: E501

        Use to delete a workspace policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_policy(scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope: The scope that the policy relates to. (required)
        :param str department_id: Filter using the department id.
        :param str project_id: project id to filter by
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workspace_policy_with_http_info(scope, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workspace_policy_with_http_info(scope, **kwargs)  # noqa: E501
            return data

    def delete_workspace_policy_with_http_info(self, scope, **kwargs):  # noqa: E501
        """Delete a workspace policy.  # noqa: E501

        Use to delete a workspace policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_policy_with_http_info(scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope: The scope that the policy relates to. (required)
        :param str department_id: Filter using the department id.
        :param str project_id: project id to filter by
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope', 'department_id', 'project_id', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workspace_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `delete_workspace_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'department_id' in params:
            query_params.append(('departmentId', params['department_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/policy/workspaces', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_distributed_policy_v2(self, scope, **kwargs):  # noqa: E501
        """Get a distributed policy.  # noqa: E501

        Retrieve the details of a distributed policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_distributed_policy_v2(scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope: The scope that the policy relates to. (required)
        :param str department_id: Filter using the department id.
        :param str project_id: project id to filter by
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :return: DistributedPolicyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_distributed_policy_v2_with_http_info(scope, **kwargs)  # noqa: E501
        else:
            (data) = self.get_distributed_policy_v2_with_http_info(scope, **kwargs)  # noqa: E501
            return data

    def get_distributed_policy_v2_with_http_info(self, scope, **kwargs):  # noqa: E501
        """Get a distributed policy.  # noqa: E501

        Retrieve the details of a distributed policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_distributed_policy_v2_with_http_info(scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope: The scope that the policy relates to. (required)
        :param str department_id: Filter using the department id.
        :param str project_id: project id to filter by
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :return: DistributedPolicyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope', 'department_id', 'project_id', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_distributed_policy_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `get_distributed_policy_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'department_id' in params:
            query_params.append(('departmentId', params['department_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/policy/distributed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DistributedPolicyV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_inference_policy_v2(self, scope, **kwargs):  # noqa: E501
        """Get an inference policy.  # noqa: E501

        Retrieve the details of an inference policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_inference_policy_v2(scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope: The scope that the policy relates to. (required)
        :param str department_id: Filter using the department id.
        :param str project_id: project id to filter by
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :return: InferencePolicyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_inference_policy_v2_with_http_info(scope, **kwargs)  # noqa: E501
        else:
            (data) = self.get_inference_policy_v2_with_http_info(scope, **kwargs)  # noqa: E501
            return data

    def get_inference_policy_v2_with_http_info(self, scope, **kwargs):  # noqa: E501
        """Get an inference policy.  # noqa: E501

        Retrieve the details of an inference policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_inference_policy_v2_with_http_info(scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope: The scope that the policy relates to. (required)
        :param str department_id: Filter using the department id.
        :param str project_id: project id to filter by
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :return: InferencePolicyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope', 'department_id', 'project_id', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_inference_policy_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `get_inference_policy_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'department_id' in params:
            query_params.append(('departmentId', params['department_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/policy/inferences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InferencePolicyV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_training_policy_v2(self, scope, **kwargs):  # noqa: E501
        """Get a training policy.  # noqa: E501

        Retrieve the details of an training policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_training_policy_v2(scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope: The scope that the policy relates to. (required)
        :param str department_id: Filter using the department id.
        :param str project_id: project id to filter by
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :return: TrainingPolicyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_training_policy_v2_with_http_info(scope, **kwargs)  # noqa: E501
        else:
            (data) = self.get_training_policy_v2_with_http_info(scope, **kwargs)  # noqa: E501
            return data

    def get_training_policy_v2_with_http_info(self, scope, **kwargs):  # noqa: E501
        """Get a training policy.  # noqa: E501

        Retrieve the details of an training policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_training_policy_v2_with_http_info(scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope: The scope that the policy relates to. (required)
        :param str department_id: Filter using the department id.
        :param str project_id: project id to filter by
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :return: TrainingPolicyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope', 'department_id', 'project_id', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_training_policy_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `get_training_policy_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'department_id' in params:
            query_params.append(('departmentId', params['department_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/policy/trainings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrainingPolicyV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workspace_policy_v2(self, scope, **kwargs):  # noqa: E501
        """Get a workspace policy.  # noqa: E501

        Retrieve the details of a workspace policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_policy_v2(scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope: The scope that the policy relates to. (required)
        :param str department_id: Filter using the department id.
        :param str project_id: project id to filter by
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :return: WorkspacePolicyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workspace_policy_v2_with_http_info(scope, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_policy_v2_with_http_info(scope, **kwargs)  # noqa: E501
            return data

    def get_workspace_policy_v2_with_http_info(self, scope, **kwargs):  # noqa: E501
        """Get a workspace policy.  # noqa: E501

        Retrieve the details of a workspace policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_policy_v2_with_http_info(scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope: The scope that the policy relates to. (required)
        :param str department_id: Filter using the department id.
        :param str project_id: project id to filter by
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :return: WorkspacePolicyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope', 'department_id', 'project_id', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workspace_policy_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `get_workspace_policy_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'department_id' in params:
            query_params.append(('departmentId', params['department_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/policy/workspaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkspacePolicyV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_policies(self, **kwargs):  # noqa: E501
        """List policies  # noqa: E501

        Retrieve a list of all the applied policies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_policies(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workload_type: Policy for a specific workload type.
        :param str scope: filter by this scope.
        :param str department_id: Filter using the department id.
        :param str project_id: project id to filter by
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :return: PolicyListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_policies_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_policies_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_policies_with_http_info(self, **kwargs):  # noqa: E501
        """List policies  # noqa: E501

        Retrieve a list of all the applied policies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_policies_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workload_type: Policy for a specific workload type.
        :param str scope: filter by this scope.
        :param str department_id: Filter using the department id.
        :param str project_id: project id to filter by
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :return: PolicyListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workload_type', 'scope', 'department_id', 'project_id', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_policies" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'workload_type' in params:
            query_params.append(('workloadType', params['workload_type']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'department_id' in params:
            query_params.append(('departmentId', params['department_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/policy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PolicyListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def overwrite_distributed_policy_v2(self, **kwargs):  # noqa: E501
        """Overwrite a distributed policy.  # noqa: E501

        Use to apply a distributed policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.overwrite_distributed_policy_v2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributedPolicyOverwriteRequestV2 body:
        :param bool validate_only: Validate the given policy payload without applying it
        :return: DistributedPolicyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.overwrite_distributed_policy_v2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.overwrite_distributed_policy_v2_with_http_info(**kwargs)  # noqa: E501
            return data

    def overwrite_distributed_policy_v2_with_http_info(self, **kwargs):  # noqa: E501
        """Overwrite a distributed policy.  # noqa: E501

        Use to apply a distributed policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.overwrite_distributed_policy_v2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributedPolicyOverwriteRequestV2 body:
        :param bool validate_only: Validate the given policy payload without applying it
        :return: DistributedPolicyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'validate_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method overwrite_distributed_policy_v2" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'validate_only' in params:
            query_params.append(('validateOnly', params['validate_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/policy/distributed', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DistributedPolicyV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def overwrite_inference_policy_v2(self, **kwargs):  # noqa: E501
        """Overwrite an inference policy.  # noqa: E501

        Use to apply an inference policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.overwrite_inference_policy_v2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InferencePolicyOverwriteRequestV2 body:
        :param bool validate_only: Validate the given policy payload without applying it
        :return: InferencePolicyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.overwrite_inference_policy_v2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.overwrite_inference_policy_v2_with_http_info(**kwargs)  # noqa: E501
            return data

    def overwrite_inference_policy_v2_with_http_info(self, **kwargs):  # noqa: E501
        """Overwrite an inference policy.  # noqa: E501

        Use to apply an inference policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.overwrite_inference_policy_v2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InferencePolicyOverwriteRequestV2 body:
        :param bool validate_only: Validate the given policy payload without applying it
        :return: InferencePolicyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'validate_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method overwrite_inference_policy_v2" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'validate_only' in params:
            query_params.append(('validateOnly', params['validate_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/policy/inferences', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InferencePolicyV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def overwrite_training_policy_v2(self, **kwargs):  # noqa: E501
        """Overwrite a training policy.  # noqa: E501

        Use to apply a training policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.overwrite_training_policy_v2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrainingPolicyOverwriteRequestV2 body:
        :param bool validate_only: Validate the given policy payload without applying it
        :return: TrainingPolicyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.overwrite_training_policy_v2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.overwrite_training_policy_v2_with_http_info(**kwargs)  # noqa: E501
            return data

    def overwrite_training_policy_v2_with_http_info(self, **kwargs):  # noqa: E501
        """Overwrite a training policy.  # noqa: E501

        Use to apply a training policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.overwrite_training_policy_v2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrainingPolicyOverwriteRequestV2 body:
        :param bool validate_only: Validate the given policy payload without applying it
        :return: TrainingPolicyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'validate_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method overwrite_training_policy_v2" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'validate_only' in params:
            query_params.append(('validateOnly', params['validate_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/policy/trainings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrainingPolicyV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def overwrite_workspace_policy_v2(self, **kwargs):  # noqa: E501
        """Overwrite a workspace policy.  # noqa: E501

        Ue to apply a workspace policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.overwrite_workspace_policy_v2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkspacePolicyOverwriteRequestV2 body:
        :param bool validate_only: Validate the given policy payload without applying it
        :return: WorkspacePolicyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.overwrite_workspace_policy_v2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.overwrite_workspace_policy_v2_with_http_info(**kwargs)  # noqa: E501
            return data

    def overwrite_workspace_policy_v2_with_http_info(self, **kwargs):  # noqa: E501
        """Overwrite a workspace policy.  # noqa: E501

        Ue to apply a workspace policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.overwrite_workspace_policy_v2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkspacePolicyOverwriteRequestV2 body:
        :param bool validate_only: Validate the given policy payload without applying it
        :return: WorkspacePolicyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'validate_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method overwrite_workspace_policy_v2" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'validate_only' in params:
            query_params.append(('validateOnly', params['validate_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/policy/workspaces', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkspacePolicyV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_distributed_policy_v2(self, **kwargs):  # noqa: E501
        """Update a distributed policy.  # noqa: E501

        Use to apply changes to distributed policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_distributed_policy_v2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributedPolicyChangeRequestV2 body:
        :param bool validate_only: Validate the given policy payload without applying it
        :return: DistributedPolicyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_distributed_policy_v2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_distributed_policy_v2_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_distributed_policy_v2_with_http_info(self, **kwargs):  # noqa: E501
        """Update a distributed policy.  # noqa: E501

        Use to apply changes to distributed policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_distributed_policy_v2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributedPolicyChangeRequestV2 body:
        :param bool validate_only: Validate the given policy payload without applying it
        :return: DistributedPolicyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'validate_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_distributed_policy_v2" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'validate_only' in params:
            query_params.append(('validateOnly', params['validate_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/policy/distributed', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DistributedPolicyV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_inference_policy_v2(self, **kwargs):  # noqa: E501
        """Update an inference policy.  # noqa: E501

        Use to apply changes to inference policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_inference_policy_v2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InferencePolicyChangeRequestV2 body:
        :param bool validate_only: Validate the given policy payload without applying it
        :return: InferencePolicyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_inference_policy_v2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_inference_policy_v2_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_inference_policy_v2_with_http_info(self, **kwargs):  # noqa: E501
        """Update an inference policy.  # noqa: E501

        Use to apply changes to inference policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_inference_policy_v2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InferencePolicyChangeRequestV2 body:
        :param bool validate_only: Validate the given policy payload without applying it
        :return: InferencePolicyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'validate_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_inference_policy_v2" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'validate_only' in params:
            query_params.append(('validateOnly', params['validate_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/policy/inferences', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InferencePolicyV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_training_policy_v2(self, **kwargs):  # noqa: E501
        """Update a training policy.  # noqa: E501

        Use to apply changes to training policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_training_policy_v2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrainingPolicyChangeRequestV2 body:
        :param bool validate_only: Validate the given policy payload without applying it
        :return: TrainingPolicyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_training_policy_v2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_training_policy_v2_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_training_policy_v2_with_http_info(self, **kwargs):  # noqa: E501
        """Update a training policy.  # noqa: E501

        Use to apply changes to training policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_training_policy_v2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrainingPolicyChangeRequestV2 body:
        :param bool validate_only: Validate the given policy payload without applying it
        :return: TrainingPolicyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'validate_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_training_policy_v2" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'validate_only' in params:
            query_params.append(('validateOnly', params['validate_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/policy/trainings', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrainingPolicyV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_workspace_policy_v2(self, **kwargs):  # noqa: E501
        """Update a workspace policy.  # noqa: E501

        Use to apply changes to workspace policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_workspace_policy_v2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkspacePolicyChangeRequestV2 body:
        :param bool validate_only: Validate the given policy payload without applying it
        :return: WorkspacePolicyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_workspace_policy_v2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_workspace_policy_v2_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_workspace_policy_v2_with_http_info(self, **kwargs):  # noqa: E501
        """Update a workspace policy.  # noqa: E501

        Use to apply changes to workspace policy for a given organizational unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_workspace_policy_v2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkspacePolicyChangeRequestV2 body:
        :param bool validate_only: Validate the given policy payload without applying it
        :return: WorkspacePolicyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'validate_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_workspace_policy_v2" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'validate_only' in params:
            query_params.append(('validateOnly', params['validate_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/policy/workspaces', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkspacePolicyV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
