# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class NodesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_node_telemetry(self, telemetry_type, **kwargs):  # noqa: E501
        """Get node telemetry data.  # noqa: E501

        Retrieve node telemetry data for use in analysis applications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_node_telemetry(telemetry_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeTelemetryType telemetry_type: specifies what data to request (required)
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :param str nodepool_name: Filter using the nodepool.
        :param list[str] group_by: workload fields to group the data by
        :return: TelemetryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_node_telemetry_with_http_info(telemetry_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_node_telemetry_with_http_info(telemetry_type, **kwargs)  # noqa: E501
            return data

    def get_node_telemetry_with_http_info(self, telemetry_type, **kwargs):  # noqa: E501
        """Get node telemetry data.  # noqa: E501

        Retrieve node telemetry data for use in analysis applications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_node_telemetry_with_http_info(telemetry_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeTelemetryType telemetry_type: specifies what data to request (required)
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :param str nodepool_name: Filter using the nodepool.
        :param list[str] group_by: workload fields to group the data by
        :return: TelemetryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['telemetry_type', 'cluster_id', 'nodepool_name', 'group_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_node_telemetry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'telemetry_type' is set
        if ('telemetry_type' not in params or
                params['telemetry_type'] is None):
            raise ValueError("Missing the required parameter `telemetry_type` when calling `get_node_telemetry`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501
        if 'nodepool_name' in params:
            query_params.append(('nodepoolName', params['nodepool_name']))  # noqa: E501
        if 'group_by' in params:
            query_params.append(('groupBy', params['group_by']))  # noqa: E501
            collection_formats['groupBy'] = 'csv'  # noqa: E501
        if 'telemetry_type' in params:
            query_params.append(('telemetryType', params['telemetry_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/nodes/telemetry', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TelemetryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_nodes(self, cluster_uuid, **kwargs):  # noqa: E501
        """Get a list of nodes.  # noqa: E501

        Retrieve a list of nodes from the Kubernetes cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nodes(cluster_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_uuid: The Universally Unique Identifier (UUID) of the cluster. (required)
        :param str node_name: The node name.
        :return: Nodes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_nodes_with_http_info(cluster_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_nodes_with_http_info(cluster_uuid, **kwargs)  # noqa: E501
            return data

    def get_nodes_with_http_info(self, cluster_uuid, **kwargs):  # noqa: E501
        """Get a list of nodes.  # noqa: E501

        Retrieve a list of nodes from the Kubernetes cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nodes_with_http_info(cluster_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_uuid: The Universally Unique Identifier (UUID) of the cluster. (required)
        :param str node_name: The node name.
        :return: Nodes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_uuid', 'node_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nodes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_uuid' is set
        if ('cluster_uuid' not in params or
                params['cluster_uuid'] is None):
            raise ValueError("Missing the required parameter `cluster_uuid` when calling `get_nodes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_uuid' in params:
            path_params['clusterUuid'] = params['cluster_uuid']  # noqa: E501

        query_params = []
        if 'node_name' in params:
            query_params.append(('nodeName', params['node_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/clusters/{clusterUuid}/nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Nodes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
