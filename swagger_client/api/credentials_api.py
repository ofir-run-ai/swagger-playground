# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CredentialsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_access_key(self, body, **kwargs):  # noqa: E501
        """Create an access key.  # noqa: E501

        Use to create an S3-compatible access key credential.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_access_key(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccessKeyCreationRequest body: (required)
        :return: AccessKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_access_key_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_access_key_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_access_key_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create an access key.  # noqa: E501

        Use to create an S3-compatible access key credential.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_access_key_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccessKeyCreationRequest body: (required)
        :return: AccessKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_access_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_access_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/asset/credentials/access-key', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccessKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_docker_registry(self, body, **kwargs):  # noqa: E501
        """Create a docker registry credential.  # noqa: E501

        Use to create a docker registry credential containing userid, password and url.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_docker_registry(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DockerRegistryCreationRequest body: (required)
        :return: DockerRegistry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_docker_registry_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_docker_registry_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_docker_registry_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a docker registry credential.  # noqa: E501

        Use to create a docker registry credential containing userid, password and url.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_docker_registry_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DockerRegistryCreationRequest body: (required)
        :return: DockerRegistry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_docker_registry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_docker_registry`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/asset/credentials/docker-registry', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DockerRegistry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_generic_secret(self, body, **kwargs):  # noqa: E501
        """Create a generic-secret.  # noqa: E501

        Use to create a generic-secret asset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_generic_secret(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GenericSecretCreationRequest body: (required)
        :return: GenericSecret
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_generic_secret_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_generic_secret_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_generic_secret_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a generic-secret.  # noqa: E501

        Use to create a generic-secret asset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_generic_secret_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GenericSecretCreationRequest body: (required)
        :return: GenericSecret
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_generic_secret" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_generic_secret`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/asset/credentials/generic-secret', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericSecret',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_password(self, body, **kwargs):  # noqa: E501
        """Create a userid / password credential.  # noqa: E501

        Use to create a userid / password credential.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_password(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PasswordCreationRequest body: (required)
        :return: Password
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_password_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_password_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_password_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a userid / password credential.  # noqa: E501

        Use to create a userid / password credential.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_password_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PasswordCreationRequest body: (required)
        :return: Password
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/asset/credentials/password', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Password',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_access_key(self, asset_id, **kwargs):  # noqa: E501
        """Delete an access key.  # noqa: E501

        Use to delete an S3-compatible access key credential by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_access_key(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: Unique identifier of the asset. (required)
        :return: HttpResponse1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_access_key_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_access_key_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def delete_access_key_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """Delete an access key.  # noqa: E501

        Use to delete an S3-compatible access key credential by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_access_key_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: Unique identifier of the asset. (required)
        :return: HttpResponse1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_access_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `delete_access_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['AssetId'] = params['asset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/asset/credentials/access-key/{AssetId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponse1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_docker_registry(self, asset_id, **kwargs):  # noqa: E501
        """Delete a docker registry credential.  # noqa: E501

        Use to deletes a docker registry credential by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_docker_registry(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: Unique identifier of the asset. (required)
        :return: HttpResponse1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_docker_registry_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_docker_registry_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def delete_docker_registry_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """Delete a docker registry credential.  # noqa: E501

        Use to deletes a docker registry credential by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_docker_registry_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: Unique identifier of the asset. (required)
        :return: HttpResponse1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_docker_registry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `delete_docker_registry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['AssetId'] = params['asset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/asset/credentials/docker-registry/{AssetId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponse1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_generic_secret(self, asset_id, **kwargs):  # noqa: E501
        """Delete a generic-secret.  # noqa: E501

        Use to delete a generic-secret asset, by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_generic_secret(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: Unique identifier of the asset. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_generic_secret_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_generic_secret_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def delete_generic_secret_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """Delete a generic-secret.  # noqa: E501

        Use to delete a generic-secret asset, by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_generic_secret_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: Unique identifier of the asset. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_generic_secret" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `delete_generic_secret`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['AssetId'] = params['asset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/asset/credentials/generic-secret/{AssetId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_password(self, asset_id, **kwargs):  # noqa: E501
        """Delete a password asset.  # noqa: E501

        Udse to delete a password credential by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_password(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: Unique identifier of the asset. (required)
        :return: HttpResponse1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_password_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_password_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def delete_password_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """Delete a password asset.  # noqa: E501

        Udse to delete a password credential by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_password_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: Unique identifier of the asset. (required)
        :return: HttpResponse1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `delete_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['AssetId'] = params['asset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/asset/credentials/password/{AssetId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpResponse1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_access_key_by_id(self, asset_id, **kwargs):  # noqa: E501
        """Get an access key.  # noqa: E501

        Use to retrieve the details of an S3-compatible access key credential by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_access_key_by_id(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: Unique identifier of the asset. (required)
        :param bool usage_info: Whether the query should include asset usage information as part of the response.
        :param bool status_info: Whether the query should include asset status information as part of the response.
        :return: AccessKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_access_key_by_id_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_access_key_by_id_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def get_access_key_by_id_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """Get an access key.  # noqa: E501

        Use to retrieve the details of an S3-compatible access key credential by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_access_key_by_id_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: Unique identifier of the asset. (required)
        :param bool usage_info: Whether the query should include asset usage information as part of the response.
        :param bool status_info: Whether the query should include asset status information as part of the response.
        :return: AccessKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'usage_info', 'status_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_access_key_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `get_access_key_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['AssetId'] = params['asset_id']  # noqa: E501

        query_params = []
        if 'usage_info' in params:
            query_params.append(('usageInfo', params['usage_info']))  # noqa: E501
        if 'status_info' in params:
            query_params.append(('statusInfo', params['status_info']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/asset/credentials/access-key/{AssetId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccessKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_docker_registry_by_id(self, asset_id, **kwargs):  # noqa: E501
        """Get a docker registry credential.  # noqa: E501

        Use to retrieve the details of a docker registry credential by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_docker_registry_by_id(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: Unique identifier of the asset. (required)
        :param bool usage_info: Whether the query should include asset usage information as part of the response.
        :param bool status_info: Whether the query should include asset status information as part of the response.
        :return: DockerRegistry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_docker_registry_by_id_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_docker_registry_by_id_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def get_docker_registry_by_id_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """Get a docker registry credential.  # noqa: E501

        Use to retrieve the details of a docker registry credential by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_docker_registry_by_id_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: Unique identifier of the asset. (required)
        :param bool usage_info: Whether the query should include asset usage information as part of the response.
        :param bool status_info: Whether the query should include asset status information as part of the response.
        :return: DockerRegistry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'usage_info', 'status_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_docker_registry_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `get_docker_registry_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['AssetId'] = params['asset_id']  # noqa: E501

        query_params = []
        if 'usage_info' in params:
            query_params.append(('usageInfo', params['usage_info']))  # noqa: E501
        if 'status_info' in params:
            query_params.append(('statusInfo', params['status_info']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/asset/credentials/docker-registry/{AssetId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DockerRegistry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_generic_secret_by_id(self, asset_id, **kwargs):  # noqa: E501
        """Get a generic-secret.  # noqa: E501

        Returns the details of a generic-secret asset, by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_generic_secret_by_id(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: Unique identifier of the asset. (required)
        :param bool usage_info: Whether the query should include asset usage information as part of the response.
        :param bool status_info: Whether the query should include asset status information as part of the response.
        :return: GenericSecret
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_generic_secret_by_id_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_generic_secret_by_id_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def get_generic_secret_by_id_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """Get a generic-secret.  # noqa: E501

        Returns the details of a generic-secret asset, by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_generic_secret_by_id_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: Unique identifier of the asset. (required)
        :param bool usage_info: Whether the query should include asset usage information as part of the response.
        :param bool status_info: Whether the query should include asset status information as part of the response.
        :return: GenericSecret
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'usage_info', 'status_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_generic_secret_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `get_generic_secret_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['AssetId'] = params['asset_id']  # noqa: E501

        query_params = []
        if 'usage_info' in params:
            query_params.append(('usageInfo', params['usage_info']))  # noqa: E501
        if 'status_info' in params:
            query_params.append(('statusInfo', params['status_info']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/asset/credentials/generic-secret/{AssetId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericSecret',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_password_by_id(self, asset_id, **kwargs):  # noqa: E501
        """Get a userid / password credential.  # noqa: E501

        Use to retrieve the details of a userid / password credential asset by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_password_by_id(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: Unique identifier of the asset. (required)
        :param bool usage_info: Whether the query should include asset usage information as part of the response.
        :param bool status_info: Whether the query should include asset status information as part of the response.
        :return: Password
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_password_by_id_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_password_by_id_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def get_password_by_id_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """Get a userid / password credential.  # noqa: E501

        Use to retrieve the details of a userid / password credential asset by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_password_by_id_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: Unique identifier of the asset. (required)
        :param bool usage_info: Whether the query should include asset usage information as part of the response.
        :param bool status_info: Whether the query should include asset status information as part of the response.
        :return: Password
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'usage_info', 'status_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_password_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `get_password_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['AssetId'] = params['asset_id']  # noqa: E501

        query_params = []
        if 'usage_info' in params:
            query_params.append(('usageInfo', params['usage_info']))  # noqa: E501
        if 'status_info' in params:
            query_params.append(('statusInfo', params['status_info']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/asset/credentials/password/{AssetId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Password',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_access_keys(self, **kwargs):  # noqa: E501
        """List access keys.  # noqa: E501

        Use to retrieve a list of S3-compatible access key credentials.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_access_keys(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Filter results by name.
        :param str scope: Filter results by scope.
        :param int project_id: Filter results by project id. if scope filter is project, only assets from the specific project will be included in the response. otherwise, the response will include both project, department, cluster and tenant assets.
        :param str department_id: Filter using the department id.
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :param bool usage_info: Whether the query should include asset usage information as part of the response.
        :param bool status_info: Whether the query should include asset status information as part of the response.
        :return: AccessKeyListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_access_keys_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_access_keys_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_access_keys_with_http_info(self, **kwargs):  # noqa: E501
        """List access keys.  # noqa: E501

        Use to retrieve a list of S3-compatible access key credentials.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_access_keys_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Filter results by name.
        :param str scope: Filter results by scope.
        :param int project_id: Filter results by project id. if scope filter is project, only assets from the specific project will be included in the response. otherwise, the response will include both project, department, cluster and tenant assets.
        :param str department_id: Filter using the department id.
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :param bool usage_info: Whether the query should include asset usage information as part of the response.
        :param bool status_info: Whether the query should include asset status information as part of the response.
        :return: AccessKeyListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'scope', 'project_id', 'department_id', 'cluster_id', 'usage_info', 'status_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_access_keys" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'department_id' in params:
            query_params.append(('departmentId', params['department_id']))  # noqa: E501
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501
        if 'usage_info' in params:
            query_params.append(('usageInfo', params['usage_info']))  # noqa: E501
        if 'status_info' in params:
            query_params.append(('statusInfo', params['status_info']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/asset/credentials/access-key', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccessKeyListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_credentials_assets(self, **kwargs):  # noqa: E501
        """List credentials.  # noqa: E501

        Use to retrieve a list of all existing credentials.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_credentials_assets(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Filter results by name.
        :param str scope: Filter results by scope.
        :param int project_id: Filter results by project id. if scope filter is project, only assets from the specific project will be included in the response. otherwise, the response will include both project, department, cluster and tenant assets.
        :param str department_id: Filter using the department id.
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :param bool usage_info: Whether the query should include asset usage information as part of the response.
        :param bool status_info: Whether the query should include asset status information as part of the response.
        :return: CredentialsListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_credentials_assets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_credentials_assets_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_credentials_assets_with_http_info(self, **kwargs):  # noqa: E501
        """List credentials.  # noqa: E501

        Use to retrieve a list of all existing credentials.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_credentials_assets_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Filter results by name.
        :param str scope: Filter results by scope.
        :param int project_id: Filter results by project id. if scope filter is project, only assets from the specific project will be included in the response. otherwise, the response will include both project, department, cluster and tenant assets.
        :param str department_id: Filter using the department id.
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :param bool usage_info: Whether the query should include asset usage information as part of the response.
        :param bool status_info: Whether the query should include asset status information as part of the response.
        :return: CredentialsListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'scope', 'project_id', 'department_id', 'cluster_id', 'usage_info', 'status_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_credentials_assets" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'department_id' in params:
            query_params.append(('departmentId', params['department_id']))  # noqa: E501
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501
        if 'usage_info' in params:
            query_params.append(('usageInfo', params['usage_info']))  # noqa: E501
        if 'status_info' in params:
            query_params.append(('statusInfo', params['status_info']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/asset/credentials', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CredentialsListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_docker_registries(self, **kwargs):  # noqa: E501
        """List docker registry credentials.  # noqa: E501

        Use to retrieve a list of docker registry credentials.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_docker_registries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Filter results by name.
        :param str scope: Filter results by scope.
        :param int project_id: Filter results by project id. if scope filter is project, only assets from the specific project will be included in the response. otherwise, the response will include both project, department, cluster and tenant assets.
        :param str department_id: Filter using the department id.
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :param bool usage_info: Whether the query should include asset usage information as part of the response.
        :param bool status_info: Whether the query should include asset status information as part of the response.
        :return: DockerRegistryListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_docker_registries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_docker_registries_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_docker_registries_with_http_info(self, **kwargs):  # noqa: E501
        """List docker registry credentials.  # noqa: E501

        Use to retrieve a list of docker registry credentials.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_docker_registries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Filter results by name.
        :param str scope: Filter results by scope.
        :param int project_id: Filter results by project id. if scope filter is project, only assets from the specific project will be included in the response. otherwise, the response will include both project, department, cluster and tenant assets.
        :param str department_id: Filter using the department id.
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :param bool usage_info: Whether the query should include asset usage information as part of the response.
        :param bool status_info: Whether the query should include asset status information as part of the response.
        :return: DockerRegistryListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'scope', 'project_id', 'department_id', 'cluster_id', 'usage_info', 'status_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_docker_registries" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'department_id' in params:
            query_params.append(('departmentId', params['department_id']))  # noqa: E501
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501
        if 'usage_info' in params:
            query_params.append(('usageInfo', params['usage_info']))  # noqa: E501
        if 'status_info' in params:
            query_params.append(('statusInfo', params['status_info']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/asset/credentials/docker-registry', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DockerRegistryListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_generic_secret(self, **kwargs):  # noqa: E501
        """List generic-secrets.  # noqa: E501

        Retrieve a list of generic-secret assets.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_generic_secret(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Filter results by name.
        :param str scope: Filter results by scope.
        :param int project_id: Filter results by project id. if scope filter is project, only assets from the specific project will be included in the response. otherwise, the response will include both project, department, cluster and tenant assets.
        :param str department_id: Filter using the department id.
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :param bool usage_info: Whether the query should include asset usage information as part of the response.
        :param bool status_info: Whether the query should include asset status information as part of the response.
        :return: GenericSecretListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_generic_secret_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_generic_secret_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_generic_secret_with_http_info(self, **kwargs):  # noqa: E501
        """List generic-secrets.  # noqa: E501

        Retrieve a list of generic-secret assets.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_generic_secret_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Filter results by name.
        :param str scope: Filter results by scope.
        :param int project_id: Filter results by project id. if scope filter is project, only assets from the specific project will be included in the response. otherwise, the response will include both project, department, cluster and tenant assets.
        :param str department_id: Filter using the department id.
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :param bool usage_info: Whether the query should include asset usage information as part of the response.
        :param bool status_info: Whether the query should include asset status information as part of the response.
        :return: GenericSecretListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'scope', 'project_id', 'department_id', 'cluster_id', 'usage_info', 'status_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_generic_secret" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'department_id' in params:
            query_params.append(('departmentId', params['department_id']))  # noqa: E501
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501
        if 'usage_info' in params:
            query_params.append(('usageInfo', params['usage_info']))  # noqa: E501
        if 'status_info' in params:
            query_params.append(('statusInfo', params['status_info']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/asset/credentials/generic-secret', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericSecretListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_passwords(self, **kwargs):  # noqa: E501
        """List password credentials.  # noqa: E501

        Use to retrieve a list of password credentials.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_passwords(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Filter results by name.
        :param str scope: Filter results by scope.
        :param int project_id: Filter results by project id. if scope filter is project, only assets from the specific project will be included in the response. otherwise, the response will include both project, department, cluster and tenant assets.
        :param str department_id: Filter using the department id.
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :param bool usage_info: Whether the query should include asset usage information as part of the response.
        :param bool status_info: Whether the query should include asset status information as part of the response.
        :return: PasswordListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_passwords_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_passwords_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_passwords_with_http_info(self, **kwargs):  # noqa: E501
        """List password credentials.  # noqa: E501

        Use to retrieve a list of password credentials.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_passwords_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Filter results by name.
        :param str scope: Filter results by scope.
        :param int project_id: Filter results by project id. if scope filter is project, only assets from the specific project will be included in the response. otherwise, the response will include both project, department, cluster and tenant assets.
        :param str department_id: Filter using the department id.
        :param str cluster_id: Filter using the Universally Unique Identifier (UUID) of the cluster.
        :param bool usage_info: Whether the query should include asset usage information as part of the response.
        :param bool status_info: Whether the query should include asset status information as part of the response.
        :return: PasswordListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'scope', 'project_id', 'department_id', 'cluster_id', 'usage_info', 'status_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_passwords" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'department_id' in params:
            query_params.append(('departmentId', params['department_id']))  # noqa: E501
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501
        if 'usage_info' in params:
            query_params.append(('usageInfo', params['usage_info']))  # noqa: E501
        if 'status_info' in params:
            query_params.append(('statusInfo', params['status_info']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/asset/credentials/password', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PasswordListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_access_key(self, body, asset_id, **kwargs):  # noqa: E501
        """Update an access key.  # noqa: E501

        Use to update the details of an S3-compatible access key credential by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_access_key(body, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccessKeyUpdateRequest body: (required)
        :param str asset_id: Unique identifier of the asset. (required)
        :return: AccessKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_access_key_with_http_info(body, asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_access_key_with_http_info(body, asset_id, **kwargs)  # noqa: E501
            return data

    def update_access_key_with_http_info(self, body, asset_id, **kwargs):  # noqa: E501
        """Update an access key.  # noqa: E501

        Use to update the details of an S3-compatible access key credential by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_access_key_with_http_info(body, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccessKeyUpdateRequest body: (required)
        :param str asset_id: Unique identifier of the asset. (required)
        :return: AccessKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'asset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_access_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_access_key`")  # noqa: E501
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `update_access_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['AssetId'] = params['asset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/asset/credentials/access-key/{AssetId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccessKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_docker_registry(self, body, asset_id, **kwargs):  # noqa: E501
        """Update a docker registry credential.  # noqa: E501

        Use to updates the details of a docker registry credentials by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_docker_registry(body, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DockerRegistryUpdateRequest body: (required)
        :param str asset_id: Unique identifier of the asset. (required)
        :return: DockerRegistry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_docker_registry_with_http_info(body, asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_docker_registry_with_http_info(body, asset_id, **kwargs)  # noqa: E501
            return data

    def update_docker_registry_with_http_info(self, body, asset_id, **kwargs):  # noqa: E501
        """Update a docker registry credential.  # noqa: E501

        Use to updates the details of a docker registry credentials by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_docker_registry_with_http_info(body, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DockerRegistryUpdateRequest body: (required)
        :param str asset_id: Unique identifier of the asset. (required)
        :return: DockerRegistry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'asset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_docker_registry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_docker_registry`")  # noqa: E501
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `update_docker_registry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['AssetId'] = params['asset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/asset/credentials/docker-registry/{AssetId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DockerRegistry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_generic_secret(self, body, asset_id, **kwargs):  # noqa: E501
        """Update a generic-secret.  # noqa: E501

        Updates the details of a generic-secret asset, by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_generic_secret(body, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GenericSecretUpdateRequest body: (required)
        :param str asset_id: Unique identifier of the asset. (required)
        :return: GenericSecret
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_generic_secret_with_http_info(body, asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_generic_secret_with_http_info(body, asset_id, **kwargs)  # noqa: E501
            return data

    def update_generic_secret_with_http_info(self, body, asset_id, **kwargs):  # noqa: E501
        """Update a generic-secret.  # noqa: E501

        Updates the details of a generic-secret asset, by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_generic_secret_with_http_info(body, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GenericSecretUpdateRequest body: (required)
        :param str asset_id: Unique identifier of the asset. (required)
        :return: GenericSecret
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'asset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_generic_secret" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_generic_secret`")  # noqa: E501
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `update_generic_secret`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['AssetId'] = params['asset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/asset/credentials/generic-secret/{AssetId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericSecret',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_password(self, body, asset_id, **kwargs):  # noqa: E501
        """Update a password credential.  # noqa: E501

        Use to Update the details of a password credential by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_password(body, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PasswordUpdateRequest body: (required)
        :param str asset_id: Unique identifier of the asset. (required)
        :return: Password
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_password_with_http_info(body, asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_password_with_http_info(body, asset_id, **kwargs)  # noqa: E501
            return data

    def update_password_with_http_info(self, body, asset_id, **kwargs):  # noqa: E501
        """Update a password credential.  # noqa: E501

        Use to Update the details of a password credential by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_password_with_http_info(body, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PasswordUpdateRequest body: (required)
        :param str asset_id: Unique identifier of the asset. (required)
        :return: Password
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'asset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_password`")  # noqa: E501
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `update_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['AssetId'] = params['asset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/asset/credentials/password/{AssetId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Password',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
