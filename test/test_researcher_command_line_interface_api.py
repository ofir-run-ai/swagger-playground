# coding: utf-8

"""
    Runai API

    # Introduction  The Run:AI Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://docs.run.ai/latest/admin/runai-setup/access-control/rbac/?h=create+delete+app#roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://docs.run.ai/latest/developer/rest-auth/#request-an-api-token).   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

import swagger_client
from swagger_client.api.researcher_command_line_interface_api import ResearcherCommandLineInterfaceApi  # noqa: E501
from swagger_client.rest import ApiException


class TestResearcherCommandLineInterfaceApi(unittest.TestCase):
    """ResearcherCommandLineInterfaceApi unit test stubs"""

    def setUp(self):
        self.api = ResearcherCommandLineInterfaceApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_get_binary(self):
        """Test case for get_binary

        Download RunAI Researcher command line binary [Experimental]  # noqa: E501
        """
        pass

    def test_get_installer_linux(self):
        """Test case for get_installer_linux

        Download Linux installer script [Experimental]  # noqa: E501
        """
        pass

    def test_get_installer_linux_commands(self):
        """Test case for get_installer_linux_commands

        Get Linux installer script commands [Experimental]  # noqa: E501
        """
        pass

    def test_get_installer_mac(self):
        """Test case for get_installer_mac

        Download Mac installer script [Experimental]  # noqa: E501
        """
        pass

    def test_get_installer_mac_commands(self):
        """Test case for get_installer_mac_commands

        Get Mac installer script commands [Experimental]  # noqa: E501
        """
        pass

    def test_get_installer_unix(self):
        """Test case for get_installer_unix

        Download Unix installer script [Experimental]  # noqa: E501
        """
        pass

    def test_get_installer_unix_commands(self):
        """Test case for get_installer_unix_commands

        Get Unix installer script commands [Experimental]  # noqa: E501
        """
        pass

    def test_get_installer_windows(self):
        """Test case for get_installer_windows

        Download Windows MSI [Experimental]  # noqa: E501
        """
        pass

    def test_get_installer_windows_commands(self):
        """Test case for get_installer_windows_commands

        Get Windows MSI installer script commands [Experimental]  # noqa: E501
        """
        pass

    def test_get_manual_document(self):
        """Test case for get_manual_document

        Get CLI document by name [Experimental]  # noqa: E501
        """
        pass

    def test_get_version(self):
        """Test case for get_version

        Get CLI latest version [Experimental]  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
